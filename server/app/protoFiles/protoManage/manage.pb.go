// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: manage.proto

package protoManage

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Order int32

const (
	Order_Unknow Order = 0
	//其他
	Order_TopLinkFind     Order = 1
	Order_TopLinkFindByID Order = 2
	Order_TopLinkAdd      Order = 3
	Order_TopLinkDel      Order = 4
	Order_TopLinkUpdate   Order = 5
	Order_NodeTest        Order = 6
	//管理员
	Order_ManagerLogin         Order = 101
	Order_ManagerRegister      Order = 102
	Order_ManagerAdd           Order = 103
	Order_ManagerDel           Order = 104
	Order_ManagerUpdate        Order = 105
	Order_ManagerUpdatePasswd  Order = 106
	Order_ManagerUpdateSetting Order = 107
	Order_ManagerFindNickName  Order = 108
	Order_ManagerFindLowLevel  Order = 109
	Order_ManagerFindByID      Order = 110
	Order_ManagerFindByLevel   Order = 111
	//节点
	Order_NodeAdd         Order = 401
	Order_NodeDel         Order = 402
	Order_NodeUpdateState Order = 403
	Order_NodeFind        Order = 404
	Order_NodeFindByID    Order = 405
	//节点方法
	Order_NodeFuncAdd                   Order = 601
	Order_NodeFuncDel                   Order = 602
	Order_NodeFuncDelAllWithNodeID      Order = 603
	Order_NodeFuncUpdateDesc            Order = 604
	Order_NodeFuncUpdatePara            Order = 605
	Order_NodeFuncFind                  Order = 606
	Order_NodeFuncFindByID              Order = 607
	Order_NodeFuncCallReq               Order = 608
	Order_NodeFuncCallAns               Order = 609
	Order_NodeFuncCallFind              Order = 610
	Order_NodeFuncCallFindByID          Order = 611
	Order_NodeFuncCallFindParameterByID Order = 612
	Order_NodeFuncCallFindReturnValByID Order = 613
	//节点报告
	Order_NodeReportAdd              Order = 701
	Order_NodeReportDel              Order = 702
	Order_NodeReportDelAllWithNodeID Order = 703
	Order_NodeReportUpdateVal        Order = 704
	Order_NodeReportFind             Order = 705
	Order_NodeReportFindByID         Order = 706
	Order_NodeReportValFind          Order = 707
	//节点通知
	Order_NodeNotifyAdd   Order = 801
	Order_NodeNotifyFind  Order = 802
	Order_NodeNotifyError Order = 803
	//节点资源
	Order_NodeResourceUpload   Order = 901
	Order_NodeResourceDownload Order = 902
	Order_NodeResourceCheck    Order = 903
	Order_NodeResourceDel      Order = 904
)

var Order_name = map[int32]string{
	0:   "Unknow",
	1:   "TopLinkFind",
	2:   "TopLinkFindByID",
	3:   "TopLinkAdd",
	4:   "TopLinkDel",
	5:   "TopLinkUpdate",
	6:   "NodeTest",
	101: "ManagerLogin",
	102: "ManagerRegister",
	103: "ManagerAdd",
	104: "ManagerDel",
	105: "ManagerUpdate",
	106: "ManagerUpdatePasswd",
	107: "ManagerUpdateSetting",
	108: "ManagerFindNickName",
	109: "ManagerFindLowLevel",
	110: "ManagerFindByID",
	111: "ManagerFindByLevel",
	401: "NodeAdd",
	402: "NodeDel",
	403: "NodeUpdateState",
	404: "NodeFind",
	405: "NodeFindByID",
	601: "NodeFuncAdd",
	602: "NodeFuncDel",
	603: "NodeFuncDelAllWithNodeID",
	604: "NodeFuncUpdateDesc",
	605: "NodeFuncUpdatePara",
	606: "NodeFuncFind",
	607: "NodeFuncFindByID",
	608: "NodeFuncCallReq",
	609: "NodeFuncCallAns",
	610: "NodeFuncCallFind",
	611: "NodeFuncCallFindByID",
	612: "NodeFuncCallFindParameterByID",
	613: "NodeFuncCallFindReturnValByID",
	701: "NodeReportAdd",
	702: "NodeReportDel",
	703: "NodeReportDelAllWithNodeID",
	704: "NodeReportUpdateVal",
	705: "NodeReportFind",
	706: "NodeReportFindByID",
	707: "NodeReportValFind",
	801: "NodeNotifyAdd",
	802: "NodeNotifyFind",
	803: "NodeNotifyError",
	901: "NodeResourceUpload",
	902: "NodeResourceDownload",
	903: "NodeResourceCheck",
	904: "NodeResourceDel",
}

var Order_value = map[string]int32{
	"Unknow":                        0,
	"TopLinkFind":                   1,
	"TopLinkFindByID":               2,
	"TopLinkAdd":                    3,
	"TopLinkDel":                    4,
	"TopLinkUpdate":                 5,
	"NodeTest":                      6,
	"ManagerLogin":                  101,
	"ManagerRegister":               102,
	"ManagerAdd":                    103,
	"ManagerDel":                    104,
	"ManagerUpdate":                 105,
	"ManagerUpdatePasswd":           106,
	"ManagerUpdateSetting":          107,
	"ManagerFindNickName":           108,
	"ManagerFindLowLevel":           109,
	"ManagerFindByID":               110,
	"ManagerFindByLevel":            111,
	"NodeAdd":                       401,
	"NodeDel":                       402,
	"NodeUpdateState":               403,
	"NodeFind":                      404,
	"NodeFindByID":                  405,
	"NodeFuncAdd":                   601,
	"NodeFuncDel":                   602,
	"NodeFuncDelAllWithNodeID":      603,
	"NodeFuncUpdateDesc":            604,
	"NodeFuncUpdatePara":            605,
	"NodeFuncFind":                  606,
	"NodeFuncFindByID":              607,
	"NodeFuncCallReq":               608,
	"NodeFuncCallAns":               609,
	"NodeFuncCallFind":              610,
	"NodeFuncCallFindByID":          611,
	"NodeFuncCallFindParameterByID": 612,
	"NodeFuncCallFindReturnValByID": 613,
	"NodeReportAdd":                 701,
	"NodeReportDel":                 702,
	"NodeReportDelAllWithNodeID":    703,
	"NodeReportUpdateVal":           704,
	"NodeReportFind":                705,
	"NodeReportFindByID":            706,
	"NodeReportValFind":             707,
	"NodeNotifyAdd":                 801,
	"NodeNotifyFind":                802,
	"NodeNotifyError":               803,
	"NodeResourceUpload":            901,
	"NodeResourceDownload":          902,
	"NodeResourceCheck":             903,
	"NodeResourceDel":               904,
}

func (x Order) String() string {
	return proto.EnumName(Order_name, int32(x))
}

func (Order) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{0}
}

type State int32

const (
	State_StateNot    State = 0
	State_StateUnknow State = 1
	State_StateNormal State = 2
	State_StateWarn   State = 3
	State_StateError  State = 4
)

var State_name = map[int32]string{
	0: "StateNot",
	1: "StateUnknow",
	2: "StateNormal",
	3: "StateWarn",
	4: "StateError",
}

var State_value = map[string]int32{
	"StateNot":    0,
	"StateUnknow": 1,
	"StateNormal": 2,
	"StateWarn":   3,
	"StateError":  4,
}

func (x State) String() string {
	return proto.EnumName(State_name, int32(x))
}

func (State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{1}
}

type Level int32

const (
	Level_LevelNot          Level = 0
	Level_LevelPrimary      Level = 1
	Level_LevelIntermediate Level = 2
	Level_LevelSenior       Level = 3
	Level_LevelSuper        Level = 4
)

var Level_name = map[int32]string{
	0: "LevelNot",
	1: "LevelPrimary",
	2: "LevelIntermediate",
	3: "LevelSenior",
	4: "LevelSuper",
}

var Level_value = map[string]int32{
	"LevelNot":          0,
	"LevelPrimary":      1,
	"LevelIntermediate": 2,
	"LevelSenior":       3,
	"LevelSuper":        4,
}

func (x Level) String() string {
	return proto.EnumName(Level_name, int32(x))
}

func (Level) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{2}
}

type NodeFuncReturnType int32

const (
	NodeFuncReturnType_Unknown   NodeFuncReturnType = 0
	NodeFuncReturnType_NotReturn NodeFuncReturnType = 1
	NodeFuncReturnType_Error     NodeFuncReturnType = 2
	NodeFuncReturnType_Text      NodeFuncReturnType = 3
	NodeFuncReturnType_Json      NodeFuncReturnType = 4
	NodeFuncReturnType_Link      NodeFuncReturnType = 5
	NodeFuncReturnType_Image     NodeFuncReturnType = 6
	NodeFuncReturnType_Media     NodeFuncReturnType = 7
	NodeFuncReturnType_File      NodeFuncReturnType = 8
	NodeFuncReturnType_Table     NodeFuncReturnType = 9
	NodeFuncReturnType_Charts    NodeFuncReturnType = 10
)

var NodeFuncReturnType_name = map[int32]string{
	0:  "Unknown",
	1:  "NotReturn",
	2:  "Error",
	3:  "Text",
	4:  "Json",
	5:  "Link",
	6:  "Image",
	7:  "Media",
	8:  "File",
	9:  "Table",
	10: "Charts",
}

var NodeFuncReturnType_value = map[string]int32{
	"Unknown":   0,
	"NotReturn": 1,
	"Error":     2,
	"Text":      3,
	"Json":      4,
	"Link":      5,
	"Image":     6,
	"Media":     7,
	"File":      8,
	"Table":     9,
	"Charts":    10,
}

func (x NodeFuncReturnType) String() string {
	return proto.EnumName(NodeFuncReturnType_name, int32(x))
}

func (NodeFuncReturnType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{3}
}

type NodeReportType int32

const (
	NodeReportType_NodeReportTypeUnknown NodeReportType = 0
	NodeReportType_NodeReportTypeTable   NodeReportType = 1
	NodeReportType_NodeReportTypeLine    NodeReportType = 2
)

var NodeReportType_name = map[int32]string{
	0: "NodeReportTypeUnknown",
	1: "NodeReportTypeTable",
	2: "NodeReportTypeLine",
}

var NodeReportType_value = map[string]int32{
	"NodeReportTypeUnknown": 0,
	"NodeReportTypeTable":   1,
	"NodeReportTypeLine":    2,
}

func (x NodeReportType) String() string {
	return proto.EnumName(NodeReportType_name, int32(x))
}

func (NodeReportType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{4}
}

type NotifySenderType int32

const (
	NotifySenderType_NotifySenderTypeUnknow NotifySenderType = 0
	NotifySenderType_NotifySenderTypeUser   NotifySenderType = 1
	NotifySenderType_NotifySenderTypeNode   NotifySenderType = 2
)

var NotifySenderType_name = map[int32]string{
	0: "NotifySenderTypeUnknow",
	1: "NotifySenderTypeUser",
	2: "NotifySenderTypeNode",
}

var NotifySenderType_value = map[string]int32{
	"NotifySenderTypeUnknow": 0,
	"NotifySenderTypeUser":   1,
	"NotifySenderTypeNode":   2,
}

func (x NotifySenderType) String() string {
	return proto.EnumName(NotifySenderType_name, int32(x))
}

func (NotifySenderType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{5}
}

type NodeResourceType int32

const (
	NodeResourceType_NodeResourceTypeUnknow NodeResourceType = 0
	NodeResourceType_NodeResourceTypeCache  NodeResourceType = 1
)

var NodeResourceType_name = map[int32]string{
	0: "NodeResourceTypeUnknow",
	1: "NodeResourceTypeCache",
}

var NodeResourceType_value = map[string]int32{
	"NodeResourceTypeUnknow": 0,
	"NodeResourceTypeCache":  1,
}

func (x NodeResourceType) String() string {
	return proto.EnumName(NodeResourceType_name, int32(x))
}

func (NodeResourceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{6}
}

type HttpError int32

const (
	HttpError_HttpErrorNull             HttpError = 0
	HttpError_HttpErrorMarshal          HttpError = 601
	HttpError_HttpErrorUnmarshal        HttpError = 602
	HttpError_HttpErrorRegister         HttpError = 603
	HttpError_HttpErrorLoginWithAccount HttpError = 604
	HttpError_HttpErrorLoginWithToken   HttpError = 605
	HttpError_HttpErrorRequest          HttpError = 606
)

var HttpError_name = map[int32]string{
	0:   "HttpErrorNull",
	601: "HttpErrorMarshal",
	602: "HttpErrorUnmarshal",
	603: "HttpErrorRegister",
	604: "HttpErrorLoginWithAccount",
	605: "HttpErrorLoginWithToken",
	606: "HttpErrorRequest",
}

var HttpError_value = map[string]int32{
	"HttpErrorNull":             0,
	"HttpErrorMarshal":          601,
	"HttpErrorUnmarshal":        602,
	"HttpErrorRegister":         603,
	"HttpErrorLoginWithAccount": 604,
	"HttpErrorLoginWithToken":   605,
	"HttpErrorRequest":          606,
}

func (x HttpError) String() string {
	return proto.EnumName(HttpError_name, int32(x))
}

func (HttpError) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{7}
}

//*******************消息包*****************
type Message struct {
	Order                Order    `protobuf:"varint,1,opt,name=order,proto3,enum=protoManage.Order" json:"order,omitempty"`
	Message              []byte   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{0}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetOrder() Order {
	if m != nil {
		return m.Order
	}
	return Order_Unknow
}

func (m *Message) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

type HttpMessage struct {
	Order                Order    `protobuf:"varint,1,opt,name=order,proto3,enum=protoManage.Order" json:"order,omitempty"`
	Message              []byte   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Token                string   `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HttpMessage) Reset()         { *m = HttpMessage{} }
func (m *HttpMessage) String() string { return proto.CompactTextString(m) }
func (*HttpMessage) ProtoMessage()    {}
func (*HttpMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{1}
}
func (m *HttpMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HttpMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HttpMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HttpMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpMessage.Merge(m, src)
}
func (m *HttpMessage) XXX_Size() int {
	return m.Size()
}
func (m *HttpMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpMessage.DiscardUnknown(m)
}

var xxx_messageInfo_HttpMessage proto.InternalMessageInfo

func (m *HttpMessage) GetOrder() Order {
	if m != nil {
		return m.Order
	}
	return Order_Unknow
}

func (m *HttpMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *HttpMessage) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

//基础数据
type Base struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	UpdateTime           int64    `protobuf:"varint,2,opt,name=UpdateTime,proto3" json:"UpdateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Base) Reset()         { *m = Base{} }
func (m *Base) String() string { return proto.CompactTextString(m) }
func (*Base) ProtoMessage()    {}
func (*Base) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{2}
}
func (m *Base) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Base) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Base.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Base) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Base.Merge(m, src)
}
func (m *Base) XXX_Size() int {
	return m.Size()
}
func (m *Base) XXX_DiscardUnknown() {
	xxx_messageInfo_Base.DiscardUnknown(m)
}

var xxx_messageInfo_Base proto.InternalMessageInfo

func (m *Base) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Base) GetUpdateTime() int64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

//分页
type Page struct {
	Count                int64    `protobuf:"varint,1,opt,name=Count,proto3" json:"Count,omitempty"`
	Num                  int64    `protobuf:"varint,2,opt,name=Num,proto3" json:"Num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Page) Reset()         { *m = Page{} }
func (m *Page) String() string { return proto.CompactTextString(m) }
func (*Page) ProtoMessage()    {}
func (*Page) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{3}
}
func (m *Page) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Page) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Page.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Page) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Page.Merge(m, src)
}
func (m *Page) XXX_Size() int {
	return m.Size()
}
func (m *Page) XXX_DiscardUnknown() {
	xxx_messageInfo_Page.DiscardUnknown(m)
}

var xxx_messageInfo_Page proto.InternalMessageInfo

func (m *Page) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Page) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

//时间
type Time struct {
	BeginTime            int64    `protobuf:"varint,1,opt,name=BeginTime,proto3" json:"BeginTime,omitempty"`
	EndTime              int64    `protobuf:"varint,2,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Time) Reset()         { *m = Time{} }
func (m *Time) String() string { return proto.CompactTextString(m) }
func (*Time) ProtoMessage()    {}
func (*Time) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{4}
}
func (m *Time) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Time) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Time.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Time) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Time.Merge(m, src)
}
func (m *Time) XXX_Size() int {
	return m.Size()
}
func (m *Time) XXX_DiscardUnknown() {
	xxx_messageInfo_Time.DiscardUnknown(m)
}

var xxx_messageInfo_Time proto.InternalMessageInfo

func (m *Time) GetBeginTime() int64 {
	if m != nil {
		return m.BeginTime
	}
	return 0
}

func (m *Time) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

//管理员
type Manager struct {
	Base                 Base     `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base"`
	Name                 string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Password             string   `protobuf:"bytes,3,opt,name=Password,proto3" json:"Password,omitempty"`
	NickName             string   `protobuf:"bytes,4,opt,name=NickName,proto3" json:"NickName,omitempty"`
	Token                string   `protobuf:"bytes,5,opt,name=Token,proto3" json:"Token,omitempty"`
	Setting              string   `protobuf:"bytes,6,opt,name=Setting,proto3" json:"Setting,omitempty"`
	Level                Level    `protobuf:"varint,7,opt,name=Level,proto3,enum=protoManage.Level" json:"Level,omitempty"`
	State                State    `protobuf:"varint,8,opt,name=State,proto3,enum=protoManage.State" json:"State,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Manager) Reset()         { *m = Manager{} }
func (m *Manager) String() string { return proto.CompactTextString(m) }
func (*Manager) ProtoMessage()    {}
func (*Manager) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{5}
}
func (m *Manager) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Manager) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Manager.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Manager) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Manager.Merge(m, src)
}
func (m *Manager) XXX_Size() int {
	return m.Size()
}
func (m *Manager) XXX_DiscardUnknown() {
	xxx_messageInfo_Manager.DiscardUnknown(m)
}

var xxx_messageInfo_Manager proto.InternalMessageInfo

func (m *Manager) GetBase() Base {
	if m != nil {
		return m.Base
	}
	return Base{}
}

func (m *Manager) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Manager) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *Manager) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *Manager) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Manager) GetSetting() string {
	if m != nil {
		return m.Setting
	}
	return ""
}

func (m *Manager) GetLevel() Level {
	if m != nil {
		return m.Level
	}
	return Level_LevelNot
}

func (m *Manager) GetState() State {
	if m != nil {
		return m.State
	}
	return State_StateNot
}

//链接
type TopLink struct {
	Base                 Base     `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base"`
	Name                 string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Url                  string   `protobuf:"bytes,3,opt,name=Url,proto3" json:"Url,omitempty"`
	State                State    `protobuf:"varint,4,opt,name=State,proto3,enum=protoManage.State" json:"State,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TopLink) Reset()         { *m = TopLink{} }
func (m *TopLink) String() string { return proto.CompactTextString(m) }
func (*TopLink) ProtoMessage()    {}
func (*TopLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{6}
}
func (m *TopLink) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopLink.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopLink.Merge(m, src)
}
func (m *TopLink) XXX_Size() int {
	return m.Size()
}
func (m *TopLink) XXX_DiscardUnknown() {
	xxx_messageInfo_TopLink.DiscardUnknown(m)
}

var xxx_messageInfo_TopLink proto.InternalMessageInfo

func (m *TopLink) GetBase() Base {
	if m != nil {
		return m.Base
	}
	return Base{}
}

func (m *TopLink) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TopLink) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *TopLink) GetState() State {
	if m != nil {
		return m.State
	}
	return State_StateNot
}

//节点
type Node struct {
	Base                 Base     `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base"`
	Name                 string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	State                State    `protobuf:"varint,3,opt,name=State,proto3,enum=protoManage.State" json:"State,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{7}
}
func (m *Node) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Node.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return m.Size()
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetBase() Base {
	if m != nil {
		return m.Base
	}
	return Base{}
}

func (m *Node) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Node) GetState() State {
	if m != nil {
		return m.State
	}
	return State_StateNot
}

//节点方法
type NodeFunc struct {
	Base                 Base     `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base"`
	NodeID               int64    `protobuf:"varint,2,opt,name=NodeID,proto3" json:"NodeID,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Func                 string   `protobuf:"bytes,4,opt,name=Func,proto3" json:"Func,omitempty"`
	Schema               string   `protobuf:"bytes,5,opt,name=Schema,proto3" json:"Schema,omitempty"`
	Level                Level    `protobuf:"varint,6,opt,name=Level,proto3,enum=protoManage.Level" json:"Level,omitempty"`
	State                State    `protobuf:"varint,7,opt,name=State,proto3,enum=protoManage.State" json:"State,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeFunc) Reset()         { *m = NodeFunc{} }
func (m *NodeFunc) String() string { return proto.CompactTextString(m) }
func (*NodeFunc) ProtoMessage()    {}
func (*NodeFunc) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{8}
}
func (m *NodeFunc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeFunc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeFunc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeFunc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeFunc.Merge(m, src)
}
func (m *NodeFunc) XXX_Size() int {
	return m.Size()
}
func (m *NodeFunc) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeFunc.DiscardUnknown(m)
}

var xxx_messageInfo_NodeFunc proto.InternalMessageInfo

func (m *NodeFunc) GetBase() Base {
	if m != nil {
		return m.Base
	}
	return Base{}
}

func (m *NodeFunc) GetNodeID() int64 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *NodeFunc) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NodeFunc) GetFunc() string {
	if m != nil {
		return m.Func
	}
	return ""
}

func (m *NodeFunc) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

func (m *NodeFunc) GetLevel() Level {
	if m != nil {
		return m.Level
	}
	return Level_LevelNot
}

func (m *NodeFunc) GetState() State {
	if m != nil {
		return m.State
	}
	return State_StateNot
}

//节点方法调用
type NodeFuncCall struct {
	Base                 Base               `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base"`
	ManagerID            int64              `protobuf:"varint,2,opt,name=ManagerID,proto3" json:"ManagerID,omitempty"`
	FuncID               int64              `protobuf:"varint,3,opt,name=FuncID,proto3" json:"FuncID,omitempty"`
	Parameter            string             `protobuf:"bytes,4,opt,name=Parameter,proto3" json:"Parameter,omitempty"`
	ReturnVal            string             `protobuf:"bytes,5,opt,name=ReturnVal,proto3" json:"ReturnVal,omitempty"`
	ReturnType           NodeFuncReturnType `protobuf:"varint,6,opt,name=ReturnType,proto3,enum=protoManage.NodeFuncReturnType" json:"ReturnType,omitempty"`
	State                State              `protobuf:"varint,7,opt,name=State,proto3,enum=protoManage.State" json:"State,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *NodeFuncCall) Reset()         { *m = NodeFuncCall{} }
func (m *NodeFuncCall) String() string { return proto.CompactTextString(m) }
func (*NodeFuncCall) ProtoMessage()    {}
func (*NodeFuncCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{9}
}
func (m *NodeFuncCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeFuncCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeFuncCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeFuncCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeFuncCall.Merge(m, src)
}
func (m *NodeFuncCall) XXX_Size() int {
	return m.Size()
}
func (m *NodeFuncCall) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeFuncCall.DiscardUnknown(m)
}

var xxx_messageInfo_NodeFuncCall proto.InternalMessageInfo

func (m *NodeFuncCall) GetBase() Base {
	if m != nil {
		return m.Base
	}
	return Base{}
}

func (m *NodeFuncCall) GetManagerID() int64 {
	if m != nil {
		return m.ManagerID
	}
	return 0
}

func (m *NodeFuncCall) GetFuncID() int64 {
	if m != nil {
		return m.FuncID
	}
	return 0
}

func (m *NodeFuncCall) GetParameter() string {
	if m != nil {
		return m.Parameter
	}
	return ""
}

func (m *NodeFuncCall) GetReturnVal() string {
	if m != nil {
		return m.ReturnVal
	}
	return ""
}

func (m *NodeFuncCall) GetReturnType() NodeFuncReturnType {
	if m != nil {
		return m.ReturnType
	}
	return NodeFuncReturnType_Unknown
}

func (m *NodeFuncCall) GetState() State {
	if m != nil {
		return m.State
	}
	return State_StateNot
}

//节点报告
type NodeReport struct {
	Base                 Base           `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base"`
	NodeID               int64          `protobuf:"varint,2,opt,name=NodeID,proto3" json:"NodeID,omitempty"`
	Name                 string         `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Type                 NodeReportType `protobuf:"varint,4,opt,name=Type,proto3,enum=protoManage.NodeReportType" json:"Type,omitempty"`
	Func                 string         `protobuf:"bytes,5,opt,name=Func,proto3" json:"Func,omitempty"`
	Schema               string         `protobuf:"bytes,6,opt,name=Schema,proto3" json:"Schema,omitempty"`
	Interval             int64          `protobuf:"varint,7,opt,name=Interval,proto3" json:"Interval,omitempty"`
	Level                Level          `protobuf:"varint,8,opt,name=Level,proto3,enum=protoManage.Level" json:"Level,omitempty"`
	State                State          `protobuf:"varint,9,opt,name=State,proto3,enum=protoManage.State" json:"State,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *NodeReport) Reset()         { *m = NodeReport{} }
func (m *NodeReport) String() string { return proto.CompactTextString(m) }
func (*NodeReport) ProtoMessage()    {}
func (*NodeReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{10}
}
func (m *NodeReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeReport.Merge(m, src)
}
func (m *NodeReport) XXX_Size() int {
	return m.Size()
}
func (m *NodeReport) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeReport.DiscardUnknown(m)
}

var xxx_messageInfo_NodeReport proto.InternalMessageInfo

func (m *NodeReport) GetBase() Base {
	if m != nil {
		return m.Base
	}
	return Base{}
}

func (m *NodeReport) GetNodeID() int64 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *NodeReport) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NodeReport) GetType() NodeReportType {
	if m != nil {
		return m.Type
	}
	return NodeReportType_NodeReportTypeUnknown
}

func (m *NodeReport) GetFunc() string {
	if m != nil {
		return m.Func
	}
	return ""
}

func (m *NodeReport) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

func (m *NodeReport) GetInterval() int64 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *NodeReport) GetLevel() Level {
	if m != nil {
		return m.Level
	}
	return Level_LevelNot
}

func (m *NodeReport) GetState() State {
	if m != nil {
		return m.State
	}
	return State_StateNot
}

//节点报告值
type NodeReportVal struct {
	Base                 Base     `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base"`
	ReportID             int64    `protobuf:"varint,2,opt,name=ReportID,proto3" json:"ReportID,omitempty"`
	Value                string   `protobuf:"bytes,3,opt,name=Value,proto3" json:"Value,omitempty"`
	State                State    `protobuf:"varint,4,opt,name=State,proto3,enum=protoManage.State" json:"State,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeReportVal) Reset()         { *m = NodeReportVal{} }
func (m *NodeReportVal) String() string { return proto.CompactTextString(m) }
func (*NodeReportVal) ProtoMessage()    {}
func (*NodeReportVal) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{11}
}
func (m *NodeReportVal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeReportVal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeReportVal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeReportVal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeReportVal.Merge(m, src)
}
func (m *NodeReportVal) XXX_Size() int {
	return m.Size()
}
func (m *NodeReportVal) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeReportVal.DiscardUnknown(m)
}

var xxx_messageInfo_NodeReportVal proto.InternalMessageInfo

func (m *NodeReportVal) GetBase() Base {
	if m != nil {
		return m.Base
	}
	return Base{}
}

func (m *NodeReportVal) GetReportID() int64 {
	if m != nil {
		return m.ReportID
	}
	return 0
}

func (m *NodeReportVal) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *NodeReportVal) GetState() State {
	if m != nil {
		return m.State
	}
	return State_StateNot
}

//节点通知
type NodeNotify struct {
	Base                 Base             `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base"`
	SenderID             int64            `protobuf:"varint,2,opt,name=SenderID,proto3" json:"SenderID,omitempty"`
	SenderType           NotifySenderType `protobuf:"varint,3,opt,name=SenderType,proto3,enum=protoManage.NotifySenderType" json:"SenderType,omitempty"`
	Message              string           `protobuf:"bytes,4,opt,name=Message,proto3" json:"Message,omitempty"`
	State                State            `protobuf:"varint,5,opt,name=State,proto3,enum=protoManage.State" json:"State,omitempty"`
	ShowPop              bool             `protobuf:"varint,6,opt,name=showPop,proto3" json:"showPop,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *NodeNotify) Reset()         { *m = NodeNotify{} }
func (m *NodeNotify) String() string { return proto.CompactTextString(m) }
func (*NodeNotify) ProtoMessage()    {}
func (*NodeNotify) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{12}
}
func (m *NodeNotify) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeNotify) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeNotify.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeNotify) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeNotify.Merge(m, src)
}
func (m *NodeNotify) XXX_Size() int {
	return m.Size()
}
func (m *NodeNotify) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeNotify.DiscardUnknown(m)
}

var xxx_messageInfo_NodeNotify proto.InternalMessageInfo

func (m *NodeNotify) GetBase() Base {
	if m != nil {
		return m.Base
	}
	return Base{}
}

func (m *NodeNotify) GetSenderID() int64 {
	if m != nil {
		return m.SenderID
	}
	return 0
}

func (m *NodeNotify) GetSenderType() NotifySenderType {
	if m != nil {
		return m.SenderType
	}
	return NotifySenderType_NotifySenderTypeUnknow
}

func (m *NodeNotify) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *NodeNotify) GetState() State {
	if m != nil {
		return m.State
	}
	return State_StateNot
}

func (m *NodeNotify) GetShowPop() bool {
	if m != nil {
		return m.ShowPop
	}
	return false
}

//节点缓存资源
type NodeResource struct {
	UUID                 string           `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Name                 string           `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Md5                  string           `protobuf:"bytes,3,opt,name=Md5,proto3" json:"Md5,omitempty"`
	Sizes                int64            `protobuf:"varint,4,opt,name=Sizes,proto3" json:"Sizes,omitempty"`
	Type                 NodeResourceType `protobuf:"varint,5,opt,name=Type,proto3,enum=protoManage.NodeResourceType" json:"Type,omitempty"`
	IsExist              bool             `protobuf:"varint,6,opt,name=IsExist,proto3" json:"IsExist,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *NodeResource) Reset()         { *m = NodeResource{} }
func (m *NodeResource) String() string { return proto.CompactTextString(m) }
func (*NodeResource) ProtoMessage()    {}
func (*NodeResource) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{13}
}
func (m *NodeResource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeResource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeResource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeResource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeResource.Merge(m, src)
}
func (m *NodeResource) XXX_Size() int {
	return m.Size()
}
func (m *NodeResource) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeResource.DiscardUnknown(m)
}

var xxx_messageInfo_NodeResource proto.InternalMessageInfo

func (m *NodeResource) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *NodeResource) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NodeResource) GetMd5() string {
	if m != nil {
		return m.Md5
	}
	return ""
}

func (m *NodeResource) GetSizes() int64 {
	if m != nil {
		return m.Sizes
	}
	return 0
}

func (m *NodeResource) GetType() NodeResourceType {
	if m != nil {
		return m.Type
	}
	return NodeResourceType_NodeResourceTypeUnknow
}

func (m *NodeResource) GetIsExist() bool {
	if m != nil {
		return m.IsExist
	}
	return false
}

//请求节点登录
type ReqNodeLogin struct {
	Node                 Node     `protobuf:"bytes,1,opt,name=Node,proto3" json:"Node"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqNodeLogin) Reset()         { *m = ReqNodeLogin{} }
func (m *ReqNodeLogin) String() string { return proto.CompactTextString(m) }
func (*ReqNodeLogin) ProtoMessage()    {}
func (*ReqNodeLogin) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{14}
}
func (m *ReqNodeLogin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqNodeLogin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqNodeLogin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqNodeLogin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqNodeLogin.Merge(m, src)
}
func (m *ReqNodeLogin) XXX_Size() int {
	return m.Size()
}
func (m *ReqNodeLogin) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqNodeLogin.DiscardUnknown(m)
}

var xxx_messageInfo_ReqNodeLogin proto.InternalMessageInfo

func (m *ReqNodeLogin) GetNode() Node {
	if m != nil {
		return m.Node
	}
	return Node{}
}

//请求节点上线
type ReqNodeOnline struct {
	Node                 Node     `protobuf:"bytes,1,opt,name=Node,proto3" json:"Node"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqNodeOnline) Reset()         { *m = ReqNodeOnline{} }
func (m *ReqNodeOnline) String() string { return proto.CompactTextString(m) }
func (*ReqNodeOnline) ProtoMessage()    {}
func (*ReqNodeOnline) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{15}
}
func (m *ReqNodeOnline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqNodeOnline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqNodeOnline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqNodeOnline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqNodeOnline.Merge(m, src)
}
func (m *ReqNodeOnline) XXX_Size() int {
	return m.Size()
}
func (m *ReqNodeOnline) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqNodeOnline.DiscardUnknown(m)
}

var xxx_messageInfo_ReqNodeOnline proto.InternalMessageInfo

func (m *ReqNodeOnline) GetNode() Node {
	if m != nil {
		return m.Node
	}
	return Node{}
}

//获取顶部链接列表
type ReqTopLinkList struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqTopLinkList) Reset()         { *m = ReqTopLinkList{} }
func (m *ReqTopLinkList) String() string { return proto.CompactTextString(m) }
func (*ReqTopLinkList) ProtoMessage()    {}
func (*ReqTopLinkList) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{16}
}
func (m *ReqTopLinkList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqTopLinkList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqTopLinkList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqTopLinkList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqTopLinkList.Merge(m, src)
}
func (m *ReqTopLinkList) XXX_Size() int {
	return m.Size()
}
func (m *ReqTopLinkList) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqTopLinkList.DiscardUnknown(m)
}

var xxx_messageInfo_ReqTopLinkList proto.InternalMessageInfo

type AnsTopLinkList struct {
	TopLinkList          []TopLink `protobuf:"bytes,1,rep,name=TopLinkList,proto3" json:"TopLinkList"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *AnsTopLinkList) Reset()         { *m = AnsTopLinkList{} }
func (m *AnsTopLinkList) String() string { return proto.CompactTextString(m) }
func (*AnsTopLinkList) ProtoMessage()    {}
func (*AnsTopLinkList) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{17}
}
func (m *AnsTopLinkList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnsTopLinkList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnsTopLinkList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnsTopLinkList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnsTopLinkList.Merge(m, src)
}
func (m *AnsTopLinkList) XXX_Size() int {
	return m.Size()
}
func (m *AnsTopLinkList) XXX_DiscardUnknown() {
	xxx_messageInfo_AnsTopLinkList.DiscardUnknown(m)
}

var xxx_messageInfo_AnsTopLinkList proto.InternalMessageInfo

func (m *AnsTopLinkList) GetTopLinkList() []TopLink {
	if m != nil {
		return m.TopLinkList
	}
	return nil
}

//获取管理员列表
type ReqManagerList struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqManagerList) Reset()         { *m = ReqManagerList{} }
func (m *ReqManagerList) String() string { return proto.CompactTextString(m) }
func (*ReqManagerList) ProtoMessage()    {}
func (*ReqManagerList) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{18}
}
func (m *ReqManagerList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqManagerList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqManagerList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqManagerList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqManagerList.Merge(m, src)
}
func (m *ReqManagerList) XXX_Size() int {
	return m.Size()
}
func (m *ReqManagerList) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqManagerList.DiscardUnknown(m)
}

var xxx_messageInfo_ReqManagerList proto.InternalMessageInfo

type AnsManagerList struct {
	ManagerList          []Manager `protobuf:"bytes,1,rep,name=ManagerList,proto3" json:"ManagerList"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *AnsManagerList) Reset()         { *m = AnsManagerList{} }
func (m *AnsManagerList) String() string { return proto.CompactTextString(m) }
func (*AnsManagerList) ProtoMessage()    {}
func (*AnsManagerList) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{19}
}
func (m *AnsManagerList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnsManagerList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnsManagerList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnsManagerList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnsManagerList.Merge(m, src)
}
func (m *AnsManagerList) XXX_Size() int {
	return m.Size()
}
func (m *AnsManagerList) XXX_DiscardUnknown() {
	xxx_messageInfo_AnsManagerList.DiscardUnknown(m)
}

var xxx_messageInfo_AnsManagerList proto.InternalMessageInfo

func (m *AnsManagerList) GetManagerList() []Manager {
	if m != nil {
		return m.ManagerList
	}
	return nil
}

//获取节点列表
type ReqNodeList struct {
	ID                   []int64  `protobuf:"varint,1,rep,packed,name=ID,proto3" json:"ID,omitempty"`
	Name                 []string `protobuf:"bytes,2,rep,name=Name,proto3" json:"Name,omitempty"`
	State                []State  `protobuf:"varint,3,rep,packed,name=State,proto3,enum=protoManage.State" json:"State,omitempty"`
	UpdateTime           []Time   `protobuf:"bytes,4,rep,name=UpdateTime,proto3" json:"UpdateTime"`
	Page                 Page     `protobuf:"bytes,5,opt,name=Page,proto3" json:"Page"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqNodeList) Reset()         { *m = ReqNodeList{} }
func (m *ReqNodeList) String() string { return proto.CompactTextString(m) }
func (*ReqNodeList) ProtoMessage()    {}
func (*ReqNodeList) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{20}
}
func (m *ReqNodeList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqNodeList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqNodeList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqNodeList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqNodeList.Merge(m, src)
}
func (m *ReqNodeList) XXX_Size() int {
	return m.Size()
}
func (m *ReqNodeList) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqNodeList.DiscardUnknown(m)
}

var xxx_messageInfo_ReqNodeList proto.InternalMessageInfo

func (m *ReqNodeList) GetID() []int64 {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *ReqNodeList) GetName() []string {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *ReqNodeList) GetState() []State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *ReqNodeList) GetUpdateTime() []Time {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

func (m *ReqNodeList) GetPage() Page {
	if m != nil {
		return m.Page
	}
	return Page{}
}

type AnsNodeList struct {
	Length               int64    `protobuf:"varint,1,opt,name=Length,proto3" json:"Length,omitempty"`
	NodeList             []Node   `protobuf:"bytes,2,rep,name=NodeList,proto3" json:"NodeList"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnsNodeList) Reset()         { *m = AnsNodeList{} }
func (m *AnsNodeList) String() string { return proto.CompactTextString(m) }
func (*AnsNodeList) ProtoMessage()    {}
func (*AnsNodeList) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{21}
}
func (m *AnsNodeList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnsNodeList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnsNodeList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnsNodeList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnsNodeList.Merge(m, src)
}
func (m *AnsNodeList) XXX_Size() int {
	return m.Size()
}
func (m *AnsNodeList) XXX_DiscardUnknown() {
	xxx_messageInfo_AnsNodeList.DiscardUnknown(m)
}

var xxx_messageInfo_AnsNodeList proto.InternalMessageInfo

func (m *AnsNodeList) GetLength() int64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *AnsNodeList) GetNodeList() []Node {
	if m != nil {
		return m.NodeList
	}
	return nil
}

//获取节点方法列表
type ReqNodeFuncList struct {
	ID                   []int64  `protobuf:"varint,1,rep,packed,name=ID,proto3" json:"ID,omitempty"`
	Name                 []string `protobuf:"bytes,2,rep,name=Name,proto3" json:"Name,omitempty"`
	Level                []Level  `protobuf:"varint,3,rep,packed,name=Level,proto3,enum=protoManage.Level" json:"Level,omitempty"`
	LevelMax             Level    `protobuf:"varint,4,opt,name=LevelMax,proto3,enum=protoManage.Level" json:"LevelMax,omitempty"`
	NodeID               []int64  `protobuf:"varint,5,rep,packed,name=NodeID,proto3" json:"NodeID,omitempty"`
	NodeName             []string `protobuf:"bytes,6,rep,name=NodeName,proto3" json:"NodeName,omitempty"`
	UpdateTime           []Time   `protobuf:"bytes,7,rep,name=UpdateTime,proto3" json:"UpdateTime"`
	Page                 Page     `protobuf:"bytes,8,opt,name=Page,proto3" json:"Page"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqNodeFuncList) Reset()         { *m = ReqNodeFuncList{} }
func (m *ReqNodeFuncList) String() string { return proto.CompactTextString(m) }
func (*ReqNodeFuncList) ProtoMessage()    {}
func (*ReqNodeFuncList) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{22}
}
func (m *ReqNodeFuncList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqNodeFuncList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqNodeFuncList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqNodeFuncList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqNodeFuncList.Merge(m, src)
}
func (m *ReqNodeFuncList) XXX_Size() int {
	return m.Size()
}
func (m *ReqNodeFuncList) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqNodeFuncList.DiscardUnknown(m)
}

var xxx_messageInfo_ReqNodeFuncList proto.InternalMessageInfo

func (m *ReqNodeFuncList) GetID() []int64 {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *ReqNodeFuncList) GetName() []string {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *ReqNodeFuncList) GetLevel() []Level {
	if m != nil {
		return m.Level
	}
	return nil
}

func (m *ReqNodeFuncList) GetLevelMax() Level {
	if m != nil {
		return m.LevelMax
	}
	return Level_LevelNot
}

func (m *ReqNodeFuncList) GetNodeID() []int64 {
	if m != nil {
		return m.NodeID
	}
	return nil
}

func (m *ReqNodeFuncList) GetNodeName() []string {
	if m != nil {
		return m.NodeName
	}
	return nil
}

func (m *ReqNodeFuncList) GetUpdateTime() []Time {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

func (m *ReqNodeFuncList) GetPage() Page {
	if m != nil {
		return m.Page
	}
	return Page{}
}

type AnsNodeFuncList struct {
	Length               int64      `protobuf:"varint,1,opt,name=Length,proto3" json:"Length,omitempty"`
	NodeFuncList         []NodeFunc `protobuf:"bytes,2,rep,name=NodeFuncList,proto3" json:"NodeFuncList"`
	NodeList             []Node     `protobuf:"bytes,3,rep,name=NodeList,proto3" json:"NodeList"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *AnsNodeFuncList) Reset()         { *m = AnsNodeFuncList{} }
func (m *AnsNodeFuncList) String() string { return proto.CompactTextString(m) }
func (*AnsNodeFuncList) ProtoMessage()    {}
func (*AnsNodeFuncList) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{23}
}
func (m *AnsNodeFuncList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnsNodeFuncList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnsNodeFuncList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnsNodeFuncList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnsNodeFuncList.Merge(m, src)
}
func (m *AnsNodeFuncList) XXX_Size() int {
	return m.Size()
}
func (m *AnsNodeFuncList) XXX_DiscardUnknown() {
	xxx_messageInfo_AnsNodeFuncList.DiscardUnknown(m)
}

var xxx_messageInfo_AnsNodeFuncList proto.InternalMessageInfo

func (m *AnsNodeFuncList) GetLength() int64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *AnsNodeFuncList) GetNodeFuncList() []NodeFunc {
	if m != nil {
		return m.NodeFuncList
	}
	return nil
}

func (m *AnsNodeFuncList) GetNodeList() []Node {
	if m != nil {
		return m.NodeList
	}
	return nil
}

//获取节点报告列表
type ReqNodeReportList struct {
	ID                   []int64  `protobuf:"varint,1,rep,packed,name=ID,proto3" json:"ID,omitempty"`
	Name                 []string `protobuf:"bytes,2,rep,name=Name,proto3" json:"Name,omitempty"`
	Level                []Level  `protobuf:"varint,3,rep,packed,name=Level,proto3,enum=protoManage.Level" json:"Level,omitempty"`
	LevelMax             Level    `protobuf:"varint,4,opt,name=LevelMax,proto3,enum=protoManage.Level" json:"LevelMax,omitempty"`
	NodeID               []int64  `protobuf:"varint,5,rep,packed,name=NodeID,proto3" json:"NodeID,omitempty"`
	NodeName             []string `protobuf:"bytes,6,rep,name=NodeName,proto3" json:"NodeName,omitempty"`
	UpdateTime           []Time   `protobuf:"bytes,7,rep,name=UpdateTime,proto3" json:"UpdateTime"`
	Page                 Page     `protobuf:"bytes,8,opt,name=Page,proto3" json:"Page"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqNodeReportList) Reset()         { *m = ReqNodeReportList{} }
func (m *ReqNodeReportList) String() string { return proto.CompactTextString(m) }
func (*ReqNodeReportList) ProtoMessage()    {}
func (*ReqNodeReportList) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{24}
}
func (m *ReqNodeReportList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqNodeReportList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqNodeReportList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqNodeReportList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqNodeReportList.Merge(m, src)
}
func (m *ReqNodeReportList) XXX_Size() int {
	return m.Size()
}
func (m *ReqNodeReportList) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqNodeReportList.DiscardUnknown(m)
}

var xxx_messageInfo_ReqNodeReportList proto.InternalMessageInfo

func (m *ReqNodeReportList) GetID() []int64 {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *ReqNodeReportList) GetName() []string {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *ReqNodeReportList) GetLevel() []Level {
	if m != nil {
		return m.Level
	}
	return nil
}

func (m *ReqNodeReportList) GetLevelMax() Level {
	if m != nil {
		return m.LevelMax
	}
	return Level_LevelNot
}

func (m *ReqNodeReportList) GetNodeID() []int64 {
	if m != nil {
		return m.NodeID
	}
	return nil
}

func (m *ReqNodeReportList) GetNodeName() []string {
	if m != nil {
		return m.NodeName
	}
	return nil
}

func (m *ReqNodeReportList) GetUpdateTime() []Time {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

func (m *ReqNodeReportList) GetPage() Page {
	if m != nil {
		return m.Page
	}
	return Page{}
}

type AnsNodeReportList struct {
	Length               int64        `protobuf:"varint,1,opt,name=Length,proto3" json:"Length,omitempty"`
	NodeReportList       []NodeReport `protobuf:"bytes,2,rep,name=NodeReportList,proto3" json:"NodeReportList"`
	NodeList             []Node       `protobuf:"bytes,3,rep,name=NodeList,proto3" json:"NodeList"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *AnsNodeReportList) Reset()         { *m = AnsNodeReportList{} }
func (m *AnsNodeReportList) String() string { return proto.CompactTextString(m) }
func (*AnsNodeReportList) ProtoMessage()    {}
func (*AnsNodeReportList) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{25}
}
func (m *AnsNodeReportList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnsNodeReportList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnsNodeReportList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnsNodeReportList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnsNodeReportList.Merge(m, src)
}
func (m *AnsNodeReportList) XXX_Size() int {
	return m.Size()
}
func (m *AnsNodeReportList) XXX_DiscardUnknown() {
	xxx_messageInfo_AnsNodeReportList.DiscardUnknown(m)
}

var xxx_messageInfo_AnsNodeReportList proto.InternalMessageInfo

func (m *AnsNodeReportList) GetLength() int64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *AnsNodeReportList) GetNodeReportList() []NodeReport {
	if m != nil {
		return m.NodeReportList
	}
	return nil
}

func (m *AnsNodeReportList) GetNodeList() []Node {
	if m != nil {
		return m.NodeList
	}
	return nil
}

//请求节点方法调用
type ReqNodeFuncCall struct {
	NodeFuncCall         NodeFuncCall `protobuf:"bytes,1,opt,name=NodeFuncCall,proto3" json:"NodeFuncCall"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ReqNodeFuncCall) Reset()         { *m = ReqNodeFuncCall{} }
func (m *ReqNodeFuncCall) String() string { return proto.CompactTextString(m) }
func (*ReqNodeFuncCall) ProtoMessage()    {}
func (*ReqNodeFuncCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{26}
}
func (m *ReqNodeFuncCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqNodeFuncCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqNodeFuncCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqNodeFuncCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqNodeFuncCall.Merge(m, src)
}
func (m *ReqNodeFuncCall) XXX_Size() int {
	return m.Size()
}
func (m *ReqNodeFuncCall) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqNodeFuncCall.DiscardUnknown(m)
}

var xxx_messageInfo_ReqNodeFuncCall proto.InternalMessageInfo

func (m *ReqNodeFuncCall) GetNodeFuncCall() NodeFuncCall {
	if m != nil {
		return m.NodeFuncCall
	}
	return NodeFuncCall{}
}

type AnsNodeFuncCall struct {
	NodeFuncCall         NodeFuncCall `protobuf:"bytes,1,opt,name=NodeFuncCall,proto3" json:"NodeFuncCall"`
	Error                string       `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *AnsNodeFuncCall) Reset()         { *m = AnsNodeFuncCall{} }
func (m *AnsNodeFuncCall) String() string { return proto.CompactTextString(m) }
func (*AnsNodeFuncCall) ProtoMessage()    {}
func (*AnsNodeFuncCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{27}
}
func (m *AnsNodeFuncCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnsNodeFuncCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnsNodeFuncCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnsNodeFuncCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnsNodeFuncCall.Merge(m, src)
}
func (m *AnsNodeFuncCall) XXX_Size() int {
	return m.Size()
}
func (m *AnsNodeFuncCall) XXX_DiscardUnknown() {
	xxx_messageInfo_AnsNodeFuncCall.DiscardUnknown(m)
}

var xxx_messageInfo_AnsNodeFuncCall proto.InternalMessageInfo

func (m *AnsNodeFuncCall) GetNodeFuncCall() NodeFuncCall {
	if m != nil {
		return m.NodeFuncCall
	}
	return NodeFuncCall{}
}

func (m *AnsNodeFuncCall) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

//获取节点方法调用列表
type ReqNodeFuncCallList struct {
	FuncID               int64    `protobuf:"varint,1,opt,name=FuncID,proto3" json:"FuncID,omitempty"`
	Page                 Page     `protobuf:"bytes,2,opt,name=Page,proto3" json:"Page"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqNodeFuncCallList) Reset()         { *m = ReqNodeFuncCallList{} }
func (m *ReqNodeFuncCallList) String() string { return proto.CompactTextString(m) }
func (*ReqNodeFuncCallList) ProtoMessage()    {}
func (*ReqNodeFuncCallList) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{28}
}
func (m *ReqNodeFuncCallList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqNodeFuncCallList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqNodeFuncCallList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqNodeFuncCallList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqNodeFuncCallList.Merge(m, src)
}
func (m *ReqNodeFuncCallList) XXX_Size() int {
	return m.Size()
}
func (m *ReqNodeFuncCallList) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqNodeFuncCallList.DiscardUnknown(m)
}

var xxx_messageInfo_ReqNodeFuncCallList proto.InternalMessageInfo

func (m *ReqNodeFuncCallList) GetFuncID() int64 {
	if m != nil {
		return m.FuncID
	}
	return 0
}

func (m *ReqNodeFuncCallList) GetPage() Page {
	if m != nil {
		return m.Page
	}
	return Page{}
}

type AnsNodeFuncCallList struct {
	NodeFuncCallList     []NodeFuncCall `protobuf:"bytes,1,rep,name=NodeFuncCallList,proto3" json:"NodeFuncCallList"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *AnsNodeFuncCallList) Reset()         { *m = AnsNodeFuncCallList{} }
func (m *AnsNodeFuncCallList) String() string { return proto.CompactTextString(m) }
func (*AnsNodeFuncCallList) ProtoMessage()    {}
func (*AnsNodeFuncCallList) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{29}
}
func (m *AnsNodeFuncCallList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnsNodeFuncCallList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnsNodeFuncCallList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnsNodeFuncCallList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnsNodeFuncCallList.Merge(m, src)
}
func (m *AnsNodeFuncCallList) XXX_Size() int {
	return m.Size()
}
func (m *AnsNodeFuncCallList) XXX_DiscardUnknown() {
	xxx_messageInfo_AnsNodeFuncCallList.DiscardUnknown(m)
}

var xxx_messageInfo_AnsNodeFuncCallList proto.InternalMessageInfo

func (m *AnsNodeFuncCallList) GetNodeFuncCallList() []NodeFuncCall {
	if m != nil {
		return m.NodeFuncCallList
	}
	return nil
}

//获取节点报告值列表
type ReqNodeReportValList struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ReportID             int64    `protobuf:"varint,2,opt,name=ReportID,proto3" json:"ReportID,omitempty"`
	Page                 Page     `protobuf:"bytes,3,opt,name=Page,proto3" json:"Page"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqNodeReportValList) Reset()         { *m = ReqNodeReportValList{} }
func (m *ReqNodeReportValList) String() string { return proto.CompactTextString(m) }
func (*ReqNodeReportValList) ProtoMessage()    {}
func (*ReqNodeReportValList) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{30}
}
func (m *ReqNodeReportValList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqNodeReportValList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqNodeReportValList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqNodeReportValList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqNodeReportValList.Merge(m, src)
}
func (m *ReqNodeReportValList) XXX_Size() int {
	return m.Size()
}
func (m *ReqNodeReportValList) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqNodeReportValList.DiscardUnknown(m)
}

var xxx_messageInfo_ReqNodeReportValList proto.InternalMessageInfo

func (m *ReqNodeReportValList) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ReqNodeReportValList) GetReportID() int64 {
	if m != nil {
		return m.ReportID
	}
	return 0
}

func (m *ReqNodeReportValList) GetPage() Page {
	if m != nil {
		return m.Page
	}
	return Page{}
}

type AnsNodeReportValList struct {
	NodeReportValList    []NodeReportVal `protobuf:"bytes,1,rep,name=NodeReportValList,proto3" json:"NodeReportValList"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *AnsNodeReportValList) Reset()         { *m = AnsNodeReportValList{} }
func (m *AnsNodeReportValList) String() string { return proto.CompactTextString(m) }
func (*AnsNodeReportValList) ProtoMessage()    {}
func (*AnsNodeReportValList) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{31}
}
func (m *AnsNodeReportValList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnsNodeReportValList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnsNodeReportValList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnsNodeReportValList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnsNodeReportValList.Merge(m, src)
}
func (m *AnsNodeReportValList) XXX_Size() int {
	return m.Size()
}
func (m *AnsNodeReportValList) XXX_DiscardUnknown() {
	xxx_messageInfo_AnsNodeReportValList.DiscardUnknown(m)
}

var xxx_messageInfo_AnsNodeReportValList proto.InternalMessageInfo

func (m *AnsNodeReportValList) GetNodeReportValList() []NodeReportVal {
	if m != nil {
		return m.NodeReportValList
	}
	return nil
}

//获取节点通知列表
type ReqNodeNotifyList struct {
	Message              []string           `protobuf:"bytes,1,rep,name=Message,proto3" json:"Message,omitempty"`
	State                []State            `protobuf:"varint,2,rep,packed,name=State,proto3,enum=protoManage.State" json:"State,omitempty"`
	SenderName           []string           `protobuf:"bytes,3,rep,name=SenderName,proto3" json:"SenderName,omitempty"`
	SenderType           []NotifySenderType `protobuf:"varint,4,rep,packed,name=SenderType,proto3,enum=protoManage.NotifySenderType" json:"SenderType,omitempty"`
	SenderTime           []Time             `protobuf:"bytes,5,rep,name=SenderTime,proto3" json:"SenderTime"`
	Page                 Page               `protobuf:"bytes,6,opt,name=Page,proto3" json:"Page"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ReqNodeNotifyList) Reset()         { *m = ReqNodeNotifyList{} }
func (m *ReqNodeNotifyList) String() string { return proto.CompactTextString(m) }
func (*ReqNodeNotifyList) ProtoMessage()    {}
func (*ReqNodeNotifyList) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{32}
}
func (m *ReqNodeNotifyList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqNodeNotifyList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqNodeNotifyList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqNodeNotifyList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqNodeNotifyList.Merge(m, src)
}
func (m *ReqNodeNotifyList) XXX_Size() int {
	return m.Size()
}
func (m *ReqNodeNotifyList) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqNodeNotifyList.DiscardUnknown(m)
}

var xxx_messageInfo_ReqNodeNotifyList proto.InternalMessageInfo

func (m *ReqNodeNotifyList) GetMessage() []string {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *ReqNodeNotifyList) GetState() []State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *ReqNodeNotifyList) GetSenderName() []string {
	if m != nil {
		return m.SenderName
	}
	return nil
}

func (m *ReqNodeNotifyList) GetSenderType() []NotifySenderType {
	if m != nil {
		return m.SenderType
	}
	return nil
}

func (m *ReqNodeNotifyList) GetSenderTime() []Time {
	if m != nil {
		return m.SenderTime
	}
	return nil
}

func (m *ReqNodeNotifyList) GetPage() Page {
	if m != nil {
		return m.Page
	}
	return Page{}
}

type AnsNodeNotifyList struct {
	Length               int64        `protobuf:"varint,1,opt,name=Length,proto3" json:"Length,omitempty"`
	NodeNotifyList       []NodeNotify `protobuf:"bytes,2,rep,name=NodeNotifyList,proto3" json:"NodeNotifyList"`
	NodeList             []Node       `protobuf:"bytes,3,rep,name=NodeList,proto3" json:"NodeList"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *AnsNodeNotifyList) Reset()         { *m = AnsNodeNotifyList{} }
func (m *AnsNodeNotifyList) String() string { return proto.CompactTextString(m) }
func (*AnsNodeNotifyList) ProtoMessage()    {}
func (*AnsNodeNotifyList) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{33}
}
func (m *AnsNodeNotifyList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnsNodeNotifyList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnsNodeNotifyList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnsNodeNotifyList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnsNodeNotifyList.Merge(m, src)
}
func (m *AnsNodeNotifyList) XXX_Size() int {
	return m.Size()
}
func (m *AnsNodeNotifyList) XXX_DiscardUnknown() {
	xxx_messageInfo_AnsNodeNotifyList.DiscardUnknown(m)
}

var xxx_messageInfo_AnsNodeNotifyList proto.InternalMessageInfo

func (m *AnsNodeNotifyList) GetLength() int64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *AnsNodeNotifyList) GetNodeNotifyList() []NodeNotify {
	if m != nil {
		return m.NodeNotifyList
	}
	return nil
}

func (m *AnsNodeNotifyList) GetNodeList() []Node {
	if m != nil {
		return m.NodeList
	}
	return nil
}

//请求上传节点资源
type ReqNodeResourceUpload struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqNodeResourceUpload) Reset()         { *m = ReqNodeResourceUpload{} }
func (m *ReqNodeResourceUpload) String() string { return proto.CompactTextString(m) }
func (*ReqNodeResourceUpload) ProtoMessage()    {}
func (*ReqNodeResourceUpload) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{34}
}
func (m *ReqNodeResourceUpload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqNodeResourceUpload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqNodeResourceUpload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqNodeResourceUpload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqNodeResourceUpload.Merge(m, src)
}
func (m *ReqNodeResourceUpload) XXX_Size() int {
	return m.Size()
}
func (m *ReqNodeResourceUpload) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqNodeResourceUpload.DiscardUnknown(m)
}

var xxx_messageInfo_ReqNodeResourceUpload proto.InternalMessageInfo

func (m *ReqNodeResourceUpload) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type AnsNodeResourceUpload struct {
	NodeResource         NodeResource `protobuf:"bytes,1,opt,name=NodeResource,proto3" json:"NodeResource"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *AnsNodeResourceUpload) Reset()         { *m = AnsNodeResourceUpload{} }
func (m *AnsNodeResourceUpload) String() string { return proto.CompactTextString(m) }
func (*AnsNodeResourceUpload) ProtoMessage()    {}
func (*AnsNodeResourceUpload) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{35}
}
func (m *AnsNodeResourceUpload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnsNodeResourceUpload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnsNodeResourceUpload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnsNodeResourceUpload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnsNodeResourceUpload.Merge(m, src)
}
func (m *AnsNodeResourceUpload) XXX_Size() int {
	return m.Size()
}
func (m *AnsNodeResourceUpload) XXX_DiscardUnknown() {
	xxx_messageInfo_AnsNodeResourceUpload.DiscardUnknown(m)
}

var xxx_messageInfo_AnsNodeResourceUpload proto.InternalMessageInfo

func (m *AnsNodeResourceUpload) GetNodeResource() NodeResource {
	if m != nil {
		return m.NodeResource
	}
	return NodeResource{}
}

//请求下载节点资源
type ReqNodeResourceDownload struct {
	NodeResource         NodeResource `protobuf:"bytes,1,opt,name=NodeResource,proto3" json:"NodeResource"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ReqNodeResourceDownload) Reset()         { *m = ReqNodeResourceDownload{} }
func (m *ReqNodeResourceDownload) String() string { return proto.CompactTextString(m) }
func (*ReqNodeResourceDownload) ProtoMessage()    {}
func (*ReqNodeResourceDownload) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{36}
}
func (m *ReqNodeResourceDownload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqNodeResourceDownload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqNodeResourceDownload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqNodeResourceDownload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqNodeResourceDownload.Merge(m, src)
}
func (m *ReqNodeResourceDownload) XXX_Size() int {
	return m.Size()
}
func (m *ReqNodeResourceDownload) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqNodeResourceDownload.DiscardUnknown(m)
}

var xxx_messageInfo_ReqNodeResourceDownload proto.InternalMessageInfo

func (m *ReqNodeResourceDownload) GetNodeResource() NodeResource {
	if m != nil {
		return m.NodeResource
	}
	return NodeResource{}
}

type AnsNodeResourceDownload struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnsNodeResourceDownload) Reset()         { *m = AnsNodeResourceDownload{} }
func (m *AnsNodeResourceDownload) String() string { return proto.CompactTextString(m) }
func (*AnsNodeResourceDownload) ProtoMessage()    {}
func (*AnsNodeResourceDownload) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{37}
}
func (m *AnsNodeResourceDownload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnsNodeResourceDownload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnsNodeResourceDownload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnsNodeResourceDownload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnsNodeResourceDownload.Merge(m, src)
}
func (m *AnsNodeResourceDownload) XXX_Size() int {
	return m.Size()
}
func (m *AnsNodeResourceDownload) XXX_DiscardUnknown() {
	xxx_messageInfo_AnsNodeResourceDownload.DiscardUnknown(m)
}

var xxx_messageInfo_AnsNodeResourceDownload proto.InternalMessageInfo

func (m *AnsNodeResourceDownload) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

//请求节点测试
type ReqNodeTest struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Type                 int64    `protobuf:"varint,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Message              string   `protobuf:"bytes,3,opt,name=Message,proto3" json:"Message,omitempty"`
	State                State    `protobuf:"varint,4,opt,name=State,proto3,enum=protoManage.State" json:"State,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqNodeTest) Reset()         { *m = ReqNodeTest{} }
func (m *ReqNodeTest) String() string { return proto.CompactTextString(m) }
func (*ReqNodeTest) ProtoMessage()    {}
func (*ReqNodeTest) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{38}
}
func (m *ReqNodeTest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqNodeTest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqNodeTest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqNodeTest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqNodeTest.Merge(m, src)
}
func (m *ReqNodeTest) XXX_Size() int {
	return m.Size()
}
func (m *ReqNodeTest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqNodeTest.DiscardUnknown(m)
}

var xxx_messageInfo_ReqNodeTest proto.InternalMessageInfo

func (m *ReqNodeTest) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ReqNodeTest) GetType() int64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ReqNodeTest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ReqNodeTest) GetState() State {
	if m != nil {
		return m.State
	}
	return State_StateNot
}

type AnsNodeTest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnsNodeTest) Reset()         { *m = AnsNodeTest{} }
func (m *AnsNodeTest) String() string { return proto.CompactTextString(m) }
func (*AnsNodeTest) ProtoMessage()    {}
func (*AnsNodeTest) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{39}
}
func (m *AnsNodeTest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnsNodeTest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnsNodeTest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnsNodeTest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnsNodeTest.Merge(m, src)
}
func (m *AnsNodeTest) XXX_Size() int {
	return m.Size()
}
func (m *AnsNodeTest) XXX_DiscardUnknown() {
	xxx_messageInfo_AnsNodeTest.DiscardUnknown(m)
}

var xxx_messageInfo_AnsNodeTest proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("protoManage.Order", Order_name, Order_value)
	proto.RegisterEnum("protoManage.State", State_name, State_value)
	proto.RegisterEnum("protoManage.Level", Level_name, Level_value)
	proto.RegisterEnum("protoManage.NodeFuncReturnType", NodeFuncReturnType_name, NodeFuncReturnType_value)
	proto.RegisterEnum("protoManage.NodeReportType", NodeReportType_name, NodeReportType_value)
	proto.RegisterEnum("protoManage.NotifySenderType", NotifySenderType_name, NotifySenderType_value)
	proto.RegisterEnum("protoManage.NodeResourceType", NodeResourceType_name, NodeResourceType_value)
	proto.RegisterEnum("protoManage.HttpError", HttpError_name, HttpError_value)
	proto.RegisterType((*Message)(nil), "protoManage.Message")
	proto.RegisterType((*HttpMessage)(nil), "protoManage.HttpMessage")
	proto.RegisterType((*Base)(nil), "protoManage.Base")
	proto.RegisterType((*Page)(nil), "protoManage.Page")
	proto.RegisterType((*Time)(nil), "protoManage.Time")
	proto.RegisterType((*Manager)(nil), "protoManage.Manager")
	proto.RegisterType((*TopLink)(nil), "protoManage.TopLink")
	proto.RegisterType((*Node)(nil), "protoManage.Node")
	proto.RegisterType((*NodeFunc)(nil), "protoManage.NodeFunc")
	proto.RegisterType((*NodeFuncCall)(nil), "protoManage.NodeFuncCall")
	proto.RegisterType((*NodeReport)(nil), "protoManage.NodeReport")
	proto.RegisterType((*NodeReportVal)(nil), "protoManage.NodeReportVal")
	proto.RegisterType((*NodeNotify)(nil), "protoManage.NodeNotify")
	proto.RegisterType((*NodeResource)(nil), "protoManage.NodeResource")
	proto.RegisterType((*ReqNodeLogin)(nil), "protoManage.ReqNodeLogin")
	proto.RegisterType((*ReqNodeOnline)(nil), "protoManage.ReqNodeOnline")
	proto.RegisterType((*ReqTopLinkList)(nil), "protoManage.ReqTopLinkList")
	proto.RegisterType((*AnsTopLinkList)(nil), "protoManage.AnsTopLinkList")
	proto.RegisterType((*ReqManagerList)(nil), "protoManage.ReqManagerList")
	proto.RegisterType((*AnsManagerList)(nil), "protoManage.AnsManagerList")
	proto.RegisterType((*ReqNodeList)(nil), "protoManage.ReqNodeList")
	proto.RegisterType((*AnsNodeList)(nil), "protoManage.AnsNodeList")
	proto.RegisterType((*ReqNodeFuncList)(nil), "protoManage.ReqNodeFuncList")
	proto.RegisterType((*AnsNodeFuncList)(nil), "protoManage.AnsNodeFuncList")
	proto.RegisterType((*ReqNodeReportList)(nil), "protoManage.ReqNodeReportList")
	proto.RegisterType((*AnsNodeReportList)(nil), "protoManage.AnsNodeReportList")
	proto.RegisterType((*ReqNodeFuncCall)(nil), "protoManage.ReqNodeFuncCall")
	proto.RegisterType((*AnsNodeFuncCall)(nil), "protoManage.AnsNodeFuncCall")
	proto.RegisterType((*ReqNodeFuncCallList)(nil), "protoManage.ReqNodeFuncCallList")
	proto.RegisterType((*AnsNodeFuncCallList)(nil), "protoManage.AnsNodeFuncCallList")
	proto.RegisterType((*ReqNodeReportValList)(nil), "protoManage.ReqNodeReportValList")
	proto.RegisterType((*AnsNodeReportValList)(nil), "protoManage.AnsNodeReportValList")
	proto.RegisterType((*ReqNodeNotifyList)(nil), "protoManage.ReqNodeNotifyList")
	proto.RegisterType((*AnsNodeNotifyList)(nil), "protoManage.AnsNodeNotifyList")
	proto.RegisterType((*ReqNodeResourceUpload)(nil), "protoManage.ReqNodeResourceUpload")
	proto.RegisterType((*AnsNodeResourceUpload)(nil), "protoManage.AnsNodeResourceUpload")
	proto.RegisterType((*ReqNodeResourceDownload)(nil), "protoManage.ReqNodeResourceDownload")
	proto.RegisterType((*AnsNodeResourceDownload)(nil), "protoManage.AnsNodeResourceDownload")
	proto.RegisterType((*ReqNodeTest)(nil), "protoManage.ReqNodeTest")
	proto.RegisterType((*AnsNodeTest)(nil), "protoManage.AnsNodeTest")
}

func init() { proto.RegisterFile("manage.proto", fileDescriptor_519fa8ed5ffbbc8f) }

var fileDescriptor_519fa8ed5ffbbc8f = []byte{
	// 2273 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x19, 0x49, 0x73, 0x1c, 0x57,
	0x59, 0x3d, 0xdd, 0xb3, 0x7d, 0x5a, 0xfc, 0xf4, 0x24, 0x59, 0xe3, 0xc1, 0x96, 0x5d, 0x5d, 0x39,
	0xa8, 0x94, 0xc2, 0x09, 0x4e, 0x85, 0x1c, 0x08, 0x49, 0x69, 0xb1, 0xcb, 0x22, 0xd2, 0x44, 0xd5,
	0x5a, 0x52, 0x95, 0x4a, 0x01, 0xed, 0x99, 0xe7, 0xd1, 0xa0, 0x9e, 0xee, 0x71, 0x4f, 0x4f, 0x6c,
	0x73, 0xc7, 0x70, 0x64, 0xad, 0xca, 0x81, 0x2a, 0x0a, 0x38, 0x50, 0x54, 0x6e, 0x5c, 0x29, 0x96,
	0xc0, 0x25, 0xdc, 0xb8, 0x92, 0x80, 0x09, 0x36, 0xdc, 0x29, 0x7e, 0x01, 0xf5, 0xbd, 0xad, 0x5f,
	0x8f, 0x7a, 0x34, 0x9a, 0xc4, 0xdc, 0x38, 0xe9, 0x7d, 0xfb, 0xfa, 0xbe, 0xf7, 0x4d, 0x0b, 0x66,
	0xba, 0x7e, 0xe8, 0xb7, 0xd9, 0xf5, 0x5e, 0x1c, 0x25, 0x11, 0x9d, 0xe6, 0x7f, 0x76, 0x39, 0xaa,
	0xbe, 0xd8, 0x8e, 0xda, 0x11, 0x47, 0xbc, 0x80, 0x27, 0xc1, 0xe2, 0xee, 0x42, 0x79, 0x97, 0xf5,
	0xfb, 0x7e, 0x9b, 0xd1, 0x55, 0x28, 0x46, 0x71, 0x8b, 0xc5, 0x35, 0xeb, 0x9a, 0xb5, 0x3a, 0x77,
	0x83, 0x5e, 0x37, 0xa4, 0xaf, 0xbf, 0x89, 0x14, 0x4f, 0x30, 0xd0, 0x1a, 0x94, 0xbb, 0x42, 0xa8,
	0x56, 0xb8, 0x66, 0xad, 0xce, 0x78, 0x0a, 0x74, 0xdb, 0x30, 0x7d, 0x3b, 0x49, 0x7a, 0xcf, 0x50,
	0x25, 0x5d, 0x84, 0x62, 0x12, 0x9d, 0xb0, 0xb0, 0x66, 0x5f, 0xb3, 0x56, 0xab, 0x9e, 0x00, 0xdc,
	0x2f, 0x82, 0xb3, 0xe1, 0xf7, 0x19, 0x9d, 0x83, 0xc2, 0xf6, 0x16, 0x57, 0x6f, 0x7b, 0x85, 0xed,
	0x2d, 0xba, 0x02, 0x70, 0xd8, 0x6b, 0xf9, 0x09, 0x3b, 0xe8, 0x74, 0x85, 0x2a, 0xdb, 0x33, 0x30,
	0xee, 0x75, 0x70, 0xf6, 0xa4, 0xd6, 0xcd, 0x68, 0x10, 0x26, 0x52, 0x54, 0x00, 0x94, 0x80, 0xdd,
	0x18, 0x74, 0xa5, 0x18, 0x1e, 0xdd, 0xd7, 0xc0, 0x41, 0x39, 0x7a, 0x19, 0xaa, 0x1b, 0xac, 0xdd,
	0x09, 0xb9, 0x5a, 0x21, 0x93, 0x22, 0xd0, 0xfb, 0x9b, 0x61, 0xcb, 0x30, 0xa9, 0x40, 0xf7, 0x51,
	0x01, 0xca, 0x22, 0xde, 0x98, 0x3e, 0x2f, 0x7c, 0xe6, 0xe2, 0xd3, 0x37, 0xe6, 0x33, 0xc9, 0x40,
	0xc2, 0x86, 0xf3, 0xe1, 0xe3, 0xab, 0x53, 0x9e, 0x08, 0x8c, 0x82, 0xd3, 0xf0, 0xa5, 0xbe, 0xaa,
	0xc7, 0xcf, 0xb4, 0x0e, 0x95, 0x3d, 0xbf, 0xdf, 0xbf, 0x1f, 0xc5, 0x2d, 0x99, 0x0d, 0x0d, 0x23,
	0xad, 0xd1, 0x69, 0x9e, 0x70, 0x19, 0x47, 0xd0, 0x14, 0x8c, 0xc1, 0x1e, 0xf0, 0x14, 0x16, 0x45,
	0x0a, 0x39, 0x80, 0x4e, 0xef, 0xb3, 0x24, 0xe9, 0x84, 0xed, 0x5a, 0x89, 0xe3, 0x15, 0x88, 0x65,
	0xdb, 0x61, 0xef, 0xb2, 0xa0, 0x56, 0xce, 0x29, 0x1b, 0xa7, 0x78, 0x82, 0x01, 0x39, 0xf7, 0x13,
	0x3f, 0x61, 0xb5, 0x4a, 0x0e, 0x27, 0xa7, 0x78, 0x82, 0xc1, 0x7d, 0x64, 0x41, 0xf9, 0x20, 0xea,
	0xed, 0x74, 0xc2, 0x93, 0xcf, 0x9e, 0x08, 0x02, 0xf6, 0x61, 0x1c, 0xc8, 0x1c, 0xe0, 0x31, 0x75,
	0xc4, 0x19, 0xe7, 0xc8, 0x3d, 0x70, 0x1a, 0x51, 0x8b, 0x7d, 0x76, 0x27, 0xb4, 0x49, 0x7b, 0x9c,
	0xc9, 0xa7, 0x16, 0x54, 0xd0, 0xe6, 0xad, 0x41, 0xd8, 0x9c, 0xcc, 0xee, 0x45, 0x28, 0xa1, 0xe0,
	0xf6, 0x96, 0xec, 0x2b, 0x09, 0x69, 0x7f, 0x6c, 0xc3, 0x1f, 0x0a, 0x0e, 0x1a, 0x90, 0xd5, 0xe7,
	0x67, 0x94, 0xdf, 0x6f, 0x1e, 0xb3, 0xae, 0x2f, 0x4b, 0x2f, 0xa1, 0xb4, 0xc2, 0xa5, 0x73, 0x57,
	0xb8, 0x3c, 0x2e, 0xca, 0xf7, 0x0a, 0x30, 0xa3, 0xa2, 0xdc, 0xf4, 0x83, 0x60, 0xb2, 0x48, 0x2f,
	0x43, 0x55, 0xde, 0x13, 0x1d, 0x6c, 0x8a, 0xc0, 0x38, 0x50, 0xed, 0xf6, 0x16, 0x8f, 0xd8, 0xf6,
	0x24, 0x84, 0x52, 0x7b, 0x7e, 0xec, 0x77, 0x59, 0xc2, 0x62, 0x19, 0x78, 0x8a, 0x40, 0xaa, 0xc7,
	0x92, 0x41, 0x1c, 0x1e, 0xf9, 0x81, 0x4c, 0x40, 0x8a, 0xa0, 0xaf, 0x03, 0x08, 0xe0, 0xe0, 0x61,
	0x8f, 0xc9, 0x44, 0x5c, 0xcd, 0x38, 0xa9, 0xa2, 0x49, 0xd9, 0x3c, 0x43, 0x64, 0x82, 0xd4, 0xfc,
	0xaa, 0x00, 0x80, 0xca, 0x3c, 0xd6, 0x8b, 0xe2, 0xe4, 0x7f, 0xd7, 0x02, 0x2f, 0x80, 0xc3, 0x83,
	0x11, 0x97, 0xe0, 0x73, 0xa7, 0x82, 0x11, 0xf6, 0x79, 0x20, 0x9c, 0x51, 0xf7, 0x4c, 0x31, 0xb7,
	0x67, 0x4a, 0x99, 0x9e, 0xa9, 0x43, 0x65, 0x3b, 0x4c, 0x58, 0xfc, 0xae, 0x2f, 0x06, 0x83, 0xed,
	0x69, 0x38, 0xed, 0xa7, 0xca, 0xb9, 0xfb, 0xa9, 0x3a, 0xb6, 0x9f, 0x2c, 0x98, 0x4d, 0x9d, 0xc6,
	0x8a, 0x4d, 0x94, 0xb7, 0x3a, 0x54, 0x84, 0xa4, 0xce, 0x9c, 0x86, 0x71, 0x20, 0x1e, 0xf9, 0xc1,
	0x40, 0x25, 0x4f, 0x00, 0x13, 0xcc, 0x90, 0xff, 0x58, 0xa2, 0x9e, 0x8d, 0x28, 0xe9, 0xdc, 0x7d,
	0x38, 0xb1, 0x5f, 0xfb, 0x2c, 0x6c, 0x19, 0x7d, 0xae, 0x61, 0xfa, 0x65, 0x00, 0x71, 0xe6, 0x55,
	0x14, 0x73, 0xe5, 0xca, 0x50, 0x15, 0xd1, 0x62, 0xca, 0xe4, 0x19, 0x02, 0x38, 0xd1, 0xe5, 0xcb,
	0x2b, 0xef, 0x82, 0xf9, 0xb6, 0x8b, 0xd0, 0x8a, 0x63, 0x42, 0x43, 0x1d, 0xfd, 0xe3, 0xe8, 0xfe,
	0x5e, 0xd4, 0xe3, 0xe5, 0xaf, 0x78, 0x0a, 0x74, 0xdf, 0xb7, 0xc4, 0xfd, 0xf6, 0x58, 0x3f, 0x1a,
	0xc4, 0x4d, 0xde, 0x3c, 0x87, 0x87, 0xf2, 0xf5, 0xad, 0x7a, 0xfc, 0x3c, 0x6a, 0x5a, 0xef, 0xb6,
	0x5e, 0x56, 0xd3, 0x7a, 0xb7, 0xf5, 0x32, 0xe6, 0x7f, 0xbf, 0xf3, 0x4d, 0xd6, 0xe7, 0x6e, 0xda,
	0x9e, 0x00, 0xe8, 0x17, 0x64, 0xf7, 0x16, 0x73, 0xe3, 0x4e, 0x0d, 0x1b, 0xfd, 0x5b, 0x83, 0xf2,
	0x76, 0xff, 0xe6, 0x83, 0x4e, 0x3f, 0x51, 0xde, 0x4a, 0xd0, 0xfd, 0x12, 0xcc, 0x78, 0xec, 0x1e,
	0x8a, 0xed, 0x44, 0xed, 0x4e, 0x88, 0x35, 0x42, 0x20, 0xb7, 0x46, 0x48, 0x50, 0x35, 0xc2, 0xb3,
	0xfb, 0x2a, 0xcc, 0x4a, 0xe1, 0x37, 0xc3, 0xa0, 0x13, 0xb2, 0xc9, 0xa4, 0x09, 0xcc, 0x79, 0xec,
	0x9e, 0x7c, 0xec, 0x76, 0xd0, 0x99, 0x06, 0xcc, 0xad, 0x87, 0x7d, 0x03, 0x43, 0x5f, 0x85, 0x69,
	0x03, 0xac, 0x59, 0xd7, 0xec, 0xd5, 0xe9, 0x1b, 0x8b, 0x19, 0xbd, 0x92, 0x2e, 0x55, 0x9b, 0xec,
	0xd2, 0x82, 0x1c, 0x8f, 0x86, 0x05, 0x03, 0x83, 0x16, 0x0c, 0x30, 0xd7, 0x82, 0xa4, 0x2b, 0x0b,
	0xa6, 0xbe, 0x0f, 0x2c, 0x98, 0x56, 0xf9, 0x43, 0x6d, 0x6a, 0xcf, 0xb2, 0xe5, 0x9e, 0x95, 0xd6,
	0xd9, 0xce, 0x7b, 0x10, 0xed, 0xb3, 0x9b, 0xec, 0x95, 0xcc, 0x96, 0xe6, 0x70, 0xd7, 0xb2, 0x49,
	0x45, 0x82, 0xf4, 0xcb, 0x60, 0xc5, 0x3a, 0xe0, 0xfa, 0xc6, 0x5b, 0x64, 0x58, 0x04, 0x09, 0xaa,
	0x0e, 0x78, 0x76, 0xdf, 0x86, 0xe9, 0xf5, 0xb0, 0xaf, 0x43, 0xb8, 0x08, 0xa5, 0x1d, 0x16, 0xb6,
	0x93, 0x63, 0xb9, 0xbf, 0x49, 0x88, 0xbe, 0x24, 0x1e, 0x67, 0x9e, 0xa5, 0x42, 0x8e, 0x2b, 0x46,
	0x7d, 0x35, 0xa3, 0xfb, 0xcb, 0x02, 0x5c, 0x90, 0xf9, 0xc1, 0xa1, 0x39, 0x49, 0x8e, 0xc4, 0xa0,
	0xcc, 0xcb, 0x51, 0x66, 0x50, 0x5e, 0x87, 0x0a, 0x3f, 0xec, 0xfa, 0x0f, 0x72, 0x07, 0x92, 0x60,
	0xd6, 0x3c, 0xc6, 0x3b, 0x51, 0xe4, 0x1e, 0xa8, 0x77, 0xa2, 0x2e, 0xc2, 0xe3, 0x9e, 0x94, 0xb8,
	0x27, 0x1a, 0x1e, 0xaa, 0x43, 0x79, 0xf2, 0x3a, 0x54, 0xce, 0x53, 0x87, 0x9f, 0x58, 0x70, 0x41,
	0x16, 0x42, 0xe7, 0x6a, 0x54, 0x31, 0x5e, 0x4f, 0x77, 0x08, 0xa3, 0x20, 0x4b, 0xb9, 0xcf, 0xb2,
	0x34, 0x92, 0x11, 0xc8, 0x54, 0xd3, 0x3e, 0x6f, 0x35, 0xdf, 0x2f, 0xc0, 0xbc, 0xac, 0xa6, 0x78,
	0x23, 0xfe, 0x5f, 0xcf, 0x33, 0xea, 0xf9, 0x0b, 0x0b, 0xe6, 0x65, 0x3d, 0x8d, 0x6c, 0x8d, 0xaa,
	0xe8, 0x4d, 0x98, 0xcb, 0x72, 0xca, 0x9a, 0x2e, 0x8f, 0xd8, 0x4e, 0xa4, 0xa9, 0x21, 0xa1, 0x4f,
	0x57, 0xd7, 0xa3, 0xcc, 0x25, 0xe5, 0x4b, 0xe9, 0x66, 0x76, 0x49, 0x95, 0x13, 0xfd, 0x52, 0x6e,
	0x83, 0x21, 0xc3, 0x70, 0x93, 0x21, 0xce, 0x0d, 0x32, 0x0d, 0xfd, 0xcc, 0xf4, 0xe2, 0xbb, 0x78,
	0x33, 0x8e, 0xa3, 0x58, 0x3e, 0x9f, 0x02, 0x70, 0xdf, 0x86, 0x85, 0xa1, 0x28, 0x54, 0xc2, 0xe5,
	0x4e, 0x6c, 0x65, 0x76, 0x62, 0x55, 0xcb, 0xc2, 0x79, 0x6a, 0x79, 0x07, 0x16, 0x86, 0x22, 0xe1,
	0xba, 0xdf, 0x00, 0x32, 0x8c, 0x93, 0x2f, 0xc8, 0xd8, 0x88, 0x4e, 0x09, 0xba, 0x11, 0x2c, 0x66,
	0x2e, 0xd7, 0x91, 0x1f, 0x64, 0xee, 0x97, 0xfa, 0xed, 0x7e, 0xd6, 0xc6, 0xa6, 0x82, 0xb2, 0xcf,
	0x13, 0xd4, 0x5d, 0x58, 0xcc, 0xf4, 0xa7, 0x32, 0xd8, 0x80, 0xf9, 0x53, 0x48, 0x19, 0x56, 0x7d,
	0x44, 0x37, 0x1e, 0xf9, 0x2a, 0xae, 0xd3, 0xa2, 0xee, 0x8f, 0xd3, 0xb1, 0x21, 0xf6, 0x32, 0x6e,
	0xc5, 0xd8, 0xc2, 0x2c, 0x7e, 0x3f, 0x4f, 0x6f, 0x61, 0x85, 0x71, 0x0f, 0xe4, 0x8a, 0x5a, 0x04,
	0xe5, 0x8a, 0x8f, 0x6a, 0x0c, 0xcc, 0xd0, 0xa2, 0xe8, 0x70, 0x75, 0x13, 0x2c, 0x8a, 0xaf, 0x68,
	0x71, 0x9c, 0x13, 0xc5, 0x31, 0x73, 0x22, 0x65, 0xd5, 0x65, 0x28, 0x4d, 0x38, 0x27, 0x8c, 0xf4,
	0x8c, 0x99, 0x13, 0x29, 0xe7, 0xc8, 0x39, 0x21, 0x58, 0xcc, 0x39, 0x61, 0xa8, 0xff, 0x54, 0x73,
	0xe2, 0x79, 0x58, 0xd2, 0x1d, 0x2a, 0x76, 0xcc, 0xc3, 0x5e, 0x10, 0xf9, 0x2d, 0x1c, 0xf9, 0x5b,
	0x7e, 0xe2, 0x73, 0x57, 0x67, 0x3c, 0x7e, 0x76, 0xdf, 0x81, 0x25, 0xdd, 0x5d, 0x19, 0xe6, 0xcd,
	0xec, 0x7e, 0x3c, 0x72, 0x04, 0x28, 0x06, 0x73, 0x04, 0x28, 0x9c, 0xfb, 0x55, 0x58, 0x1e, 0x72,
	0x65, 0x2b, 0xba, 0x1f, 0x3e, 0x3b, 0xfd, 0x9f, 0x87, 0xe5, 0x21, 0xef, 0xb5, 0xfe, 0xbc, 0x60,
	0x07, 0x7a, 0x0d, 0x3c, 0x60, 0x39, 0x57, 0x96, 0xca, 0x95, 0x5d, 0x5c, 0x57, 0x67, 0xf8, 0x57,
	0x88, 0x3d, 0xe2, 0x57, 0xc8, 0xd8, 0x1f, 0x58, 0xb3, 0x7a, 0x75, 0x43, 0xb3, 0x6b, 0x7f, 0xaa,
	0x40, 0x91, 0x7f, 0x2e, 0xa4, 0x00, 0xa5, 0xc3, 0xf0, 0x24, 0x8c, 0xee, 0x93, 0x29, 0x7a, 0x41,
	0xef, 0xd0, 0xb7, 0x3a, 0x61, 0x8b, 0x58, 0x74, 0x01, 0x2e, 0x18, 0x88, 0x8d, 0x87, 0xdb, 0x5b,
	0xa4, 0x40, 0xe7, 0x00, 0x24, 0x72, 0xbd, 0xd5, 0x22, 0xb6, 0x01, 0x6f, 0xb1, 0x80, 0x38, 0x74,
	0x1e, 0x66, 0x25, 0x2c, 0xde, 0x43, 0x52, 0xa4, 0x33, 0xa2, 0x87, 0xd0, 0x34, 0x29, 0x51, 0x02,
	0x33, 0x6a, 0x33, 0xc6, 0x5f, 0x12, 0x84, 0xa1, 0x1d, 0x89, 0xf1, 0x58, 0xbb, 0xd3, 0x4f, 0x58,
	0x4c, 0xee, 0xa2, 0x5e, 0x89, 0x44, 0x3b, 0x6d, 0x03, 0x46, 0x3b, 0xc7, 0x68, 0x47, 0xc2, 0xd2,
	0x4e, 0x87, 0x2e, 0xc3, 0x42, 0x06, 0xc5, 0x3f, 0xe6, 0xb5, 0xc8, 0x37, 0x68, 0x0d, 0x16, 0x33,
	0x04, 0xf9, 0x61, 0x8e, 0x9c, 0x18, 0x22, 0x18, 0xa2, 0xfa, 0xc2, 0x47, 0x82, 0x21, 0xc2, 0x4e,
	0x74, 0x9f, 0x2f, 0x12, 0xa4, 0x6b, 0x38, 0xab, 0x93, 0x12, 0xd2, 0x8b, 0x40, 0x33, 0x48, 0xc1,
	0x1c, 0xd1, 0x19, 0x28, 0x63, 0xe4, 0x18, 0xc1, 0xf7, 0x6c, 0x05, 0xa1, 0xff, 0xdf, 0xb7, 0xe9,
	0x22, 0x5c, 0x40, 0x48, 0x7a, 0x84, 0x65, 0x22, 0x3f, 0xb0, 0xe9, 0xac, 0xfc, 0xb4, 0x85, 0x15,
	0xf8, 0xa1, 0x4d, 0xe7, 0xe5, 0x33, 0xa8, 0x4c, 0xfd, 0xc8, 0xa6, 0x04, 0xa6, 0xd5, 0x93, 0x80,
	0x7a, 0xff, 0xe2, 0x98, 0x18, 0xd4, 0xfd, 0x91, 0x43, 0xaf, 0x40, 0xcd, 0xc0, 0xac, 0x07, 0xc1,
	0x5b, 0x9d, 0xe4, 0x58, 0x2c, 0x3c, 0xe4, 0x63, 0x87, 0x2e, 0x03, 0x55, 0x64, 0x61, 0x7e, 0x8b,
	0xf5, 0x9b, 0xe4, 0xaf, 0x39, 0x84, 0x3d, 0x3f, 0xf6, 0xc9, 0xdf, 0x1c, 0xed, 0xc7, 0x20, 0x6c,
	0x72, 0xd7, 0x1e, 0x3b, 0x74, 0x29, 0x7d, 0xd3, 0xb4, 0x7b, 0x7f, 0x77, 0x54, 0x58, 0xea, 0xc5,
	0xf2, 0xd8, 0x3d, 0xf2, 0xc9, 0x29, 0xec, 0x7a, 0xd8, 0x27, 0xff, 0xc8, 0xa8, 0x40, 0x2c, 0xd7,
	0xfc, 0xc4, 0xa1, 0x97, 0x60, 0x71, 0x18, 0xcd, 0xb5, 0x3f, 0x75, 0xa8, 0x0b, 0x57, 0x86, 0x49,
	0xfa, 0xfb, 0x14, 0xe7, 0xf9, 0x67, 0x2e, 0x8f, 0xfe, 0x4a, 0xc5, 0x79, 0xfe, 0xe5, 0x50, 0x6a,
	0x7e, 0x0b, 0xc1, 0x34, 0xfe, 0xa6, 0x98, 0xc5, 0x61, 0x22, 0x7f, 0x5b, 0xa4, 0x57, 0xa1, 0x9e,
	0xc1, 0x65, 0x53, 0xf9, 0xbb, 0x22, 0xad, 0xc1, 0x42, 0xca, 0x20, 0x72, 0x76, 0xe4, 0x07, 0xe4,
	0xf7, 0x45, 0xba, 0x60, 0x2e, 0x6a, 0x3c, 0xb4, 0x0f, 0x8a, 0x2a, 0xc1, 0x29, 0x92, 0x3b, 0xf4,
	0x87, 0x22, 0xbd, 0x38, 0xf4, 0x96, 0x72, 0x81, 0x3f, 0x6a, 0xa7, 0xc4, 0x44, 0x46, 0x47, 0x7f,
	0x5a, 0x52, 0x9a, 0x05, 0x8e, 0x33, 0xfe, 0xac, 0xa4, 0x32, 0x2c, 0x90, 0x7c, 0xd1, 0x21, 0x3f,
	0x2f, 0xa5, 0xf6, 0xcc, 0xc9, 0x4a, 0xbe, 0x55, 0x56, 0x39, 0x1e, 0x1e, 0x5a, 0xe4, 0x51, 0x39,
	0x75, 0x45, 0x90, 0x36, 0x8f, 0x59, 0xf3, 0x84, 0x7c, 0xbb, 0xac, 0x2c, 0x68, 0x11, 0x16, 0x90,
	0xef, 0x94, 0xd7, 0x8e, 0xe4, 0x10, 0xc2, 0x5b, 0xce, 0x0f, 0x8d, 0x28, 0x11, 0xc3, 0x84, 0x43,
	0x72, 0xba, 0x58, 0x1a, 0xd1, 0x88, 0xe2, 0xae, 0x1f, 0x90, 0x02, 0x9d, 0x85, 0x2a, 0x47, 0xbc,
	0xe5, 0xc7, 0xa1, 0x98, 0x23, 0x1c, 0x14, 0xae, 0x3b, 0x6b, 0x5f, 0x93, 0xbf, 0x04, 0x50, 0x2f,
	0x3f, 0x08, 0xbd, 0x04, 0x66, 0x38, 0xb4, 0x17, 0x77, 0xba, 0x7e, 0xfc, 0x90, 0x58, 0x74, 0x09,
	0xe6, 0x39, 0x86, 0x7f, 0x3c, 0xeb, 0xb2, 0x56, 0x07, 0x6f, 0x52, 0x01, 0xed, 0x71, 0xf4, 0x3e,
	0x0b, 0x3b, 0x51, 0x2c, 0x0c, 0x08, 0xc4, 0xa0, 0xc7, 0xd0, 0xc0, 0x77, 0xad, 0xb4, 0xd9, 0x8d,
	0xaf, 0x90, 0xd3, 0x50, 0x16, 0x3e, 0x87, 0x64, 0x0a, 0x7d, 0x6c, 0x44, 0x89, 0xa0, 0x12, 0x8b,
	0x56, 0xe5, 0x3e, 0x49, 0x0a, 0xb4, 0x02, 0xce, 0x01, 0x7b, 0x90, 0x10, 0x1b, 0x4f, 0x5f, 0xe9,
	0x47, 0x21, 0x71, 0xf0, 0x84, 0x73, 0x8f, 0x14, 0x91, 0x71, 0xbb, 0xeb, 0xb7, 0x19, 0x29, 0xe1,
	0x71, 0x17, 0x9d, 0x22, 0x65, 0xa4, 0xdf, 0xea, 0x04, 0x8c, 0x54, 0x10, 0x79, 0xe0, 0xdf, 0x09,
	0x18, 0xa9, 0xe2, 0x04, 0xde, 0x3c, 0xf6, 0xe3, 0xa4, 0x4f, 0x60, 0xed, 0x1d, 0xb3, 0x65, 0xb8,
	0x37, 0x97, 0x60, 0x29, 0x8b, 0x49, 0x7d, 0x5b, 0x36, 0x3b, 0x0f, 0x49, 0x42, 0xa3, 0x85, 0xc3,
	0x28, 0x4b, 0xd8, 0xe9, 0x84, 0x8c, 0x14, 0xd6, 0xee, 0xe0, 0x6d, 0xcb, 0x6e, 0x31, 0xb4, 0x0e,
	0x17, 0x87, 0x71, 0xfa, 0x3d, 0xa8, 0x61, 0x8b, 0x0c, 0xd1, 0xfa, 0x2c, 0x26, 0x56, 0x1e, 0x05,
	0x2d, 0x92, 0xc2, 0xda, 0xb6, 0xb8, 0xd1, 0xe6, 0xa7, 0x25, 0x61, 0x23, 0x8b, 0xd3, 0x36, 0x74,
	0x7c, 0x29, 0x6d, 0xd3, 0x6f, 0x1e, 0x33, 0x62, 0xad, 0xfd, 0xda, 0x82, 0xea, 0xed, 0x24, 0xe9,
	0xf1, 0x8c, 0xe3, 0xb8, 0xd7, 0x40, 0x63, 0x10, 0x04, 0x64, 0x0a, 0xa7, 0x87, 0x46, 0xed, 0xfa,
	0x71, 0xff, 0xd8, 0x0f, 0x70, 0x1a, 0x2e, 0x03, 0xd5, 0xe8, 0xc3, 0xb0, 0x2b, 0x09, 0x1f, 0x39,
	0xd8, 0xd7, 0x9a, 0xa0, 0x1f, 0x9a, 0x8f, 0x1d, 0xba, 0x02, 0x97, 0x34, 0x9e, 0x3f, 0x49, 0x78,
	0xc3, 0xd7, 0x9b, 0xcd, 0x68, 0x10, 0x26, 0x38, 0x14, 0x2f, 0xc3, 0xf2, 0x69, 0x3a, 0xff, 0x9f,
	0x0f, 0x4e, 0x46, 0xd3, 0x0b, 0x8f, 0xdd, 0x1b, 0xe0, 0x23, 0xf7, 0xd8, 0xb9, 0xf1, 0x6f, 0x1b,
	0xaa, 0x5e, 0xaf, 0x79, 0x33, 0x6c, 0x77, 0x42, 0x46, 0x37, 0x80, 0x28, 0x8b, 0xfa, 0x1f, 0x17,
	0xf9, 0x3f, 0xc2, 0xeb, 0xf9, 0x68, 0x77, 0x8a, 0xde, 0x06, 0x6a, 0xea, 0x90, 0xdf, 0xbe, 0x47,
	0xfd, 0xec, 0xab, 0x8f, 0x22, 0xb8, 0x53, 0xf4, 0x0d, 0x98, 0xe7, 0x97, 0x3a, 0xf3, 0xf5, 0x71,
	0xf4, 0xde, 0x53, 0x1f, 0x4d, 0x72, 0xa7, 0xe8, 0xd7, 0x81, 0x8a, 0xa9, 0x92, 0xd1, 0xe6, 0x66,
	0x44, 0x72, 0x97, 0xc1, 0x7a, 0x96, 0x27, 0x77, 0x07, 0x74, 0xa7, 0x56, 0x2d, 0x7a, 0x17, 0x16,
	0xd5, 0x78, 0xca, 0xd8, 0x78, 0xee, 0x2c, 0x1b, 0x4a, 0xa2, 0xfe, 0xdc, 0x59, 0x56, 0x14, 0x97,
	0x3b, 0xf5, 0xa2, 0x45, 0x5f, 0x03, 0xf0, 0x7a, 0xcd, 0xcd, 0x63, 0x3f, 0x0c, 0x59, 0x40, 0x87,
	0x3e, 0xed, 0x89, 0x95, 0xab, 0x9e, 0x8b, 0x45, 0x2f, 0x5f, 0xb4, 0x36, 0xc8, 0x87, 0x4f, 0x56,
	0xac, 0x3f, 0x3f, 0x59, 0xb1, 0x3e, 0x79, 0xb2, 0x62, 0xbd, 0xf7, 0x74, 0x65, 0xea, 0x4e, 0x89,
	0x33, 0xbf, 0xf4, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe9, 0x90, 0x8e, 0xd9, 0x47, 0x1e, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RpcEngineClient is the client API for RpcEngine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RpcEngineClient interface {
	RegisterNodeFunc(ctx context.Context, in *NodeFunc, opts ...grpc.CallOption) (*NodeFunc, error)
	RegisterNodeReport(ctx context.Context, in *NodeReport, opts ...grpc.CallOption) (*NodeReport, error)
	CheckNodeResource(ctx context.Context, in *NodeResource, opts ...grpc.CallOption) (*NodeResource, error)
	UploadNodeResource(ctx context.Context, opts ...grpc.CallOption) (RpcEngine_UploadNodeResourceClient, error)
	DownloadNodeResource(ctx context.Context, in *ReqNodeResourceDownload, opts ...grpc.CallOption) (RpcEngine_DownloadNodeResourceClient, error)
	RpcChannel(ctx context.Context, opts ...grpc.CallOption) (RpcEngine_RpcChannelClient, error)
}

type rpcEngineClient struct {
	cc *grpc.ClientConn
}

func NewRpcEngineClient(cc *grpc.ClientConn) RpcEngineClient {
	return &rpcEngineClient{cc}
}

func (c *rpcEngineClient) RegisterNodeFunc(ctx context.Context, in *NodeFunc, opts ...grpc.CallOption) (*NodeFunc, error) {
	out := new(NodeFunc)
	err := c.cc.Invoke(ctx, "/protoManage.RpcEngine/RegisterNodeFunc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcEngineClient) RegisterNodeReport(ctx context.Context, in *NodeReport, opts ...grpc.CallOption) (*NodeReport, error) {
	out := new(NodeReport)
	err := c.cc.Invoke(ctx, "/protoManage.RpcEngine/RegisterNodeReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcEngineClient) CheckNodeResource(ctx context.Context, in *NodeResource, opts ...grpc.CallOption) (*NodeResource, error) {
	out := new(NodeResource)
	err := c.cc.Invoke(ctx, "/protoManage.RpcEngine/CheckNodeResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcEngineClient) UploadNodeResource(ctx context.Context, opts ...grpc.CallOption) (RpcEngine_UploadNodeResourceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RpcEngine_serviceDesc.Streams[0], "/protoManage.RpcEngine/UploadNodeResource", opts...)
	if err != nil {
		return nil, err
	}
	x := &rpcEngineUploadNodeResourceClient{stream}
	return x, nil
}

type RpcEngine_UploadNodeResourceClient interface {
	Send(*ReqNodeResourceUpload) error
	CloseAndRecv() (*AnsNodeResourceUpload, error)
	grpc.ClientStream
}

type rpcEngineUploadNodeResourceClient struct {
	grpc.ClientStream
}

func (x *rpcEngineUploadNodeResourceClient) Send(m *ReqNodeResourceUpload) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rpcEngineUploadNodeResourceClient) CloseAndRecv() (*AnsNodeResourceUpload, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AnsNodeResourceUpload)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rpcEngineClient) DownloadNodeResource(ctx context.Context, in *ReqNodeResourceDownload, opts ...grpc.CallOption) (RpcEngine_DownloadNodeResourceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RpcEngine_serviceDesc.Streams[1], "/protoManage.RpcEngine/DownloadNodeResource", opts...)
	if err != nil {
		return nil, err
	}
	x := &rpcEngineDownloadNodeResourceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RpcEngine_DownloadNodeResourceClient interface {
	Recv() (*AnsNodeResourceDownload, error)
	grpc.ClientStream
}

type rpcEngineDownloadNodeResourceClient struct {
	grpc.ClientStream
}

func (x *rpcEngineDownloadNodeResourceClient) Recv() (*AnsNodeResourceDownload, error) {
	m := new(AnsNodeResourceDownload)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rpcEngineClient) RpcChannel(ctx context.Context, opts ...grpc.CallOption) (RpcEngine_RpcChannelClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RpcEngine_serviceDesc.Streams[2], "/protoManage.RpcEngine/RpcChannel", opts...)
	if err != nil {
		return nil, err
	}
	x := &rpcEngineRpcChannelClient{stream}
	return x, nil
}

type RpcEngine_RpcChannelClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type rpcEngineRpcChannelClient struct {
	grpc.ClientStream
}

func (x *rpcEngineRpcChannelClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rpcEngineRpcChannelClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RpcEngineServer is the server API for RpcEngine service.
type RpcEngineServer interface {
	RegisterNodeFunc(context.Context, *NodeFunc) (*NodeFunc, error)
	RegisterNodeReport(context.Context, *NodeReport) (*NodeReport, error)
	CheckNodeResource(context.Context, *NodeResource) (*NodeResource, error)
	UploadNodeResource(RpcEngine_UploadNodeResourceServer) error
	DownloadNodeResource(*ReqNodeResourceDownload, RpcEngine_DownloadNodeResourceServer) error
	RpcChannel(RpcEngine_RpcChannelServer) error
}

// UnimplementedRpcEngineServer can be embedded to have forward compatible implementations.
type UnimplementedRpcEngineServer struct {
}

func (*UnimplementedRpcEngineServer) RegisterNodeFunc(ctx context.Context, req *NodeFunc) (*NodeFunc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNodeFunc not implemented")
}
func (*UnimplementedRpcEngineServer) RegisterNodeReport(ctx context.Context, req *NodeReport) (*NodeReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNodeReport not implemented")
}
func (*UnimplementedRpcEngineServer) CheckNodeResource(ctx context.Context, req *NodeResource) (*NodeResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckNodeResource not implemented")
}
func (*UnimplementedRpcEngineServer) UploadNodeResource(srv RpcEngine_UploadNodeResourceServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadNodeResource not implemented")
}
func (*UnimplementedRpcEngineServer) DownloadNodeResource(req *ReqNodeResourceDownload, srv RpcEngine_DownloadNodeResourceServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadNodeResource not implemented")
}
func (*UnimplementedRpcEngineServer) RpcChannel(srv RpcEngine_RpcChannelServer) error {
	return status.Errorf(codes.Unimplemented, "method RpcChannel not implemented")
}

func RegisterRpcEngineServer(s *grpc.Server, srv RpcEngineServer) {
	s.RegisterService(&_RpcEngine_serviceDesc, srv)
}

func _RpcEngine_RegisterNodeFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeFunc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcEngineServer).RegisterNodeFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoManage.RpcEngine/RegisterNodeFunc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcEngineServer).RegisterNodeFunc(ctx, req.(*NodeFunc))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcEngine_RegisterNodeReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcEngineServer).RegisterNodeReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoManage.RpcEngine/RegisterNodeReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcEngineServer).RegisterNodeReport(ctx, req.(*NodeReport))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcEngine_CheckNodeResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeResource)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcEngineServer).CheckNodeResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoManage.RpcEngine/CheckNodeResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcEngineServer).CheckNodeResource(ctx, req.(*NodeResource))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcEngine_UploadNodeResource_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RpcEngineServer).UploadNodeResource(&rpcEngineUploadNodeResourceServer{stream})
}

type RpcEngine_UploadNodeResourceServer interface {
	SendAndClose(*AnsNodeResourceUpload) error
	Recv() (*ReqNodeResourceUpload, error)
	grpc.ServerStream
}

type rpcEngineUploadNodeResourceServer struct {
	grpc.ServerStream
}

func (x *rpcEngineUploadNodeResourceServer) SendAndClose(m *AnsNodeResourceUpload) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rpcEngineUploadNodeResourceServer) Recv() (*ReqNodeResourceUpload, error) {
	m := new(ReqNodeResourceUpload)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RpcEngine_DownloadNodeResource_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReqNodeResourceDownload)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RpcEngineServer).DownloadNodeResource(m, &rpcEngineDownloadNodeResourceServer{stream})
}

type RpcEngine_DownloadNodeResourceServer interface {
	Send(*AnsNodeResourceDownload) error
	grpc.ServerStream
}

type rpcEngineDownloadNodeResourceServer struct {
	grpc.ServerStream
}

func (x *rpcEngineDownloadNodeResourceServer) Send(m *AnsNodeResourceDownload) error {
	return x.ServerStream.SendMsg(m)
}

func _RpcEngine_RpcChannel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RpcEngineServer).RpcChannel(&rpcEngineRpcChannelServer{stream})
}

type RpcEngine_RpcChannelServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type rpcEngineRpcChannelServer struct {
	grpc.ServerStream
}

func (x *rpcEngineRpcChannelServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rpcEngineRpcChannelServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _RpcEngine_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protoManage.RpcEngine",
	HandlerType: (*RpcEngineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterNodeFunc",
			Handler:    _RpcEngine_RegisterNodeFunc_Handler,
		},
		{
			MethodName: "RegisterNodeReport",
			Handler:    _RpcEngine_RegisterNodeReport_Handler,
		},
		{
			MethodName: "CheckNodeResource",
			Handler:    _RpcEngine_CheckNodeResource_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadNodeResource",
			Handler:       _RpcEngine_UploadNodeResource_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadNodeResource",
			Handler:       _RpcEngine_DownloadNodeResource_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RpcChannel",
			Handler:       _RpcEngine_RpcChannel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "manage.proto",
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintManage(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Order != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.Order))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HttpMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HttpMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HttpMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintManage(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintManage(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Order != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.Order))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Base) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Base) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Base) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdateTime != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.UpdateTime))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Page) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Page) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Page) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Num != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x10
	}
	if m.Count != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Time) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Time) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Time) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EndTime != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x10
	}
	if m.BeginTime != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.BeginTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Manager) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Manager) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Manager) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x40
	}
	if m.Level != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Setting) > 0 {
		i -= len(m.Setting)
		copy(dAtA[i:], m.Setting)
		i = encodeVarintManage(dAtA, i, uint64(len(m.Setting)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintManage(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NickName) > 0 {
		i -= len(m.NickName)
		copy(dAtA[i:], m.NickName)
		i = encodeVarintManage(dAtA, i, uint64(len(m.NickName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintManage(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintManage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *TopLink) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopLink) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopLink) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintManage(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintManage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Node) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Node) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintManage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NodeFunc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeFunc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeFunc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x38
	}
	if m.Level != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Schema) > 0 {
		i -= len(m.Schema)
		copy(dAtA[i:], m.Schema)
		i = encodeVarintManage(dAtA, i, uint64(len(m.Schema)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Func) > 0 {
		i -= len(m.Func)
		copy(dAtA[i:], m.Func)
		i = encodeVarintManage(dAtA, i, uint64(len(m.Func)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintManage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.NodeID != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.NodeID))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NodeFuncCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeFuncCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeFuncCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x38
	}
	if m.ReturnType != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.ReturnType))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ReturnVal) > 0 {
		i -= len(m.ReturnVal)
		copy(dAtA[i:], m.ReturnVal)
		i = encodeVarintManage(dAtA, i, uint64(len(m.ReturnVal)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Parameter) > 0 {
		i -= len(m.Parameter)
		copy(dAtA[i:], m.Parameter)
		i = encodeVarintManage(dAtA, i, uint64(len(m.Parameter)))
		i--
		dAtA[i] = 0x22
	}
	if m.FuncID != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.FuncID))
		i--
		dAtA[i] = 0x18
	}
	if m.ManagerID != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.ManagerID))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NodeReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x48
	}
	if m.Level != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x40
	}
	if m.Interval != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.Interval))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Schema) > 0 {
		i -= len(m.Schema)
		copy(dAtA[i:], m.Schema)
		i = encodeVarintManage(dAtA, i, uint64(len(m.Schema)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Func) > 0 {
		i -= len(m.Func)
		copy(dAtA[i:], m.Func)
		i = encodeVarintManage(dAtA, i, uint64(len(m.Func)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Type != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintManage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.NodeID != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.NodeID))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NodeReportVal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeReportVal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeReportVal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintManage(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ReportID != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.ReportID))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NodeNotify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeNotify) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeNotify) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ShowPop {
		i--
		if m.ShowPop {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.State != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintManage(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x22
	}
	if m.SenderType != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.SenderType))
		i--
		dAtA[i] = 0x18
	}
	if m.SenderID != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.SenderID))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NodeResource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeResource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeResource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsExist {
		i--
		if m.IsExist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Type != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x28
	}
	if m.Sizes != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.Sizes))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Md5) > 0 {
		i -= len(m.Md5)
		copy(dAtA[i:], m.Md5)
		i = encodeVarintManage(dAtA, i, uint64(len(m.Md5)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintManage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UUID) > 0 {
		i -= len(m.UUID)
		copy(dAtA[i:], m.UUID)
		i = encodeVarintManage(dAtA, i, uint64(len(m.UUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqNodeLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqNodeLogin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqNodeLogin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.Node.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ReqNodeOnline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqNodeOnline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqNodeOnline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.Node.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ReqTopLinkList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqTopLinkList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqTopLinkList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *AnsTopLinkList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnsTopLinkList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnsTopLinkList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TopLinkList) > 0 {
		for iNdEx := len(m.TopLinkList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TopLinkList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReqManagerList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqManagerList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqManagerList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *AnsManagerList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnsManagerList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnsManagerList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ManagerList) > 0 {
		for iNdEx := len(m.ManagerList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ManagerList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReqNodeList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqNodeList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqNodeList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.Page.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.UpdateTime) > 0 {
		for iNdEx := len(m.UpdateTime) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UpdateTime[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.State) > 0 {
		dAtA13 := make([]byte, len(m.State)*10)
		var j12 int
		for _, num := range m.State {
			for num >= 1<<7 {
				dAtA13[j12] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j12++
			}
			dAtA13[j12] = uint8(num)
			j12++
		}
		i -= j12
		copy(dAtA[i:], dAtA13[:j12])
		i = encodeVarintManage(dAtA, i, uint64(j12))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		for iNdEx := len(m.Name) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Name[iNdEx])
			copy(dAtA[i:], m.Name[iNdEx])
			i = encodeVarintManage(dAtA, i, uint64(len(m.Name[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ID) > 0 {
		dAtA15 := make([]byte, len(m.ID)*10)
		var j14 int
		for _, num1 := range m.ID {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA15[j14] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j14++
			}
			dAtA15[j14] = uint8(num)
			j14++
		}
		i -= j14
		copy(dAtA[i:], dAtA15[:j14])
		i = encodeVarintManage(dAtA, i, uint64(j14))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AnsNodeList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnsNodeList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnsNodeList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NodeList) > 0 {
		for iNdEx := len(m.NodeList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Length != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqNodeFuncList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqNodeFuncList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqNodeFuncList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.Page.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.UpdateTime) > 0 {
		for iNdEx := len(m.UpdateTime) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UpdateTime[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.NodeName) > 0 {
		for iNdEx := len(m.NodeName) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.NodeName[iNdEx])
			copy(dAtA[i:], m.NodeName[iNdEx])
			i = encodeVarintManage(dAtA, i, uint64(len(m.NodeName[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.NodeID) > 0 {
		dAtA18 := make([]byte, len(m.NodeID)*10)
		var j17 int
		for _, num1 := range m.NodeID {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA18[j17] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j17++
			}
			dAtA18[j17] = uint8(num)
			j17++
		}
		i -= j17
		copy(dAtA[i:], dAtA18[:j17])
		i = encodeVarintManage(dAtA, i, uint64(j17))
		i--
		dAtA[i] = 0x2a
	}
	if m.LevelMax != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.LevelMax))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Level) > 0 {
		dAtA20 := make([]byte, len(m.Level)*10)
		var j19 int
		for _, num := range m.Level {
			for num >= 1<<7 {
				dAtA20[j19] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j19++
			}
			dAtA20[j19] = uint8(num)
			j19++
		}
		i -= j19
		copy(dAtA[i:], dAtA20[:j19])
		i = encodeVarintManage(dAtA, i, uint64(j19))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		for iNdEx := len(m.Name) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Name[iNdEx])
			copy(dAtA[i:], m.Name[iNdEx])
			i = encodeVarintManage(dAtA, i, uint64(len(m.Name[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ID) > 0 {
		dAtA22 := make([]byte, len(m.ID)*10)
		var j21 int
		for _, num1 := range m.ID {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA22[j21] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j21++
			}
			dAtA22[j21] = uint8(num)
			j21++
		}
		i -= j21
		copy(dAtA[i:], dAtA22[:j21])
		i = encodeVarintManage(dAtA, i, uint64(j21))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AnsNodeFuncList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnsNodeFuncList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnsNodeFuncList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NodeList) > 0 {
		for iNdEx := len(m.NodeList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.NodeFuncList) > 0 {
		for iNdEx := len(m.NodeFuncList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeFuncList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Length != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqNodeReportList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqNodeReportList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqNodeReportList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.Page.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.UpdateTime) > 0 {
		for iNdEx := len(m.UpdateTime) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UpdateTime[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.NodeName) > 0 {
		for iNdEx := len(m.NodeName) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.NodeName[iNdEx])
			copy(dAtA[i:], m.NodeName[iNdEx])
			i = encodeVarintManage(dAtA, i, uint64(len(m.NodeName[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.NodeID) > 0 {
		dAtA25 := make([]byte, len(m.NodeID)*10)
		var j24 int
		for _, num1 := range m.NodeID {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA25[j24] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j24++
			}
			dAtA25[j24] = uint8(num)
			j24++
		}
		i -= j24
		copy(dAtA[i:], dAtA25[:j24])
		i = encodeVarintManage(dAtA, i, uint64(j24))
		i--
		dAtA[i] = 0x2a
	}
	if m.LevelMax != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.LevelMax))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Level) > 0 {
		dAtA27 := make([]byte, len(m.Level)*10)
		var j26 int
		for _, num := range m.Level {
			for num >= 1<<7 {
				dAtA27[j26] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j26++
			}
			dAtA27[j26] = uint8(num)
			j26++
		}
		i -= j26
		copy(dAtA[i:], dAtA27[:j26])
		i = encodeVarintManage(dAtA, i, uint64(j26))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		for iNdEx := len(m.Name) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Name[iNdEx])
			copy(dAtA[i:], m.Name[iNdEx])
			i = encodeVarintManage(dAtA, i, uint64(len(m.Name[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ID) > 0 {
		dAtA29 := make([]byte, len(m.ID)*10)
		var j28 int
		for _, num1 := range m.ID {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA29[j28] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j28++
			}
			dAtA29[j28] = uint8(num)
			j28++
		}
		i -= j28
		copy(dAtA[i:], dAtA29[:j28])
		i = encodeVarintManage(dAtA, i, uint64(j28))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AnsNodeReportList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnsNodeReportList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnsNodeReportList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NodeList) > 0 {
		for iNdEx := len(m.NodeList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.NodeReportList) > 0 {
		for iNdEx := len(m.NodeReportList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeReportList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Length != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqNodeFuncCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqNodeFuncCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqNodeFuncCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.NodeFuncCall.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AnsNodeFuncCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnsNodeFuncCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnsNodeFuncCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintManage(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.NodeFuncCall.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ReqNodeFuncCallList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqNodeFuncCallList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqNodeFuncCallList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.Page.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.FuncID != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.FuncID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AnsNodeFuncCallList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnsNodeFuncCallList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnsNodeFuncCallList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NodeFuncCallList) > 0 {
		for iNdEx := len(m.NodeFuncCallList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeFuncCallList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReqNodeReportValList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqNodeReportValList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqNodeReportValList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.Page.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.ReportID != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.ReportID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AnsNodeReportValList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnsNodeReportValList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnsNodeReportValList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NodeReportValList) > 0 {
		for iNdEx := len(m.NodeReportValList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeReportValList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReqNodeNotifyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqNodeNotifyList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqNodeNotifyList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.Page.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.SenderTime) > 0 {
		for iNdEx := len(m.SenderTime) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SenderTime[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.SenderType) > 0 {
		dAtA36 := make([]byte, len(m.SenderType)*10)
		var j35 int
		for _, num := range m.SenderType {
			for num >= 1<<7 {
				dAtA36[j35] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j35++
			}
			dAtA36[j35] = uint8(num)
			j35++
		}
		i -= j35
		copy(dAtA[i:], dAtA36[:j35])
		i = encodeVarintManage(dAtA, i, uint64(j35))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SenderName) > 0 {
		for iNdEx := len(m.SenderName) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SenderName[iNdEx])
			copy(dAtA[i:], m.SenderName[iNdEx])
			i = encodeVarintManage(dAtA, i, uint64(len(m.SenderName[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.State) > 0 {
		dAtA38 := make([]byte, len(m.State)*10)
		var j37 int
		for _, num := range m.State {
			for num >= 1<<7 {
				dAtA38[j37] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j37++
			}
			dAtA38[j37] = uint8(num)
			j37++
		}
		i -= j37
		copy(dAtA[i:], dAtA38[:j37])
		i = encodeVarintManage(dAtA, i, uint64(j37))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Message) > 0 {
		for iNdEx := len(m.Message) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Message[iNdEx])
			copy(dAtA[i:], m.Message[iNdEx])
			i = encodeVarintManage(dAtA, i, uint64(len(m.Message[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AnsNodeNotifyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnsNodeNotifyList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnsNodeNotifyList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NodeList) > 0 {
		for iNdEx := len(m.NodeList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.NodeNotifyList) > 0 {
		for iNdEx := len(m.NodeNotifyList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeNotifyList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Length != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqNodeResourceUpload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqNodeResourceUpload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqNodeResourceUpload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintManage(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AnsNodeResourceUpload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnsNodeResourceUpload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnsNodeResourceUpload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.NodeResource.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ReqNodeResourceDownload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqNodeResourceDownload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqNodeResourceDownload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.NodeResource.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AnsNodeResourceDownload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnsNodeResourceDownload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnsNodeResourceDownload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintManage(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqNodeTest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqNodeTest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqNodeTest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintManage(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AnsNodeTest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnsNodeTest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnsNodeTest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func encodeVarintManage(dAtA []byte, offset int, v uint64) int {
	offset -= sovManage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Order != 0 {
		n += 1 + sovManage(uint64(m.Order))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HttpMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Order != 0 {
		n += 1 + sovManage(uint64(m.Order))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Base) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovManage(uint64(m.ID))
	}
	if m.UpdateTime != 0 {
		n += 1 + sovManage(uint64(m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Page) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovManage(uint64(m.Count))
	}
	if m.Num != 0 {
		n += 1 + sovManage(uint64(m.Num))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Time) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BeginTime != 0 {
		n += 1 + sovManage(uint64(m.BeginTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovManage(uint64(m.EndTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Manager) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Base.Size()
	n += 1 + l + sovManage(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	l = len(m.Setting)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovManage(uint64(m.Level))
	}
	if m.State != 0 {
		n += 1 + sovManage(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopLink) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Base.Size()
	n += 1 + l + sovManage(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovManage(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Node) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Base.Size()
	n += 1 + l + sovManage(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovManage(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeFunc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Base.Size()
	n += 1 + l + sovManage(uint64(l))
	if m.NodeID != 0 {
		n += 1 + sovManage(uint64(m.NodeID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	l = len(m.Func)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	l = len(m.Schema)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovManage(uint64(m.Level))
	}
	if m.State != 0 {
		n += 1 + sovManage(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeFuncCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Base.Size()
	n += 1 + l + sovManage(uint64(l))
	if m.ManagerID != 0 {
		n += 1 + sovManage(uint64(m.ManagerID))
	}
	if m.FuncID != 0 {
		n += 1 + sovManage(uint64(m.FuncID))
	}
	l = len(m.Parameter)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	l = len(m.ReturnVal)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	if m.ReturnType != 0 {
		n += 1 + sovManage(uint64(m.ReturnType))
	}
	if m.State != 0 {
		n += 1 + sovManage(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Base.Size()
	n += 1 + l + sovManage(uint64(l))
	if m.NodeID != 0 {
		n += 1 + sovManage(uint64(m.NodeID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovManage(uint64(m.Type))
	}
	l = len(m.Func)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	l = len(m.Schema)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	if m.Interval != 0 {
		n += 1 + sovManage(uint64(m.Interval))
	}
	if m.Level != 0 {
		n += 1 + sovManage(uint64(m.Level))
	}
	if m.State != 0 {
		n += 1 + sovManage(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeReportVal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Base.Size()
	n += 1 + l + sovManage(uint64(l))
	if m.ReportID != 0 {
		n += 1 + sovManage(uint64(m.ReportID))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovManage(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeNotify) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Base.Size()
	n += 1 + l + sovManage(uint64(l))
	if m.SenderID != 0 {
		n += 1 + sovManage(uint64(m.SenderID))
	}
	if m.SenderType != 0 {
		n += 1 + sovManage(uint64(m.SenderType))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovManage(uint64(m.State))
	}
	if m.ShowPop {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeResource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	l = len(m.Md5)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	if m.Sizes != 0 {
		n += 1 + sovManage(uint64(m.Sizes))
	}
	if m.Type != 0 {
		n += 1 + sovManage(uint64(m.Type))
	}
	if m.IsExist {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqNodeLogin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Node.Size()
	n += 1 + l + sovManage(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqNodeOnline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Node.Size()
	n += 1 + l + sovManage(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqTopLinkList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnsTopLinkList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TopLinkList) > 0 {
		for _, e := range m.TopLinkList {
			l = e.Size()
			n += 1 + l + sovManage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqManagerList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnsManagerList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ManagerList) > 0 {
		for _, e := range m.ManagerList {
			l = e.Size()
			n += 1 + l + sovManage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqNodeList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ID) > 0 {
		l = 0
		for _, e := range m.ID {
			l += sovManage(uint64(e))
		}
		n += 1 + sovManage(uint64(l)) + l
	}
	if len(m.Name) > 0 {
		for _, s := range m.Name {
			l = len(s)
			n += 1 + l + sovManage(uint64(l))
		}
	}
	if len(m.State) > 0 {
		l = 0
		for _, e := range m.State {
			l += sovManage(uint64(e))
		}
		n += 1 + sovManage(uint64(l)) + l
	}
	if len(m.UpdateTime) > 0 {
		for _, e := range m.UpdateTime {
			l = e.Size()
			n += 1 + l + sovManage(uint64(l))
		}
	}
	l = m.Page.Size()
	n += 1 + l + sovManage(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnsNodeList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Length != 0 {
		n += 1 + sovManage(uint64(m.Length))
	}
	if len(m.NodeList) > 0 {
		for _, e := range m.NodeList {
			l = e.Size()
			n += 1 + l + sovManage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqNodeFuncList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ID) > 0 {
		l = 0
		for _, e := range m.ID {
			l += sovManage(uint64(e))
		}
		n += 1 + sovManage(uint64(l)) + l
	}
	if len(m.Name) > 0 {
		for _, s := range m.Name {
			l = len(s)
			n += 1 + l + sovManage(uint64(l))
		}
	}
	if len(m.Level) > 0 {
		l = 0
		for _, e := range m.Level {
			l += sovManage(uint64(e))
		}
		n += 1 + sovManage(uint64(l)) + l
	}
	if m.LevelMax != 0 {
		n += 1 + sovManage(uint64(m.LevelMax))
	}
	if len(m.NodeID) > 0 {
		l = 0
		for _, e := range m.NodeID {
			l += sovManage(uint64(e))
		}
		n += 1 + sovManage(uint64(l)) + l
	}
	if len(m.NodeName) > 0 {
		for _, s := range m.NodeName {
			l = len(s)
			n += 1 + l + sovManage(uint64(l))
		}
	}
	if len(m.UpdateTime) > 0 {
		for _, e := range m.UpdateTime {
			l = e.Size()
			n += 1 + l + sovManage(uint64(l))
		}
	}
	l = m.Page.Size()
	n += 1 + l + sovManage(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnsNodeFuncList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Length != 0 {
		n += 1 + sovManage(uint64(m.Length))
	}
	if len(m.NodeFuncList) > 0 {
		for _, e := range m.NodeFuncList {
			l = e.Size()
			n += 1 + l + sovManage(uint64(l))
		}
	}
	if len(m.NodeList) > 0 {
		for _, e := range m.NodeList {
			l = e.Size()
			n += 1 + l + sovManage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqNodeReportList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ID) > 0 {
		l = 0
		for _, e := range m.ID {
			l += sovManage(uint64(e))
		}
		n += 1 + sovManage(uint64(l)) + l
	}
	if len(m.Name) > 0 {
		for _, s := range m.Name {
			l = len(s)
			n += 1 + l + sovManage(uint64(l))
		}
	}
	if len(m.Level) > 0 {
		l = 0
		for _, e := range m.Level {
			l += sovManage(uint64(e))
		}
		n += 1 + sovManage(uint64(l)) + l
	}
	if m.LevelMax != 0 {
		n += 1 + sovManage(uint64(m.LevelMax))
	}
	if len(m.NodeID) > 0 {
		l = 0
		for _, e := range m.NodeID {
			l += sovManage(uint64(e))
		}
		n += 1 + sovManage(uint64(l)) + l
	}
	if len(m.NodeName) > 0 {
		for _, s := range m.NodeName {
			l = len(s)
			n += 1 + l + sovManage(uint64(l))
		}
	}
	if len(m.UpdateTime) > 0 {
		for _, e := range m.UpdateTime {
			l = e.Size()
			n += 1 + l + sovManage(uint64(l))
		}
	}
	l = m.Page.Size()
	n += 1 + l + sovManage(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnsNodeReportList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Length != 0 {
		n += 1 + sovManage(uint64(m.Length))
	}
	if len(m.NodeReportList) > 0 {
		for _, e := range m.NodeReportList {
			l = e.Size()
			n += 1 + l + sovManage(uint64(l))
		}
	}
	if len(m.NodeList) > 0 {
		for _, e := range m.NodeList {
			l = e.Size()
			n += 1 + l + sovManage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqNodeFuncCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NodeFuncCall.Size()
	n += 1 + l + sovManage(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnsNodeFuncCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NodeFuncCall.Size()
	n += 1 + l + sovManage(uint64(l))
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqNodeFuncCallList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FuncID != 0 {
		n += 1 + sovManage(uint64(m.FuncID))
	}
	l = m.Page.Size()
	n += 1 + l + sovManage(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnsNodeFuncCallList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NodeFuncCallList) > 0 {
		for _, e := range m.NodeFuncCallList {
			l = e.Size()
			n += 1 + l + sovManage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqNodeReportValList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovManage(uint64(m.ID))
	}
	if m.ReportID != 0 {
		n += 1 + sovManage(uint64(m.ReportID))
	}
	l = m.Page.Size()
	n += 1 + l + sovManage(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnsNodeReportValList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NodeReportValList) > 0 {
		for _, e := range m.NodeReportValList {
			l = e.Size()
			n += 1 + l + sovManage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqNodeNotifyList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Message) > 0 {
		for _, s := range m.Message {
			l = len(s)
			n += 1 + l + sovManage(uint64(l))
		}
	}
	if len(m.State) > 0 {
		l = 0
		for _, e := range m.State {
			l += sovManage(uint64(e))
		}
		n += 1 + sovManage(uint64(l)) + l
	}
	if len(m.SenderName) > 0 {
		for _, s := range m.SenderName {
			l = len(s)
			n += 1 + l + sovManage(uint64(l))
		}
	}
	if len(m.SenderType) > 0 {
		l = 0
		for _, e := range m.SenderType {
			l += sovManage(uint64(e))
		}
		n += 1 + sovManage(uint64(l)) + l
	}
	if len(m.SenderTime) > 0 {
		for _, e := range m.SenderTime {
			l = e.Size()
			n += 1 + l + sovManage(uint64(l))
		}
	}
	l = m.Page.Size()
	n += 1 + l + sovManage(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnsNodeNotifyList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Length != 0 {
		n += 1 + sovManage(uint64(m.Length))
	}
	if len(m.NodeNotifyList) > 0 {
		for _, e := range m.NodeNotifyList {
			l = e.Size()
			n += 1 + l + sovManage(uint64(l))
		}
	}
	if len(m.NodeList) > 0 {
		for _, e := range m.NodeList {
			l = e.Size()
			n += 1 + l + sovManage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqNodeResourceUpload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnsNodeResourceUpload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NodeResource.Size()
	n += 1 + l + sovManage(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqNodeResourceDownload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NodeResource.Size()
	n += 1 + l + sovManage(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnsNodeResourceDownload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqNodeTest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovManage(uint64(m.ID))
	}
	if m.Type != 0 {
		n += 1 + sovManage(uint64(m.Type))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovManage(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnsNodeTest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovManage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozManage(x uint64) (n int) {
	return sovManage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= Order(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message[:0], dAtA[iNdEx:postIndex]...)
			if m.Message == nil {
				m.Message = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HttpMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HttpMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HttpMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= Order(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message[:0], dAtA[iNdEx:postIndex]...)
			if m.Message == nil {
				m.Message = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Base) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Base: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Base: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			m.UpdateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Page) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Page: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Page: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Time) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Time: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Time: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginTime", wireType)
			}
			m.BeginTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeginTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Manager) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Manager: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Manager: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Setting", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Setting = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= Level(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopLink) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopLink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopLink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeFunc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeFunc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeFunc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Func", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Func = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schema = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= Level(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeFuncCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeFuncCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeFuncCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagerID", wireType)
			}
			m.ManagerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ManagerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FuncID", wireType)
			}
			m.FuncID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FuncID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parameter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnVal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnVal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnType", wireType)
			}
			m.ReturnType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReturnType |= NodeFuncReturnType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= NodeReportType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Func", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Func = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schema = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= Level(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeReportVal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeReportVal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeReportVal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportID", wireType)
			}
			m.ReportID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReportID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeNotify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeNotify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeNotify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderID", wireType)
			}
			m.SenderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderType", wireType)
			}
			m.SenderType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderType |= NotifySenderType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowPop", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowPop = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeResource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeResource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeResource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Md5", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Md5 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sizes", wireType)
			}
			m.Sizes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sizes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= NodeResourceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsExist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsExist = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqNodeLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqNodeLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqNodeLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Node.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqNodeOnline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqNodeOnline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqNodeOnline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Node.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqTopLinkList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqTopLinkList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqTopLinkList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnsTopLinkList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnsTopLinkList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnsTopLinkList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopLinkList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopLinkList = append(m.TopLinkList, TopLink{})
			if err := m.TopLinkList[len(m.TopLinkList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqManagerList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqManagerList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqManagerList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnsManagerList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnsManagerList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnsManagerList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagerList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManagerList = append(m.ManagerList, Manager{})
			if err := m.ManagerList[len(m.ManagerList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqNodeList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqNodeList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqNodeList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowManage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ID = append(m.ID, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowManage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthManage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthManage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ID) == 0 {
					m.ID = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowManage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ID = append(m.ID, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = append(m.Name, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v State
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowManage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= State(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.State = append(m.State, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowManage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthManage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthManage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.State) == 0 {
					m.State = make([]State, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v State
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowManage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= State(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.State = append(m.State, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateTime = append(m.UpdateTime, Time{})
			if err := m.UpdateTime[len(m.UpdateTime)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnsNodeList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnsNodeList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnsNodeList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeList = append(m.NodeList, Node{})
			if err := m.NodeList[len(m.NodeList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqNodeFuncList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqNodeFuncList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqNodeFuncList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowManage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ID = append(m.ID, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowManage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthManage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthManage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ID) == 0 {
					m.ID = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowManage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ID = append(m.ID, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = append(m.Name, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v Level
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowManage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Level(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Level = append(m.Level, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowManage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthManage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthManage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Level) == 0 {
					m.Level = make([]Level, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Level
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowManage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Level(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Level = append(m.Level, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelMax", wireType)
			}
			m.LevelMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LevelMax |= Level(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowManage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NodeID = append(m.NodeID, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowManage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthManage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthManage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.NodeID) == 0 {
					m.NodeID = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowManage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NodeID = append(m.NodeID, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeName = append(m.NodeName, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateTime = append(m.UpdateTime, Time{})
			if err := m.UpdateTime[len(m.UpdateTime)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnsNodeFuncList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnsNodeFuncList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnsNodeFuncList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeFuncList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeFuncList = append(m.NodeFuncList, NodeFunc{})
			if err := m.NodeFuncList[len(m.NodeFuncList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeList = append(m.NodeList, Node{})
			if err := m.NodeList[len(m.NodeList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqNodeReportList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqNodeReportList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqNodeReportList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowManage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ID = append(m.ID, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowManage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthManage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthManage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ID) == 0 {
					m.ID = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowManage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ID = append(m.ID, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = append(m.Name, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v Level
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowManage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Level(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Level = append(m.Level, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowManage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthManage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthManage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Level) == 0 {
					m.Level = make([]Level, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Level
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowManage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Level(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Level = append(m.Level, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelMax", wireType)
			}
			m.LevelMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LevelMax |= Level(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowManage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NodeID = append(m.NodeID, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowManage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthManage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthManage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.NodeID) == 0 {
					m.NodeID = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowManage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NodeID = append(m.NodeID, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeName = append(m.NodeName, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateTime = append(m.UpdateTime, Time{})
			if err := m.UpdateTime[len(m.UpdateTime)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnsNodeReportList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnsNodeReportList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnsNodeReportList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeReportList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeReportList = append(m.NodeReportList, NodeReport{})
			if err := m.NodeReportList[len(m.NodeReportList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeList = append(m.NodeList, Node{})
			if err := m.NodeList[len(m.NodeList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqNodeFuncCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqNodeFuncCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqNodeFuncCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeFuncCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NodeFuncCall.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnsNodeFuncCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnsNodeFuncCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnsNodeFuncCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeFuncCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NodeFuncCall.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqNodeFuncCallList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqNodeFuncCallList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqNodeFuncCallList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FuncID", wireType)
			}
			m.FuncID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FuncID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnsNodeFuncCallList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnsNodeFuncCallList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnsNodeFuncCallList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeFuncCallList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeFuncCallList = append(m.NodeFuncCallList, NodeFuncCall{})
			if err := m.NodeFuncCallList[len(m.NodeFuncCallList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqNodeReportValList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqNodeReportValList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqNodeReportValList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportID", wireType)
			}
			m.ReportID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReportID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnsNodeReportValList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnsNodeReportValList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnsNodeReportValList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeReportValList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeReportValList = append(m.NodeReportValList, NodeReportVal{})
			if err := m.NodeReportValList[len(m.NodeReportValList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqNodeNotifyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqNodeNotifyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqNodeNotifyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v State
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowManage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= State(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.State = append(m.State, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowManage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthManage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthManage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.State) == 0 {
					m.State = make([]State, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v State
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowManage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= State(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.State = append(m.State, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderName = append(m.SenderName, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v NotifySenderType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowManage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= NotifySenderType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SenderType = append(m.SenderType, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowManage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthManage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthManage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.SenderType) == 0 {
					m.SenderType = make([]NotifySenderType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v NotifySenderType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowManage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= NotifySenderType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SenderType = append(m.SenderType, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderType", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderTime = append(m.SenderTime, Time{})
			if err := m.SenderTime[len(m.SenderTime)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnsNodeNotifyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnsNodeNotifyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnsNodeNotifyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeNotifyList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeNotifyList = append(m.NodeNotifyList, NodeNotify{})
			if err := m.NodeNotifyList[len(m.NodeNotifyList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeList = append(m.NodeList, Node{})
			if err := m.NodeList[len(m.NodeList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqNodeResourceUpload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqNodeResourceUpload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqNodeResourceUpload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnsNodeResourceUpload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnsNodeResourceUpload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnsNodeResourceUpload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeResource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NodeResource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqNodeResourceDownload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqNodeResourceDownload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqNodeResourceDownload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeResource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NodeResource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnsNodeResourceDownload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnsNodeResourceDownload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnsNodeResourceDownload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqNodeTest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqNodeTest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqNodeTest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnsNodeTest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnsNodeTest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnsNodeTest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipManage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowManage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowManage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowManage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthManage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupManage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthManage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthManage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowManage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupManage = fmt.Errorf("proto: unexpected end of group")
)
