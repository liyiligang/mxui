// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: manage.proto

package protoManage

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Order int32

const (
	Order_Unknow Order = 0
	//其他
	Order_TopLinkFind     Order = 1
	Order_TopLinkFindByID Order = 2
	Order_TopLinkAdd      Order = 3
	Order_TopLinkDel      Order = 4
	Order_TopLinkUpdate   Order = 5
	Order_NodeTest        Order = 6
	//管理员
	Order_ManagerLogin          Order = 101
	Order_ManagerAdd            Order = 102
	Order_ManagerFind           Order = 103
	Order_ManagerFindByID       Order = 104
	Order_ManagerUpdatePassword Order = 105
	Order_ManagerUpdateSetting  Order = 106
	//节点组
	Order_NodeGroupAdd      Order = 201
	Order_NodeGroupDel      Order = 202
	Order_NodeGroupFind     Order = 203
	Order_NodeGroupFindByID Order = 204
	//节点类型
	Order_NodeTypeAdd      Order = 301
	Order_NodeTypeDel      Order = 302
	Order_NodeTypeFind     Order = 303
	Order_NodeTypeFindByID Order = 304
	//节点
	Order_NodeAdd         Order = 401
	Order_NodeDel         Order = 402
	Order_NodeUpdateState Order = 403
	Order_NodeFind        Order = 404
	Order_NodeFindByID    Order = 405
	//节点连接
	Order_NodeLinkAdd              Order = 501
	Order_NodeLinkDel              Order = 502
	Order_NodeLinkDelAllWithNodeID Order = 503
	Order_NodeLinkUpdateState      Order = 504
	Order_NodeLinkFind             Order = 505
	Order_NodeLinkFindByID         Order = 506
	//节点方法
	Order_NodeFuncAdd              Order = 601
	Order_NodeFuncDel              Order = 602
	Order_NodeFuncDelAllWithNodeID Order = 603
	Order_NodeFuncUpdateDesc       Order = 604
	Order_NodeFuncUpdatePara       Order = 605
	Order_NodeFuncFind             Order = 606
	Order_NodeFuncFindByID         Order = 607
	Order_NodeFuncCallReq          Order = 608
	Order_NodeFuncCallAns          Order = 609
	Order_NodeFuncCallFind         Order = 611
	Order_NodeFuncCallFindByID     Order = 610
	//节点报告
	Order_NodeReportAdd              Order = 701
	Order_NodeReportDel              Order = 702
	Order_NodeReportDelAllWithNodeID Order = 703
	Order_NodeReportUpdateVal        Order = 704
	Order_NodeReportFind             Order = 705
	Order_NodeReportFindByID         Order = 706
	Order_NodeReportValFind          Order = 707
	//节点通知
	Order_NodeNotifyAdd   Order = 801
	Order_NodeNotifyFind  Order = 802
	Order_NodeNotifyError Order = 803
)

var Order_name = map[int32]string{
	0:   "Unknow",
	1:   "TopLinkFind",
	2:   "TopLinkFindByID",
	3:   "TopLinkAdd",
	4:   "TopLinkDel",
	5:   "TopLinkUpdate",
	6:   "NodeTest",
	101: "ManagerLogin",
	102: "ManagerAdd",
	103: "ManagerFind",
	104: "ManagerFindByID",
	105: "ManagerUpdatePassword",
	106: "ManagerUpdateSetting",
	201: "NodeGroupAdd",
	202: "NodeGroupDel",
	203: "NodeGroupFind",
	204: "NodeGroupFindByID",
	301: "NodeTypeAdd",
	302: "NodeTypeDel",
	303: "NodeTypeFind",
	304: "NodeTypeFindByID",
	401: "NodeAdd",
	402: "NodeDel",
	403: "NodeUpdateState",
	404: "NodeFind",
	405: "NodeFindByID",
	501: "NodeLinkAdd",
	502: "NodeLinkDel",
	503: "NodeLinkDelAllWithNodeID",
	504: "NodeLinkUpdateState",
	505: "NodeLinkFind",
	506: "NodeLinkFindByID",
	601: "NodeFuncAdd",
	602: "NodeFuncDel",
	603: "NodeFuncDelAllWithNodeID",
	604: "NodeFuncUpdateDesc",
	605: "NodeFuncUpdatePara",
	606: "NodeFuncFind",
	607: "NodeFuncFindByID",
	608: "NodeFuncCallReq",
	609: "NodeFuncCallAns",
	611: "NodeFuncCallFind",
	610: "NodeFuncCallFindByID",
	701: "NodeReportAdd",
	702: "NodeReportDel",
	703: "NodeReportDelAllWithNodeID",
	704: "NodeReportUpdateVal",
	705: "NodeReportFind",
	706: "NodeReportFindByID",
	707: "NodeReportValFind",
	801: "NodeNotifyAdd",
	802: "NodeNotifyFind",
	803: "NodeNotifyError",
}

var Order_value = map[string]int32{
	"Unknow":                     0,
	"TopLinkFind":                1,
	"TopLinkFindByID":            2,
	"TopLinkAdd":                 3,
	"TopLinkDel":                 4,
	"TopLinkUpdate":              5,
	"NodeTest":                   6,
	"ManagerLogin":               101,
	"ManagerAdd":                 102,
	"ManagerFind":                103,
	"ManagerFindByID":            104,
	"ManagerUpdatePassword":      105,
	"ManagerUpdateSetting":       106,
	"NodeGroupAdd":               201,
	"NodeGroupDel":               202,
	"NodeGroupFind":              203,
	"NodeGroupFindByID":          204,
	"NodeTypeAdd":                301,
	"NodeTypeDel":                302,
	"NodeTypeFind":               303,
	"NodeTypeFindByID":           304,
	"NodeAdd":                    401,
	"NodeDel":                    402,
	"NodeUpdateState":            403,
	"NodeFind":                   404,
	"NodeFindByID":               405,
	"NodeLinkAdd":                501,
	"NodeLinkDel":                502,
	"NodeLinkDelAllWithNodeID":   503,
	"NodeLinkUpdateState":        504,
	"NodeLinkFind":               505,
	"NodeLinkFindByID":           506,
	"NodeFuncAdd":                601,
	"NodeFuncDel":                602,
	"NodeFuncDelAllWithNodeID":   603,
	"NodeFuncUpdateDesc":         604,
	"NodeFuncUpdatePara":         605,
	"NodeFuncFind":               606,
	"NodeFuncFindByID":           607,
	"NodeFuncCallReq":            608,
	"NodeFuncCallAns":            609,
	"NodeFuncCallFind":           611,
	"NodeFuncCallFindByID":       610,
	"NodeReportAdd":              701,
	"NodeReportDel":              702,
	"NodeReportDelAllWithNodeID": 703,
	"NodeReportUpdateVal":        704,
	"NodeReportFind":             705,
	"NodeReportFindByID":         706,
	"NodeReportValFind":          707,
	"NodeNotifyAdd":              801,
	"NodeNotifyFind":             802,
	"NodeNotifyError":            803,
}

func (x Order) String() string {
	return proto.EnumName(Order_name, int32(x))
}

func (Order) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{0}
}

type State int32

const (
	State_StateNot    State = 0
	State_StateUnknow State = 1
	State_StateNormal State = 2
	State_StateWarn   State = 3
	State_StateError  State = 4
)

var State_name = map[int32]string{
	0: "StateNot",
	1: "StateUnknow",
	2: "StateNormal",
	3: "StateWarn",
	4: "StateError",
}

var State_value = map[string]int32{
	"StateNot":    0,
	"StateUnknow": 1,
	"StateNormal": 2,
	"StateWarn":   3,
	"StateError":  4,
}

func (x State) String() string {
	return proto.EnumName(State_name, int32(x))
}

func (State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{1}
}

type NotifySenderType int32

const (
	NotifySenderType_NotifySenderTypeUnknow NotifySenderType = 0
	NotifySenderType_NotifySenderTypeUser   NotifySenderType = 1
	NotifySenderType_NotifySenderTypeNode   NotifySenderType = 2
)

var NotifySenderType_name = map[int32]string{
	0: "NotifySenderTypeUnknow",
	1: "NotifySenderTypeUser",
	2: "NotifySenderTypeNode",
}

var NotifySenderType_value = map[string]int32{
	"NotifySenderTypeUnknow": 0,
	"NotifySenderTypeUser":   1,
	"NotifySenderTypeNode":   2,
}

func (x NotifySenderType) String() string {
	return proto.EnumName(NotifySenderType_name, int32(x))
}

func (NotifySenderType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{2}
}

type HttpError int32

const (
	HttpError_HttpErrorNull      HttpError = 0
	HttpError_HttpErrorMarshal   HttpError = 601
	HttpError_HttpErrorUnmarshal HttpError = 602
	HttpError_HttpErrorRegister  HttpError = 603
	HttpError_HttpErrorLogin     HttpError = 604
	HttpError_HttpErrorRequest   HttpError = 605
)

var HttpError_name = map[int32]string{
	0:   "HttpErrorNull",
	601: "HttpErrorMarshal",
	602: "HttpErrorUnmarshal",
	603: "HttpErrorRegister",
	604: "HttpErrorLogin",
	605: "HttpErrorRequest",
}

var HttpError_value = map[string]int32{
	"HttpErrorNull":      0,
	"HttpErrorMarshal":   601,
	"HttpErrorUnmarshal": 602,
	"HttpErrorRegister":  603,
	"HttpErrorLogin":     604,
	"HttpErrorRequest":   605,
}

func (x HttpError) String() string {
	return proto.EnumName(HttpError_name, int32(x))
}

func (HttpError) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{3}
}

//*******************消息包*****************
type Message struct {
	Order                Order    `protobuf:"varint,1,opt,name=order,proto3,enum=protoManage.Order" json:"order,omitempty"`
	Message              []byte   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{0}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetOrder() Order {
	if m != nil {
		return m.Order
	}
	return Order_Unknow
}

func (m *Message) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

type HttpMessage struct {
	Order                Order    `protobuf:"varint,1,opt,name=order,proto3,enum=protoManage.Order" json:"order,omitempty"`
	Message              []byte   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Token                string   `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HttpMessage) Reset()         { *m = HttpMessage{} }
func (m *HttpMessage) String() string { return proto.CompactTextString(m) }
func (*HttpMessage) ProtoMessage()    {}
func (*HttpMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{1}
}
func (m *HttpMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HttpMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HttpMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HttpMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpMessage.Merge(m, src)
}
func (m *HttpMessage) XXX_Size() int {
	return m.Size()
}
func (m *HttpMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpMessage.DiscardUnknown(m)
}

var xxx_messageInfo_HttpMessage proto.InternalMessageInfo

func (m *HttpMessage) GetOrder() Order {
	if m != nil {
		return m.Order
	}
	return Order_Unknow
}

func (m *HttpMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *HttpMessage) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

//基础数据
type Base struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	UpdateTime           int64    `protobuf:"varint,2,opt,name=UpdateTime,proto3" json:"UpdateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Base) Reset()         { *m = Base{} }
func (m *Base) String() string { return proto.CompactTextString(m) }
func (*Base) ProtoMessage()    {}
func (*Base) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{2}
}
func (m *Base) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Base) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Base.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Base) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Base.Merge(m, src)
}
func (m *Base) XXX_Size() int {
	return m.Size()
}
func (m *Base) XXX_DiscardUnknown() {
	xxx_messageInfo_Base.DiscardUnknown(m)
}

var xxx_messageInfo_Base proto.InternalMessageInfo

func (m *Base) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Base) GetUpdateTime() int64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

//状态统计数据
type StateCount struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	NotCount             int64    `protobuf:"varint,2,opt,name=NotCount,proto3" json:"NotCount,omitempty"`
	NormalCount          int64    `protobuf:"varint,3,opt,name=NormalCount,proto3" json:"NormalCount,omitempty"`
	WarnCount            int64    `protobuf:"varint,4,opt,name=WarnCount,proto3" json:"WarnCount,omitempty"`
	ErrorCount           int64    `protobuf:"varint,5,opt,name=ErrorCount,proto3" json:"ErrorCount,omitempty"`
	UnknowCount          int64    `protobuf:"varint,6,opt,name=UnknowCount,proto3" json:"UnknowCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StateCount) Reset()         { *m = StateCount{} }
func (m *StateCount) String() string { return proto.CompactTextString(m) }
func (*StateCount) ProtoMessage()    {}
func (*StateCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{3}
}
func (m *StateCount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateCount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateCount.Merge(m, src)
}
func (m *StateCount) XXX_Size() int {
	return m.Size()
}
func (m *StateCount) XXX_DiscardUnknown() {
	xxx_messageInfo_StateCount.DiscardUnknown(m)
}

var xxx_messageInfo_StateCount proto.InternalMessageInfo

func (m *StateCount) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *StateCount) GetNotCount() int64 {
	if m != nil {
		return m.NotCount
	}
	return 0
}

func (m *StateCount) GetNormalCount() int64 {
	if m != nil {
		return m.NormalCount
	}
	return 0
}

func (m *StateCount) GetWarnCount() int64 {
	if m != nil {
		return m.WarnCount
	}
	return 0
}

func (m *StateCount) GetErrorCount() int64 {
	if m != nil {
		return m.ErrorCount
	}
	return 0
}

func (m *StateCount) GetUnknowCount() int64 {
	if m != nil {
		return m.UnknowCount
	}
	return 0
}

//过滤数据
type Filter struct {
	ID                   int64            `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	GroupID              int64            `protobuf:"varint,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	TypeID               int64            `protobuf:"varint,3,opt,name=TypeID,proto3" json:"TypeID,omitempty"`
	NodeID               int64            `protobuf:"varint,4,opt,name=NodeID,proto3" json:"NodeID,omitempty"`
	SourceID             int64            `protobuf:"varint,5,opt,name=SourceID,proto3" json:"SourceID,omitempty"`
	TargetID             int64            `protobuf:"varint,6,opt,name=TargetID,proto3" json:"TargetID,omitempty"`
	FuncID               int64            `protobuf:"varint,7,opt,name=FuncID,proto3" json:"FuncID,omitempty"`
	ReportID             int64            `protobuf:"varint,8,opt,name=ReportID,proto3" json:"ReportID,omitempty"`
	Name                 string           `protobuf:"bytes,9,opt,name=Name,proto3" json:"Name,omitempty"`
	Flag                 string           `protobuf:"bytes,10,opt,name=Flag,proto3" json:"Flag,omitempty"`
	Value                string           `protobuf:"bytes,11,opt,name=Value,proto3" json:"Value,omitempty"`
	State                State            `protobuf:"varint,12,opt,name=State,proto3,enum=protoManage.State" json:"State,omitempty"`
	PageSize             int64            `protobuf:"varint,13,opt,name=PageSize,proto3" json:"PageSize,omitempty"`
	PageNum              int64            `protobuf:"varint,14,opt,name=PageNum,proto3" json:"PageNum,omitempty"`
	SenderName           string           `protobuf:"bytes,15,opt,name=SenderName,proto3" json:"SenderName,omitempty"`
	SenderType           NotifySenderType `protobuf:"varint,16,opt,name=SenderType,proto3,enum=protoManage.NotifySenderType" json:"SenderType,omitempty"`
	SenderBeginTime      int64            `protobuf:"varint,17,opt,name=SenderBeginTime,proto3" json:"SenderBeginTime,omitempty"`
	SenderEndTime        int64            `protobuf:"varint,18,opt,name=SenderEndTime,proto3" json:"SenderEndTime,omitempty"`
	Message              string           `protobuf:"bytes,19,opt,name=Message,proto3" json:"Message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Filter) Reset()         { *m = Filter{} }
func (m *Filter) String() string { return proto.CompactTextString(m) }
func (*Filter) ProtoMessage()    {}
func (*Filter) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{4}
}
func (m *Filter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Filter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Filter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Filter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Filter.Merge(m, src)
}
func (m *Filter) XXX_Size() int {
	return m.Size()
}
func (m *Filter) XXX_DiscardUnknown() {
	xxx_messageInfo_Filter.DiscardUnknown(m)
}

var xxx_messageInfo_Filter proto.InternalMessageInfo

func (m *Filter) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Filter) GetGroupID() int64 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *Filter) GetTypeID() int64 {
	if m != nil {
		return m.TypeID
	}
	return 0
}

func (m *Filter) GetNodeID() int64 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *Filter) GetSourceID() int64 {
	if m != nil {
		return m.SourceID
	}
	return 0
}

func (m *Filter) GetTargetID() int64 {
	if m != nil {
		return m.TargetID
	}
	return 0
}

func (m *Filter) GetFuncID() int64 {
	if m != nil {
		return m.FuncID
	}
	return 0
}

func (m *Filter) GetReportID() int64 {
	if m != nil {
		return m.ReportID
	}
	return 0
}

func (m *Filter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Filter) GetFlag() string {
	if m != nil {
		return m.Flag
	}
	return ""
}

func (m *Filter) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Filter) GetState() State {
	if m != nil {
		return m.State
	}
	return State_StateNot
}

func (m *Filter) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *Filter) GetPageNum() int64 {
	if m != nil {
		return m.PageNum
	}
	return 0
}

func (m *Filter) GetSenderName() string {
	if m != nil {
		return m.SenderName
	}
	return ""
}

func (m *Filter) GetSenderType() NotifySenderType {
	if m != nil {
		return m.SenderType
	}
	return NotifySenderType_NotifySenderTypeUnknow
}

func (m *Filter) GetSenderBeginTime() int64 {
	if m != nil {
		return m.SenderBeginTime
	}
	return 0
}

func (m *Filter) GetSenderEndTime() int64 {
	if m != nil {
		return m.SenderEndTime
	}
	return 0
}

func (m *Filter) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

//管理员
type Manager struct {
	Base                 Base     `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base"`
	Name                 string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Password             string   `protobuf:"bytes,3,opt,name=Password,proto3" json:"Password,omitempty"`
	NickName             string   `protobuf:"bytes,4,opt,name=NickName,proto3" json:"NickName,omitempty"`
	Token                string   `protobuf:"bytes,5,opt,name=Token,proto3" json:"Token,omitempty"`
	Setting              string   `protobuf:"bytes,6,opt,name=Setting,proto3" json:"Setting,omitempty"`
	Level                int32    `protobuf:"varint,7,opt,name=Level,proto3" json:"Level,omitempty"`
	State                State    `protobuf:"varint,8,opt,name=State,proto3,enum=protoManage.State" json:"State,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Manager) Reset()         { *m = Manager{} }
func (m *Manager) String() string { return proto.CompactTextString(m) }
func (*Manager) ProtoMessage()    {}
func (*Manager) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{5}
}
func (m *Manager) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Manager) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Manager.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Manager) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Manager.Merge(m, src)
}
func (m *Manager) XXX_Size() int {
	return m.Size()
}
func (m *Manager) XXX_DiscardUnknown() {
	xxx_messageInfo_Manager.DiscardUnknown(m)
}

var xxx_messageInfo_Manager proto.InternalMessageInfo

func (m *Manager) GetBase() Base {
	if m != nil {
		return m.Base
	}
	return Base{}
}

func (m *Manager) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Manager) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *Manager) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *Manager) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Manager) GetSetting() string {
	if m != nil {
		return m.Setting
	}
	return ""
}

func (m *Manager) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Manager) GetState() State {
	if m != nil {
		return m.State
	}
	return State_StateNot
}

//链接
type TopLink struct {
	Base                 Base     `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base"`
	Name                 string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Url                  string   `protobuf:"bytes,3,opt,name=Url,proto3" json:"Url,omitempty"`
	State                State    `protobuf:"varint,4,opt,name=State,proto3,enum=protoManage.State" json:"State,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TopLink) Reset()         { *m = TopLink{} }
func (m *TopLink) String() string { return proto.CompactTextString(m) }
func (*TopLink) ProtoMessage()    {}
func (*TopLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{6}
}
func (m *TopLink) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopLink.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopLink.Merge(m, src)
}
func (m *TopLink) XXX_Size() int {
	return m.Size()
}
func (m *TopLink) XXX_DiscardUnknown() {
	xxx_messageInfo_TopLink.DiscardUnknown(m)
}

var xxx_messageInfo_TopLink proto.InternalMessageInfo

func (m *TopLink) GetBase() Base {
	if m != nil {
		return m.Base
	}
	return Base{}
}

func (m *TopLink) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TopLink) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *TopLink) GetState() State {
	if m != nil {
		return m.State
	}
	return State_StateNot
}

//节点组
type NodeGroup struct {
	Base                 Base     `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base"`
	Name                 string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeGroup) Reset()         { *m = NodeGroup{} }
func (m *NodeGroup) String() string { return proto.CompactTextString(m) }
func (*NodeGroup) ProtoMessage()    {}
func (*NodeGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{7}
}
func (m *NodeGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeGroup.Merge(m, src)
}
func (m *NodeGroup) XXX_Size() int {
	return m.Size()
}
func (m *NodeGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeGroup.DiscardUnknown(m)
}

var xxx_messageInfo_NodeGroup proto.InternalMessageInfo

func (m *NodeGroup) GetBase() Base {
	if m != nil {
		return m.Base
	}
	return Base{}
}

func (m *NodeGroup) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

//节点类型
type NodeType struct {
	Base                 Base     `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base"`
	Name                 string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeType) Reset()         { *m = NodeType{} }
func (m *NodeType) String() string { return proto.CompactTextString(m) }
func (*NodeType) ProtoMessage()    {}
func (*NodeType) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{8}
}
func (m *NodeType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeType.Merge(m, src)
}
func (m *NodeType) XXX_Size() int {
	return m.Size()
}
func (m *NodeType) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeType.DiscardUnknown(m)
}

var xxx_messageInfo_NodeType proto.InternalMessageInfo

func (m *NodeType) GetBase() Base {
	if m != nil {
		return m.Base
	}
	return Base{}
}

func (m *NodeType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

//节点
type Node struct {
	Base                 Base     `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base"`
	GroupID              int64    `protobuf:"varint,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	TypeID               int64    `protobuf:"varint,3,opt,name=TypeID,proto3" json:"TypeID,omitempty"`
	Name                 string   `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name,omitempty"`
	State                State    `protobuf:"varint,5,opt,name=State,proto3,enum=protoManage.State" json:"State,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{9}
}
func (m *Node) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Node.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return m.Size()
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetBase() Base {
	if m != nil {
		return m.Base
	}
	return Base{}
}

func (m *Node) GetGroupID() int64 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *Node) GetTypeID() int64 {
	if m != nil {
		return m.TypeID
	}
	return 0
}

func (m *Node) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Node) GetState() State {
	if m != nil {
		return m.State
	}
	return State_StateNot
}

//节点连接
type NodeLink struct {
	Base                 Base     `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base"`
	SourceID             int64    `protobuf:"varint,2,opt,name=SourceID,proto3" json:"SourceID,omitempty"`
	TargetID             int64    `protobuf:"varint,3,opt,name=TargetID,proto3" json:"TargetID,omitempty"`
	State                State    `protobuf:"varint,4,opt,name=State,proto3,enum=protoManage.State" json:"State,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeLink) Reset()         { *m = NodeLink{} }
func (m *NodeLink) String() string { return proto.CompactTextString(m) }
func (*NodeLink) ProtoMessage()    {}
func (*NodeLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{10}
}
func (m *NodeLink) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeLink.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeLink.Merge(m, src)
}
func (m *NodeLink) XXX_Size() int {
	return m.Size()
}
func (m *NodeLink) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeLink.DiscardUnknown(m)
}

var xxx_messageInfo_NodeLink proto.InternalMessageInfo

func (m *NodeLink) GetBase() Base {
	if m != nil {
		return m.Base
	}
	return Base{}
}

func (m *NodeLink) GetSourceID() int64 {
	if m != nil {
		return m.SourceID
	}
	return 0
}

func (m *NodeLink) GetTargetID() int64 {
	if m != nil {
		return m.TargetID
	}
	return 0
}

func (m *NodeLink) GetState() State {
	if m != nil {
		return m.State
	}
	return State_StateNot
}

//节点方法
type NodeFunc struct {
	Base                 Base     `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base"`
	NodeID               int64    `protobuf:"varint,2,opt,name=NodeID,proto3" json:"NodeID,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Func                 string   `protobuf:"bytes,4,opt,name=Func,proto3" json:"Func,omitempty"`
	State                State    `protobuf:"varint,5,opt,name=State,proto3,enum=protoManage.State" json:"State,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeFunc) Reset()         { *m = NodeFunc{} }
func (m *NodeFunc) String() string { return proto.CompactTextString(m) }
func (*NodeFunc) ProtoMessage()    {}
func (*NodeFunc) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{11}
}
func (m *NodeFunc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeFunc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeFunc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeFunc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeFunc.Merge(m, src)
}
func (m *NodeFunc) XXX_Size() int {
	return m.Size()
}
func (m *NodeFunc) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeFunc.DiscardUnknown(m)
}

var xxx_messageInfo_NodeFunc proto.InternalMessageInfo

func (m *NodeFunc) GetBase() Base {
	if m != nil {
		return m.Base
	}
	return Base{}
}

func (m *NodeFunc) GetNodeID() int64 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *NodeFunc) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NodeFunc) GetFunc() string {
	if m != nil {
		return m.Func
	}
	return ""
}

func (m *NodeFunc) GetState() State {
	if m != nil {
		return m.State
	}
	return State_StateNot
}

//节点方法调用
type NodeFuncCall struct {
	Base                 Base     `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base"`
	ManagerID            int64    `protobuf:"varint,2,opt,name=ManagerID,proto3" json:"ManagerID,omitempty"`
	FuncID               int64    `protobuf:"varint,3,opt,name=FuncID,proto3" json:"FuncID,omitempty"`
	Parameter            string   `protobuf:"bytes,4,opt,name=Parameter,proto3" json:"Parameter,omitempty"`
	ReturnVal            string   `protobuf:"bytes,5,opt,name=ReturnVal,proto3" json:"ReturnVal,omitempty"`
	State                State    `protobuf:"varint,6,opt,name=State,proto3,enum=protoManage.State" json:"State,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeFuncCall) Reset()         { *m = NodeFuncCall{} }
func (m *NodeFuncCall) String() string { return proto.CompactTextString(m) }
func (*NodeFuncCall) ProtoMessage()    {}
func (*NodeFuncCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{12}
}
func (m *NodeFuncCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeFuncCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeFuncCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeFuncCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeFuncCall.Merge(m, src)
}
func (m *NodeFuncCall) XXX_Size() int {
	return m.Size()
}
func (m *NodeFuncCall) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeFuncCall.DiscardUnknown(m)
}

var xxx_messageInfo_NodeFuncCall proto.InternalMessageInfo

func (m *NodeFuncCall) GetBase() Base {
	if m != nil {
		return m.Base
	}
	return Base{}
}

func (m *NodeFuncCall) GetManagerID() int64 {
	if m != nil {
		return m.ManagerID
	}
	return 0
}

func (m *NodeFuncCall) GetFuncID() int64 {
	if m != nil {
		return m.FuncID
	}
	return 0
}

func (m *NodeFuncCall) GetParameter() string {
	if m != nil {
		return m.Parameter
	}
	return ""
}

func (m *NodeFuncCall) GetReturnVal() string {
	if m != nil {
		return m.ReturnVal
	}
	return ""
}

func (m *NodeFuncCall) GetState() State {
	if m != nil {
		return m.State
	}
	return State_StateNot
}

//节点报告
type NodeReport struct {
	Base                 Base     `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base"`
	NodeID               int64    `protobuf:"varint,2,opt,name=NodeID,proto3" json:"NodeID,omitempty"`
	Name                 string   `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name,omitempty"`
	Func                 string   `protobuf:"bytes,3,opt,name=Func,proto3" json:"Func,omitempty"`
	State                State    `protobuf:"varint,5,opt,name=State,proto3,enum=protoManage.State" json:"State,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeReport) Reset()         { *m = NodeReport{} }
func (m *NodeReport) String() string { return proto.CompactTextString(m) }
func (*NodeReport) ProtoMessage()    {}
func (*NodeReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{13}
}
func (m *NodeReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeReport.Merge(m, src)
}
func (m *NodeReport) XXX_Size() int {
	return m.Size()
}
func (m *NodeReport) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeReport.DiscardUnknown(m)
}

var xxx_messageInfo_NodeReport proto.InternalMessageInfo

func (m *NodeReport) GetBase() Base {
	if m != nil {
		return m.Base
	}
	return Base{}
}

func (m *NodeReport) GetNodeID() int64 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *NodeReport) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NodeReport) GetFunc() string {
	if m != nil {
		return m.Func
	}
	return ""
}

func (m *NodeReport) GetState() State {
	if m != nil {
		return m.State
	}
	return State_StateNot
}

//节点报告值
type NodeReportVal struct {
	Base                 Base     `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base"`
	ReportID             int64    `protobuf:"varint,2,opt,name=ReportID,proto3" json:"ReportID,omitempty"`
	Value                float64  `protobuf:"fixed64,3,opt,name=Value,proto3" json:"Value,omitempty"`
	State                State    `protobuf:"varint,4,opt,name=State,proto3,enum=protoManage.State" json:"State,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeReportVal) Reset()         { *m = NodeReportVal{} }
func (m *NodeReportVal) String() string { return proto.CompactTextString(m) }
func (*NodeReportVal) ProtoMessage()    {}
func (*NodeReportVal) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{14}
}
func (m *NodeReportVal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeReportVal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeReportVal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeReportVal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeReportVal.Merge(m, src)
}
func (m *NodeReportVal) XXX_Size() int {
	return m.Size()
}
func (m *NodeReportVal) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeReportVal.DiscardUnknown(m)
}

var xxx_messageInfo_NodeReportVal proto.InternalMessageInfo

func (m *NodeReportVal) GetBase() Base {
	if m != nil {
		return m.Base
	}
	return Base{}
}

func (m *NodeReportVal) GetReportID() int64 {
	if m != nil {
		return m.ReportID
	}
	return 0
}

func (m *NodeReportVal) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *NodeReportVal) GetState() State {
	if m != nil {
		return m.State
	}
	return State_StateNot
}

//节点通知
type NodeNotify struct {
	Base                 Base             `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base"`
	SenderID             int64            `protobuf:"varint,2,opt,name=SenderID,proto3" json:"SenderID,omitempty"`
	SenderType           NotifySenderType `protobuf:"varint,3,opt,name=SenderType,proto3,enum=protoManage.NotifySenderType" json:"SenderType,omitempty"`
	Message              string           `protobuf:"bytes,4,opt,name=Message,proto3" json:"Message,omitempty"`
	State                State            `protobuf:"varint,5,opt,name=State,proto3,enum=protoManage.State" json:"State,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *NodeNotify) Reset()         { *m = NodeNotify{} }
func (m *NodeNotify) String() string { return proto.CompactTextString(m) }
func (*NodeNotify) ProtoMessage()    {}
func (*NodeNotify) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{15}
}
func (m *NodeNotify) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeNotify) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeNotify.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeNotify) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeNotify.Merge(m, src)
}
func (m *NodeNotify) XXX_Size() int {
	return m.Size()
}
func (m *NodeNotify) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeNotify.DiscardUnknown(m)
}

var xxx_messageInfo_NodeNotify proto.InternalMessageInfo

func (m *NodeNotify) GetBase() Base {
	if m != nil {
		return m.Base
	}
	return Base{}
}

func (m *NodeNotify) GetSenderID() int64 {
	if m != nil {
		return m.SenderID
	}
	return 0
}

func (m *NodeNotify) GetSenderType() NotifySenderType {
	if m != nil {
		return m.SenderType
	}
	return NotifySenderType_NotifySenderTypeUnknow
}

func (m *NodeNotify) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *NodeNotify) GetState() State {
	if m != nil {
		return m.State
	}
	return State_StateNot
}

//请求节点登录
type ReqNodeLogin struct {
	NodeGroup            NodeGroup `protobuf:"bytes,1,opt,name=NodeGroup,proto3" json:"NodeGroup"`
	NodeType             NodeType  `protobuf:"bytes,2,opt,name=NodeType,proto3" json:"NodeType"`
	Node                 Node      `protobuf:"bytes,3,opt,name=Node,proto3" json:"Node"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ReqNodeLogin) Reset()         { *m = ReqNodeLogin{} }
func (m *ReqNodeLogin) String() string { return proto.CompactTextString(m) }
func (*ReqNodeLogin) ProtoMessage()    {}
func (*ReqNodeLogin) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{16}
}
func (m *ReqNodeLogin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqNodeLogin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqNodeLogin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqNodeLogin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqNodeLogin.Merge(m, src)
}
func (m *ReqNodeLogin) XXX_Size() int {
	return m.Size()
}
func (m *ReqNodeLogin) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqNodeLogin.DiscardUnknown(m)
}

var xxx_messageInfo_ReqNodeLogin proto.InternalMessageInfo

func (m *ReqNodeLogin) GetNodeGroup() NodeGroup {
	if m != nil {
		return m.NodeGroup
	}
	return NodeGroup{}
}

func (m *ReqNodeLogin) GetNodeType() NodeType {
	if m != nil {
		return m.NodeType
	}
	return NodeType{}
}

func (m *ReqNodeLogin) GetNode() Node {
	if m != nil {
		return m.Node
	}
	return Node{}
}

//请求节点上线
type ReqNodeOnline struct {
	Node                 Node       `protobuf:"bytes,1,opt,name=Node,proto3" json:"Node"`
	NodeLinkList         []NodeLink `protobuf:"bytes,2,rep,name=NodeLinkList,proto3" json:"NodeLinkList"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ReqNodeOnline) Reset()         { *m = ReqNodeOnline{} }
func (m *ReqNodeOnline) String() string { return proto.CompactTextString(m) }
func (*ReqNodeOnline) ProtoMessage()    {}
func (*ReqNodeOnline) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{17}
}
func (m *ReqNodeOnline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqNodeOnline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqNodeOnline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqNodeOnline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqNodeOnline.Merge(m, src)
}
func (m *ReqNodeOnline) XXX_Size() int {
	return m.Size()
}
func (m *ReqNodeOnline) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqNodeOnline.DiscardUnknown(m)
}

var xxx_messageInfo_ReqNodeOnline proto.InternalMessageInfo

func (m *ReqNodeOnline) GetNode() Node {
	if m != nil {
		return m.Node
	}
	return Node{}
}

func (m *ReqNodeOnline) GetNodeLinkList() []NodeLink {
	if m != nil {
		return m.NodeLinkList
	}
	return nil
}

//获取顶部链接列表
type ReqTopLinkList struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqTopLinkList) Reset()         { *m = ReqTopLinkList{} }
func (m *ReqTopLinkList) String() string { return proto.CompactTextString(m) }
func (*ReqTopLinkList) ProtoMessage()    {}
func (*ReqTopLinkList) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{18}
}
func (m *ReqTopLinkList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqTopLinkList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqTopLinkList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqTopLinkList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqTopLinkList.Merge(m, src)
}
func (m *ReqTopLinkList) XXX_Size() int {
	return m.Size()
}
func (m *ReqTopLinkList) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqTopLinkList.DiscardUnknown(m)
}

var xxx_messageInfo_ReqTopLinkList proto.InternalMessageInfo

type AnsTopLinkList struct {
	TopLinkList          []TopLink `protobuf:"bytes,1,rep,name=TopLinkList,proto3" json:"TopLinkList"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *AnsTopLinkList) Reset()         { *m = AnsTopLinkList{} }
func (m *AnsTopLinkList) String() string { return proto.CompactTextString(m) }
func (*AnsTopLinkList) ProtoMessage()    {}
func (*AnsTopLinkList) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{19}
}
func (m *AnsTopLinkList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnsTopLinkList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnsTopLinkList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnsTopLinkList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnsTopLinkList.Merge(m, src)
}
func (m *AnsTopLinkList) XXX_Size() int {
	return m.Size()
}
func (m *AnsTopLinkList) XXX_DiscardUnknown() {
	xxx_messageInfo_AnsTopLinkList.DiscardUnknown(m)
}

var xxx_messageInfo_AnsTopLinkList proto.InternalMessageInfo

func (m *AnsTopLinkList) GetTopLinkList() []TopLink {
	if m != nil {
		return m.TopLinkList
	}
	return nil
}

//获取管理员列表
type ReqManagerList struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqManagerList) Reset()         { *m = ReqManagerList{} }
func (m *ReqManagerList) String() string { return proto.CompactTextString(m) }
func (*ReqManagerList) ProtoMessage()    {}
func (*ReqManagerList) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{20}
}
func (m *ReqManagerList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqManagerList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqManagerList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqManagerList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqManagerList.Merge(m, src)
}
func (m *ReqManagerList) XXX_Size() int {
	return m.Size()
}
func (m *ReqManagerList) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqManagerList.DiscardUnknown(m)
}

var xxx_messageInfo_ReqManagerList proto.InternalMessageInfo

type AnsManagerList struct {
	ManagerList          []Manager `protobuf:"bytes,1,rep,name=ManagerList,proto3" json:"ManagerList"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *AnsManagerList) Reset()         { *m = AnsManagerList{} }
func (m *AnsManagerList) String() string { return proto.CompactTextString(m) }
func (*AnsManagerList) ProtoMessage()    {}
func (*AnsManagerList) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{21}
}
func (m *AnsManagerList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnsManagerList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnsManagerList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnsManagerList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnsManagerList.Merge(m, src)
}
func (m *AnsManagerList) XXX_Size() int {
	return m.Size()
}
func (m *AnsManagerList) XXX_DiscardUnknown() {
	xxx_messageInfo_AnsManagerList.DiscardUnknown(m)
}

var xxx_messageInfo_AnsManagerList proto.InternalMessageInfo

func (m *AnsManagerList) GetManagerList() []Manager {
	if m != nil {
		return m.ManagerList
	}
	return nil
}

//获取节点组列表
type ReqNodeGroupList struct {
	Filter               Filter   `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqNodeGroupList) Reset()         { *m = ReqNodeGroupList{} }
func (m *ReqNodeGroupList) String() string { return proto.CompactTextString(m) }
func (*ReqNodeGroupList) ProtoMessage()    {}
func (*ReqNodeGroupList) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{22}
}
func (m *ReqNodeGroupList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqNodeGroupList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqNodeGroupList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqNodeGroupList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqNodeGroupList.Merge(m, src)
}
func (m *ReqNodeGroupList) XXX_Size() int {
	return m.Size()
}
func (m *ReqNodeGroupList) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqNodeGroupList.DiscardUnknown(m)
}

var xxx_messageInfo_ReqNodeGroupList proto.InternalMessageInfo

func (m *ReqNodeGroupList) GetFilter() Filter {
	if m != nil {
		return m.Filter
	}
	return Filter{}
}

type AnsNodeGroupList struct {
	Length               int64        `protobuf:"varint,1,opt,name=Length,proto3" json:"Length,omitempty"`
	NodeGroupList        []NodeGroup  `protobuf:"bytes,3,rep,name=NodeGroupList,proto3" json:"NodeGroupList"`
	NodeStateCountList   []StateCount `protobuf:"bytes,2,rep,name=NodeStateCountList,proto3" json:"NodeStateCountList"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *AnsNodeGroupList) Reset()         { *m = AnsNodeGroupList{} }
func (m *AnsNodeGroupList) String() string { return proto.CompactTextString(m) }
func (*AnsNodeGroupList) ProtoMessage()    {}
func (*AnsNodeGroupList) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{23}
}
func (m *AnsNodeGroupList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnsNodeGroupList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnsNodeGroupList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnsNodeGroupList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnsNodeGroupList.Merge(m, src)
}
func (m *AnsNodeGroupList) XXX_Size() int {
	return m.Size()
}
func (m *AnsNodeGroupList) XXX_DiscardUnknown() {
	xxx_messageInfo_AnsNodeGroupList.DiscardUnknown(m)
}

var xxx_messageInfo_AnsNodeGroupList proto.InternalMessageInfo

func (m *AnsNodeGroupList) GetLength() int64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *AnsNodeGroupList) GetNodeGroupList() []NodeGroup {
	if m != nil {
		return m.NodeGroupList
	}
	return nil
}

func (m *AnsNodeGroupList) GetNodeStateCountList() []StateCount {
	if m != nil {
		return m.NodeStateCountList
	}
	return nil
}

//获取节点类型列表
type ReqNodeTypeList struct {
	Filter               Filter   `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqNodeTypeList) Reset()         { *m = ReqNodeTypeList{} }
func (m *ReqNodeTypeList) String() string { return proto.CompactTextString(m) }
func (*ReqNodeTypeList) ProtoMessage()    {}
func (*ReqNodeTypeList) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{24}
}
func (m *ReqNodeTypeList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqNodeTypeList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqNodeTypeList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqNodeTypeList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqNodeTypeList.Merge(m, src)
}
func (m *ReqNodeTypeList) XXX_Size() int {
	return m.Size()
}
func (m *ReqNodeTypeList) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqNodeTypeList.DiscardUnknown(m)
}

var xxx_messageInfo_ReqNodeTypeList proto.InternalMessageInfo

func (m *ReqNodeTypeList) GetFilter() Filter {
	if m != nil {
		return m.Filter
	}
	return Filter{}
}

type AnsNodeTypeList struct {
	Length               int64        `protobuf:"varint,1,opt,name=Length,proto3" json:"Length,omitempty"`
	NodeTypeList         []NodeType   `protobuf:"bytes,2,rep,name=NodeTypeList,proto3" json:"NodeTypeList"`
	NodeStateCountList   []StateCount `protobuf:"bytes,3,rep,name=NodeStateCountList,proto3" json:"NodeStateCountList"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *AnsNodeTypeList) Reset()         { *m = AnsNodeTypeList{} }
func (m *AnsNodeTypeList) String() string { return proto.CompactTextString(m) }
func (*AnsNodeTypeList) ProtoMessage()    {}
func (*AnsNodeTypeList) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{25}
}
func (m *AnsNodeTypeList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnsNodeTypeList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnsNodeTypeList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnsNodeTypeList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnsNodeTypeList.Merge(m, src)
}
func (m *AnsNodeTypeList) XXX_Size() int {
	return m.Size()
}
func (m *AnsNodeTypeList) XXX_DiscardUnknown() {
	xxx_messageInfo_AnsNodeTypeList.DiscardUnknown(m)
}

var xxx_messageInfo_AnsNodeTypeList proto.InternalMessageInfo

func (m *AnsNodeTypeList) GetLength() int64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *AnsNodeTypeList) GetNodeTypeList() []NodeType {
	if m != nil {
		return m.NodeTypeList
	}
	return nil
}

func (m *AnsNodeTypeList) GetNodeStateCountList() []StateCount {
	if m != nil {
		return m.NodeStateCountList
	}
	return nil
}

//获取节点列表
type ReqNodeList struct {
	Filter               Filter   `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqNodeList) Reset()         { *m = ReqNodeList{} }
func (m *ReqNodeList) String() string { return proto.CompactTextString(m) }
func (*ReqNodeList) ProtoMessage()    {}
func (*ReqNodeList) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{26}
}
func (m *ReqNodeList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqNodeList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqNodeList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqNodeList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqNodeList.Merge(m, src)
}
func (m *ReqNodeList) XXX_Size() int {
	return m.Size()
}
func (m *ReqNodeList) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqNodeList.DiscardUnknown(m)
}

var xxx_messageInfo_ReqNodeList proto.InternalMessageInfo

func (m *ReqNodeList) GetFilter() Filter {
	if m != nil {
		return m.Filter
	}
	return Filter{}
}

type AnsNodeList struct {
	Length                       int64        `protobuf:"varint,1,opt,name=Length,proto3" json:"Length,omitempty"`
	NodeList                     []Node       `protobuf:"bytes,2,rep,name=NodeList,proto3" json:"NodeList"`
	NodeGroupList                []NodeGroup  `protobuf:"bytes,3,rep,name=NodeGroupList,proto3" json:"NodeGroupList"`
	NodeTypeList                 []NodeType   `protobuf:"bytes,4,rep,name=NodeTypeList,proto3" json:"NodeTypeList"`
	NodeLinkSourceStateCountList []StateCount `protobuf:"bytes,5,rep,name=NodeLinkSourceStateCountList,proto3" json:"NodeLinkSourceStateCountList"`
	NodeLinkTargetStateCountList []StateCount `protobuf:"bytes,6,rep,name=NodeLinkTargetStateCountList,proto3" json:"NodeLinkTargetStateCountList"`
	NodeFuncStateCountList       []StateCount `protobuf:"bytes,7,rep,name=NodeFuncStateCountList,proto3" json:"NodeFuncStateCountList"`
	NodeReportStateCountList     []StateCount `protobuf:"bytes,8,rep,name=NodeReportStateCountList,proto3" json:"NodeReportStateCountList"`
	XXX_NoUnkeyedLiteral         struct{}     `json:"-"`
	XXX_unrecognized             []byte       `json:"-"`
	XXX_sizecache                int32        `json:"-"`
}

func (m *AnsNodeList) Reset()         { *m = AnsNodeList{} }
func (m *AnsNodeList) String() string { return proto.CompactTextString(m) }
func (*AnsNodeList) ProtoMessage()    {}
func (*AnsNodeList) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{27}
}
func (m *AnsNodeList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnsNodeList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnsNodeList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnsNodeList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnsNodeList.Merge(m, src)
}
func (m *AnsNodeList) XXX_Size() int {
	return m.Size()
}
func (m *AnsNodeList) XXX_DiscardUnknown() {
	xxx_messageInfo_AnsNodeList.DiscardUnknown(m)
}

var xxx_messageInfo_AnsNodeList proto.InternalMessageInfo

func (m *AnsNodeList) GetLength() int64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *AnsNodeList) GetNodeList() []Node {
	if m != nil {
		return m.NodeList
	}
	return nil
}

func (m *AnsNodeList) GetNodeGroupList() []NodeGroup {
	if m != nil {
		return m.NodeGroupList
	}
	return nil
}

func (m *AnsNodeList) GetNodeTypeList() []NodeType {
	if m != nil {
		return m.NodeTypeList
	}
	return nil
}

func (m *AnsNodeList) GetNodeLinkSourceStateCountList() []StateCount {
	if m != nil {
		return m.NodeLinkSourceStateCountList
	}
	return nil
}

func (m *AnsNodeList) GetNodeLinkTargetStateCountList() []StateCount {
	if m != nil {
		return m.NodeLinkTargetStateCountList
	}
	return nil
}

func (m *AnsNodeList) GetNodeFuncStateCountList() []StateCount {
	if m != nil {
		return m.NodeFuncStateCountList
	}
	return nil
}

func (m *AnsNodeList) GetNodeReportStateCountList() []StateCount {
	if m != nil {
		return m.NodeReportStateCountList
	}
	return nil
}

//获取节点连接列表
type ReqNodeLinkList struct {
	Filter               Filter   `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqNodeLinkList) Reset()         { *m = ReqNodeLinkList{} }
func (m *ReqNodeLinkList) String() string { return proto.CompactTextString(m) }
func (*ReqNodeLinkList) ProtoMessage()    {}
func (*ReqNodeLinkList) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{28}
}
func (m *ReqNodeLinkList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqNodeLinkList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqNodeLinkList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqNodeLinkList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqNodeLinkList.Merge(m, src)
}
func (m *ReqNodeLinkList) XXX_Size() int {
	return m.Size()
}
func (m *ReqNodeLinkList) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqNodeLinkList.DiscardUnknown(m)
}

var xxx_messageInfo_ReqNodeLinkList proto.InternalMessageInfo

func (m *ReqNodeLinkList) GetFilter() Filter {
	if m != nil {
		return m.Filter
	}
	return Filter{}
}

type AnsNodeLinkList struct {
	Length               int64      `protobuf:"varint,1,opt,name=Length,proto3" json:"Length,omitempty"`
	NodeLinkList         []NodeLink `protobuf:"bytes,2,rep,name=NodeLinkList,proto3" json:"NodeLinkList"`
	NodeList             []Node     `protobuf:"bytes,3,rep,name=NodeList,proto3" json:"NodeList"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *AnsNodeLinkList) Reset()         { *m = AnsNodeLinkList{} }
func (m *AnsNodeLinkList) String() string { return proto.CompactTextString(m) }
func (*AnsNodeLinkList) ProtoMessage()    {}
func (*AnsNodeLinkList) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{29}
}
func (m *AnsNodeLinkList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnsNodeLinkList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnsNodeLinkList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnsNodeLinkList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnsNodeLinkList.Merge(m, src)
}
func (m *AnsNodeLinkList) XXX_Size() int {
	return m.Size()
}
func (m *AnsNodeLinkList) XXX_DiscardUnknown() {
	xxx_messageInfo_AnsNodeLinkList.DiscardUnknown(m)
}

var xxx_messageInfo_AnsNodeLinkList proto.InternalMessageInfo

func (m *AnsNodeLinkList) GetLength() int64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *AnsNodeLinkList) GetNodeLinkList() []NodeLink {
	if m != nil {
		return m.NodeLinkList
	}
	return nil
}

func (m *AnsNodeLinkList) GetNodeList() []Node {
	if m != nil {
		return m.NodeList
	}
	return nil
}

//获取节点方法列表
type ReqNodeFuncList struct {
	Filter               Filter   `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqNodeFuncList) Reset()         { *m = ReqNodeFuncList{} }
func (m *ReqNodeFuncList) String() string { return proto.CompactTextString(m) }
func (*ReqNodeFuncList) ProtoMessage()    {}
func (*ReqNodeFuncList) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{30}
}
func (m *ReqNodeFuncList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqNodeFuncList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqNodeFuncList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqNodeFuncList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqNodeFuncList.Merge(m, src)
}
func (m *ReqNodeFuncList) XXX_Size() int {
	return m.Size()
}
func (m *ReqNodeFuncList) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqNodeFuncList.DiscardUnknown(m)
}

var xxx_messageInfo_ReqNodeFuncList proto.InternalMessageInfo

func (m *ReqNodeFuncList) GetFilter() Filter {
	if m != nil {
		return m.Filter
	}
	return Filter{}
}

type AnsNodeFuncList struct {
	Length               int64          `protobuf:"varint,1,opt,name=Length,proto3" json:"Length,omitempty"`
	NodeFuncList         []NodeFunc     `protobuf:"bytes,2,rep,name=NodeFuncList,proto3" json:"NodeFuncList"`
	NodeList             []Node         `protobuf:"bytes,3,rep,name=NodeList,proto3" json:"NodeList"`
	NodeFuncCallList     []NodeFuncCall `protobuf:"bytes,4,rep,name=NodeFuncCallList,proto3" json:"NodeFuncCallList"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *AnsNodeFuncList) Reset()         { *m = AnsNodeFuncList{} }
func (m *AnsNodeFuncList) String() string { return proto.CompactTextString(m) }
func (*AnsNodeFuncList) ProtoMessage()    {}
func (*AnsNodeFuncList) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{31}
}
func (m *AnsNodeFuncList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnsNodeFuncList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnsNodeFuncList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnsNodeFuncList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnsNodeFuncList.Merge(m, src)
}
func (m *AnsNodeFuncList) XXX_Size() int {
	return m.Size()
}
func (m *AnsNodeFuncList) XXX_DiscardUnknown() {
	xxx_messageInfo_AnsNodeFuncList.DiscardUnknown(m)
}

var xxx_messageInfo_AnsNodeFuncList proto.InternalMessageInfo

func (m *AnsNodeFuncList) GetLength() int64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *AnsNodeFuncList) GetNodeFuncList() []NodeFunc {
	if m != nil {
		return m.NodeFuncList
	}
	return nil
}

func (m *AnsNodeFuncList) GetNodeList() []Node {
	if m != nil {
		return m.NodeList
	}
	return nil
}

func (m *AnsNodeFuncList) GetNodeFuncCallList() []NodeFuncCall {
	if m != nil {
		return m.NodeFuncCallList
	}
	return nil
}

//获取节点报告列表
type ReqNodeReportList struct {
	Filter               Filter   `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqNodeReportList) Reset()         { *m = ReqNodeReportList{} }
func (m *ReqNodeReportList) String() string { return proto.CompactTextString(m) }
func (*ReqNodeReportList) ProtoMessage()    {}
func (*ReqNodeReportList) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{32}
}
func (m *ReqNodeReportList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqNodeReportList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqNodeReportList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqNodeReportList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqNodeReportList.Merge(m, src)
}
func (m *ReqNodeReportList) XXX_Size() int {
	return m.Size()
}
func (m *ReqNodeReportList) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqNodeReportList.DiscardUnknown(m)
}

var xxx_messageInfo_ReqNodeReportList proto.InternalMessageInfo

func (m *ReqNodeReportList) GetFilter() Filter {
	if m != nil {
		return m.Filter
	}
	return Filter{}
}

type AnsNodeReportList struct {
	Length               int64           `protobuf:"varint,1,opt,name=Length,proto3" json:"Length,omitempty"`
	NodeReportList       []NodeReport    `protobuf:"bytes,2,rep,name=NodeReportList,proto3" json:"NodeReportList"`
	NodeList             []Node          `protobuf:"bytes,3,rep,name=NodeList,proto3" json:"NodeList"`
	NodeReportValList    []NodeReportVal `protobuf:"bytes,4,rep,name=NodeReportValList,proto3" json:"NodeReportValList"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *AnsNodeReportList) Reset()         { *m = AnsNodeReportList{} }
func (m *AnsNodeReportList) String() string { return proto.CompactTextString(m) }
func (*AnsNodeReportList) ProtoMessage()    {}
func (*AnsNodeReportList) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{33}
}
func (m *AnsNodeReportList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnsNodeReportList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnsNodeReportList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnsNodeReportList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnsNodeReportList.Merge(m, src)
}
func (m *AnsNodeReportList) XXX_Size() int {
	return m.Size()
}
func (m *AnsNodeReportList) XXX_DiscardUnknown() {
	xxx_messageInfo_AnsNodeReportList.DiscardUnknown(m)
}

var xxx_messageInfo_AnsNodeReportList proto.InternalMessageInfo

func (m *AnsNodeReportList) GetLength() int64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *AnsNodeReportList) GetNodeReportList() []NodeReport {
	if m != nil {
		return m.NodeReportList
	}
	return nil
}

func (m *AnsNodeReportList) GetNodeList() []Node {
	if m != nil {
		return m.NodeList
	}
	return nil
}

func (m *AnsNodeReportList) GetNodeReportValList() []NodeReportVal {
	if m != nil {
		return m.NodeReportValList
	}
	return nil
}

//请求节点方法调用
type ReqNodeFuncCall struct {
	NodeFuncCall         NodeFuncCall `protobuf:"bytes,1,opt,name=NodeFuncCall,proto3" json:"NodeFuncCall"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ReqNodeFuncCall) Reset()         { *m = ReqNodeFuncCall{} }
func (m *ReqNodeFuncCall) String() string { return proto.CompactTextString(m) }
func (*ReqNodeFuncCall) ProtoMessage()    {}
func (*ReqNodeFuncCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{34}
}
func (m *ReqNodeFuncCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqNodeFuncCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqNodeFuncCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqNodeFuncCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqNodeFuncCall.Merge(m, src)
}
func (m *ReqNodeFuncCall) XXX_Size() int {
	return m.Size()
}
func (m *ReqNodeFuncCall) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqNodeFuncCall.DiscardUnknown(m)
}

var xxx_messageInfo_ReqNodeFuncCall proto.InternalMessageInfo

func (m *ReqNodeFuncCall) GetNodeFuncCall() NodeFuncCall {
	if m != nil {
		return m.NodeFuncCall
	}
	return NodeFuncCall{}
}

type AnsNodeFuncCall struct {
	NodeFuncCall         NodeFuncCall `protobuf:"bytes,1,opt,name=NodeFuncCall,proto3" json:"NodeFuncCall"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *AnsNodeFuncCall) Reset()         { *m = AnsNodeFuncCall{} }
func (m *AnsNodeFuncCall) String() string { return proto.CompactTextString(m) }
func (*AnsNodeFuncCall) ProtoMessage()    {}
func (*AnsNodeFuncCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{35}
}
func (m *AnsNodeFuncCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnsNodeFuncCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnsNodeFuncCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnsNodeFuncCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnsNodeFuncCall.Merge(m, src)
}
func (m *AnsNodeFuncCall) XXX_Size() int {
	return m.Size()
}
func (m *AnsNodeFuncCall) XXX_DiscardUnknown() {
	xxx_messageInfo_AnsNodeFuncCall.DiscardUnknown(m)
}

var xxx_messageInfo_AnsNodeFuncCall proto.InternalMessageInfo

func (m *AnsNodeFuncCall) GetNodeFuncCall() NodeFuncCall {
	if m != nil {
		return m.NodeFuncCall
	}
	return NodeFuncCall{}
}

//获取节点方法调用列表
type ReqNodeFuncCallList struct {
	Filter               Filter   `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqNodeFuncCallList) Reset()         { *m = ReqNodeFuncCallList{} }
func (m *ReqNodeFuncCallList) String() string { return proto.CompactTextString(m) }
func (*ReqNodeFuncCallList) ProtoMessage()    {}
func (*ReqNodeFuncCallList) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{36}
}
func (m *ReqNodeFuncCallList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqNodeFuncCallList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqNodeFuncCallList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqNodeFuncCallList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqNodeFuncCallList.Merge(m, src)
}
func (m *ReqNodeFuncCallList) XXX_Size() int {
	return m.Size()
}
func (m *ReqNodeFuncCallList) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqNodeFuncCallList.DiscardUnknown(m)
}

var xxx_messageInfo_ReqNodeFuncCallList proto.InternalMessageInfo

func (m *ReqNodeFuncCallList) GetFilter() Filter {
	if m != nil {
		return m.Filter
	}
	return Filter{}
}

type AnsNodeFuncCallList struct {
	NodeFuncCallList     []NodeFuncCall `protobuf:"bytes,1,rep,name=NodeFuncCallList,proto3" json:"NodeFuncCallList"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *AnsNodeFuncCallList) Reset()         { *m = AnsNodeFuncCallList{} }
func (m *AnsNodeFuncCallList) String() string { return proto.CompactTextString(m) }
func (*AnsNodeFuncCallList) ProtoMessage()    {}
func (*AnsNodeFuncCallList) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{37}
}
func (m *AnsNodeFuncCallList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnsNodeFuncCallList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnsNodeFuncCallList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnsNodeFuncCallList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnsNodeFuncCallList.Merge(m, src)
}
func (m *AnsNodeFuncCallList) XXX_Size() int {
	return m.Size()
}
func (m *AnsNodeFuncCallList) XXX_DiscardUnknown() {
	xxx_messageInfo_AnsNodeFuncCallList.DiscardUnknown(m)
}

var xxx_messageInfo_AnsNodeFuncCallList proto.InternalMessageInfo

func (m *AnsNodeFuncCallList) GetNodeFuncCallList() []NodeFuncCall {
	if m != nil {
		return m.NodeFuncCallList
	}
	return nil
}

//获取节点报告值列表
type ReqNodeReportValList struct {
	Filter               Filter   `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqNodeReportValList) Reset()         { *m = ReqNodeReportValList{} }
func (m *ReqNodeReportValList) String() string { return proto.CompactTextString(m) }
func (*ReqNodeReportValList) ProtoMessage()    {}
func (*ReqNodeReportValList) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{38}
}
func (m *ReqNodeReportValList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqNodeReportValList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqNodeReportValList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqNodeReportValList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqNodeReportValList.Merge(m, src)
}
func (m *ReqNodeReportValList) XXX_Size() int {
	return m.Size()
}
func (m *ReqNodeReportValList) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqNodeReportValList.DiscardUnknown(m)
}

var xxx_messageInfo_ReqNodeReportValList proto.InternalMessageInfo

func (m *ReqNodeReportValList) GetFilter() Filter {
	if m != nil {
		return m.Filter
	}
	return Filter{}
}

type AnsNodeReportValList struct {
	NodeReportValList    []NodeReportVal `protobuf:"bytes,1,rep,name=NodeReportValList,proto3" json:"NodeReportValList"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *AnsNodeReportValList) Reset()         { *m = AnsNodeReportValList{} }
func (m *AnsNodeReportValList) String() string { return proto.CompactTextString(m) }
func (*AnsNodeReportValList) ProtoMessage()    {}
func (*AnsNodeReportValList) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{39}
}
func (m *AnsNodeReportValList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnsNodeReportValList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnsNodeReportValList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnsNodeReportValList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnsNodeReportValList.Merge(m, src)
}
func (m *AnsNodeReportValList) XXX_Size() int {
	return m.Size()
}
func (m *AnsNodeReportValList) XXX_DiscardUnknown() {
	xxx_messageInfo_AnsNodeReportValList.DiscardUnknown(m)
}

var xxx_messageInfo_AnsNodeReportValList proto.InternalMessageInfo

func (m *AnsNodeReportValList) GetNodeReportValList() []NodeReportVal {
	if m != nil {
		return m.NodeReportValList
	}
	return nil
}

//获取节点通知列表
type ReqNodeNotifyList struct {
	Filter               Filter   `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqNodeNotifyList) Reset()         { *m = ReqNodeNotifyList{} }
func (m *ReqNodeNotifyList) String() string { return proto.CompactTextString(m) }
func (*ReqNodeNotifyList) ProtoMessage()    {}
func (*ReqNodeNotifyList) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{40}
}
func (m *ReqNodeNotifyList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqNodeNotifyList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqNodeNotifyList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqNodeNotifyList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqNodeNotifyList.Merge(m, src)
}
func (m *ReqNodeNotifyList) XXX_Size() int {
	return m.Size()
}
func (m *ReqNodeNotifyList) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqNodeNotifyList.DiscardUnknown(m)
}

var xxx_messageInfo_ReqNodeNotifyList proto.InternalMessageInfo

func (m *ReqNodeNotifyList) GetFilter() Filter {
	if m != nil {
		return m.Filter
	}
	return Filter{}
}

type AnsNodeNotifyList struct {
	Length               int64        `protobuf:"varint,1,opt,name=Length,proto3" json:"Length,omitempty"`
	NodeNotifyList       []NodeNotify `protobuf:"bytes,2,rep,name=NodeNotifyList,proto3" json:"NodeNotifyList"`
	NodeList             []Node       `protobuf:"bytes,3,rep,name=NodeList,proto3" json:"NodeList"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *AnsNodeNotifyList) Reset()         { *m = AnsNodeNotifyList{} }
func (m *AnsNodeNotifyList) String() string { return proto.CompactTextString(m) }
func (*AnsNodeNotifyList) ProtoMessage()    {}
func (*AnsNodeNotifyList) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{41}
}
func (m *AnsNodeNotifyList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnsNodeNotifyList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnsNodeNotifyList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnsNodeNotifyList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnsNodeNotifyList.Merge(m, src)
}
func (m *AnsNodeNotifyList) XXX_Size() int {
	return m.Size()
}
func (m *AnsNodeNotifyList) XXX_DiscardUnknown() {
	xxx_messageInfo_AnsNodeNotifyList.DiscardUnknown(m)
}

var xxx_messageInfo_AnsNodeNotifyList proto.InternalMessageInfo

func (m *AnsNodeNotifyList) GetLength() int64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *AnsNodeNotifyList) GetNodeNotifyList() []NodeNotify {
	if m != nil {
		return m.NodeNotifyList
	}
	return nil
}

func (m *AnsNodeNotifyList) GetNodeList() []Node {
	if m != nil {
		return m.NodeList
	}
	return nil
}

//请求节点测试
type ReqNodeTest struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Type                 int64    `protobuf:"varint,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Message              string   `protobuf:"bytes,3,opt,name=Message,proto3" json:"Message,omitempty"`
	State                State    `protobuf:"varint,4,opt,name=State,proto3,enum=protoManage.State" json:"State,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqNodeTest) Reset()         { *m = ReqNodeTest{} }
func (m *ReqNodeTest) String() string { return proto.CompactTextString(m) }
func (*ReqNodeTest) ProtoMessage()    {}
func (*ReqNodeTest) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{42}
}
func (m *ReqNodeTest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqNodeTest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqNodeTest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqNodeTest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqNodeTest.Merge(m, src)
}
func (m *ReqNodeTest) XXX_Size() int {
	return m.Size()
}
func (m *ReqNodeTest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqNodeTest.DiscardUnknown(m)
}

var xxx_messageInfo_ReqNodeTest proto.InternalMessageInfo

func (m *ReqNodeTest) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ReqNodeTest) GetType() int64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ReqNodeTest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ReqNodeTest) GetState() State {
	if m != nil {
		return m.State
	}
	return State_StateNot
}

type AnsNodeTest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnsNodeTest) Reset()         { *m = AnsNodeTest{} }
func (m *AnsNodeTest) String() string { return proto.CompactTextString(m) }
func (*AnsNodeTest) ProtoMessage()    {}
func (*AnsNodeTest) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{43}
}
func (m *AnsNodeTest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnsNodeTest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnsNodeTest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnsNodeTest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnsNodeTest.Merge(m, src)
}
func (m *AnsNodeTest) XXX_Size() int {
	return m.Size()
}
func (m *AnsNodeTest) XXX_DiscardUnknown() {
	xxx_messageInfo_AnsNodeTest.DiscardUnknown(m)
}

var xxx_messageInfo_AnsNodeTest proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("protoManage.Order", Order_name, Order_value)
	proto.RegisterEnum("protoManage.State", State_name, State_value)
	proto.RegisterEnum("protoManage.NotifySenderType", NotifySenderType_name, NotifySenderType_value)
	proto.RegisterEnum("protoManage.HttpError", HttpError_name, HttpError_value)
	proto.RegisterType((*Message)(nil), "protoManage.Message")
	proto.RegisterType((*HttpMessage)(nil), "protoManage.HttpMessage")
	proto.RegisterType((*Base)(nil), "protoManage.Base")
	proto.RegisterType((*StateCount)(nil), "protoManage.StateCount")
	proto.RegisterType((*Filter)(nil), "protoManage.Filter")
	proto.RegisterType((*Manager)(nil), "protoManage.Manager")
	proto.RegisterType((*TopLink)(nil), "protoManage.TopLink")
	proto.RegisterType((*NodeGroup)(nil), "protoManage.NodeGroup")
	proto.RegisterType((*NodeType)(nil), "protoManage.NodeType")
	proto.RegisterType((*Node)(nil), "protoManage.Node")
	proto.RegisterType((*NodeLink)(nil), "protoManage.NodeLink")
	proto.RegisterType((*NodeFunc)(nil), "protoManage.NodeFunc")
	proto.RegisterType((*NodeFuncCall)(nil), "protoManage.NodeFuncCall")
	proto.RegisterType((*NodeReport)(nil), "protoManage.NodeReport")
	proto.RegisterType((*NodeReportVal)(nil), "protoManage.NodeReportVal")
	proto.RegisterType((*NodeNotify)(nil), "protoManage.NodeNotify")
	proto.RegisterType((*ReqNodeLogin)(nil), "protoManage.ReqNodeLogin")
	proto.RegisterType((*ReqNodeOnline)(nil), "protoManage.ReqNodeOnline")
	proto.RegisterType((*ReqTopLinkList)(nil), "protoManage.ReqTopLinkList")
	proto.RegisterType((*AnsTopLinkList)(nil), "protoManage.AnsTopLinkList")
	proto.RegisterType((*ReqManagerList)(nil), "protoManage.ReqManagerList")
	proto.RegisterType((*AnsManagerList)(nil), "protoManage.AnsManagerList")
	proto.RegisterType((*ReqNodeGroupList)(nil), "protoManage.ReqNodeGroupList")
	proto.RegisterType((*AnsNodeGroupList)(nil), "protoManage.AnsNodeGroupList")
	proto.RegisterType((*ReqNodeTypeList)(nil), "protoManage.ReqNodeTypeList")
	proto.RegisterType((*AnsNodeTypeList)(nil), "protoManage.AnsNodeTypeList")
	proto.RegisterType((*ReqNodeList)(nil), "protoManage.ReqNodeList")
	proto.RegisterType((*AnsNodeList)(nil), "protoManage.AnsNodeList")
	proto.RegisterType((*ReqNodeLinkList)(nil), "protoManage.ReqNodeLinkList")
	proto.RegisterType((*AnsNodeLinkList)(nil), "protoManage.AnsNodeLinkList")
	proto.RegisterType((*ReqNodeFuncList)(nil), "protoManage.ReqNodeFuncList")
	proto.RegisterType((*AnsNodeFuncList)(nil), "protoManage.AnsNodeFuncList")
	proto.RegisterType((*ReqNodeReportList)(nil), "protoManage.ReqNodeReportList")
	proto.RegisterType((*AnsNodeReportList)(nil), "protoManage.AnsNodeReportList")
	proto.RegisterType((*ReqNodeFuncCall)(nil), "protoManage.ReqNodeFuncCall")
	proto.RegisterType((*AnsNodeFuncCall)(nil), "protoManage.AnsNodeFuncCall")
	proto.RegisterType((*ReqNodeFuncCallList)(nil), "protoManage.ReqNodeFuncCallList")
	proto.RegisterType((*AnsNodeFuncCallList)(nil), "protoManage.AnsNodeFuncCallList")
	proto.RegisterType((*ReqNodeReportValList)(nil), "protoManage.ReqNodeReportValList")
	proto.RegisterType((*AnsNodeReportValList)(nil), "protoManage.AnsNodeReportValList")
	proto.RegisterType((*ReqNodeNotifyList)(nil), "protoManage.ReqNodeNotifyList")
	proto.RegisterType((*AnsNodeNotifyList)(nil), "protoManage.AnsNodeNotifyList")
	proto.RegisterType((*ReqNodeTest)(nil), "protoManage.ReqNodeTest")
	proto.RegisterType((*AnsNodeTest)(nil), "protoManage.AnsNodeTest")
}

func init() { proto.RegisterFile("manage.proto", fileDescriptor_519fa8ed5ffbbc8f) }

var fileDescriptor_519fa8ed5ffbbc8f = []byte{
	// 2130 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x59, 0x4d, 0x6c, 0x1c, 0x49,
	0x15, 0x76, 0x4d, 0xf7, 0x8c, 0x3d, 0x6f, 0xfc, 0xd3, 0x2e, 0x3b, 0x4e, 0xc7, 0xca, 0x7a, 0xa3,
	0x16, 0x07, 0x2b, 0x48, 0x01, 0xb2, 0x12, 0x48, 0x88, 0x3f, 0x3b, 0x63, 0x13, 0x6b, 0xed, 0xd9,
	0xa8, 0xfd, 0x13, 0x71, 0xec, 0x78, 0x2a, 0xe3, 0x21, 0x3d, 0xdd, 0x93, 0x9e, 0x1e, 0x56, 0x41,
	0xe2, 0xca, 0x9d, 0x05, 0xa4, 0xe5, 0x84, 0x96, 0x1c, 0x38, 0x01, 0x7b, 0xe1, 0x00, 0xd2, 0xf2,
	0x7b, 0x59, 0x7e, 0x0e, 0xdc, 0xc2, 0x2e, 0xbb, 0xcb, 0x92, 0xbd, 0x72, 0x42, 0x82, 0x00, 0xa7,
	0xd5, 0xab, 0xbf, 0xae, 0xee, 0x99, 0xc9, 0x78, 0x26, 0x39, 0x79, 0xde, 0xf7, 0xaa, 0x5e, 0x7d,
	0xef, 0xd5, 0x7b, 0xaf, 0xaa, 0xda, 0x30, 0xdf, 0x09, 0xa2, 0xa0, 0xc5, 0xae, 0x75, 0x93, 0x38,
	0x8d, 0x69, 0x8d, 0xff, 0x39, 0xe0, 0xd0, 0xfa, 0x6a, 0x2b, 0x6e, 0xc5, 0x1c, 0xf8, 0x14, 0xfe,
	0x12, 0x43, 0xbc, 0x03, 0x98, 0x3d, 0x60, 0xbd, 0x5e, 0xd0, 0x62, 0x74, 0x13, 0xca, 0x71, 0xd2,
	0x64, 0x89, 0x4b, 0xae, 0x90, 0xcd, 0xc5, 0xeb, 0xf4, 0x9a, 0x31, 0xfb, 0xda, 0x2b, 0xa8, 0xf1,
	0xc5, 0x00, 0xea, 0xc2, 0x6c, 0x47, 0x4c, 0x72, 0x4b, 0x57, 0xc8, 0xe6, 0xbc, 0xaf, 0x44, 0xaf,
	0x05, 0xb5, 0x9b, 0x69, 0xda, 0x7d, 0x8e, 0x26, 0xe9, 0x2a, 0x94, 0xd3, 0xf8, 0x1e, 0x8b, 0x5c,
	0xeb, 0x0a, 0xd9, 0xac, 0xfa, 0x42, 0xf0, 0x3e, 0x0b, 0xf6, 0x76, 0xd0, 0x63, 0x74, 0x11, 0x4a,
	0x7b, 0x75, 0x6e, 0xde, 0xf2, 0x4b, 0x7b, 0x75, 0xba, 0x01, 0x70, 0xdc, 0x6d, 0x06, 0x29, 0x3b,
	0x6a, 0x77, 0x84, 0x29, 0xcb, 0x37, 0x10, 0xef, 0x97, 0x04, 0xe0, 0x30, 0x0d, 0x52, 0x76, 0x23,
	0xee, 0x47, 0xe9, 0xc0, 0xf4, 0x75, 0x98, 0x6b, 0xc4, 0x29, 0xd7, 0xc9, 0xc9, 0x5a, 0xa6, 0x57,
	0xa0, 0xd6, 0x88, 0x93, 0x4e, 0x10, 0x0a, 0xb5, 0xc5, 0xd5, 0x26, 0x44, 0x2f, 0x43, 0xf5, 0x76,
	0x90, 0x44, 0x42, 0x6f, 0x73, 0x7d, 0x06, 0x20, 0xb5, 0x9d, 0x24, 0x89, 0x13, 0xa1, 0x2e, 0x0b,
	0x6a, 0x19, 0x82, 0xf6, 0x8f, 0xa3, 0x7b, 0x51, 0xfc, 0xaa, 0x18, 0x50, 0x11, 0xf6, 0x0d, 0xc8,
	0xfb, 0xb9, 0x0d, 0x95, 0xdd, 0x76, 0x98, 0xb2, 0x64, 0x80, 0xb8, 0x0b, 0xb3, 0x5f, 0x4d, 0xe2,
	0x7e, 0x77, 0xaf, 0x2e, 0x79, 0x2b, 0x91, 0xae, 0x41, 0xe5, 0xe8, 0x41, 0x97, 0xed, 0xd5, 0x25,
	0x63, 0x29, 0x21, 0xde, 0x88, 0x9b, 0x88, 0x0b, 0xa6, 0x52, 0xc2, 0x10, 0x1c, 0xc6, 0xfd, 0xe4,
	0x14, 0x35, 0x82, 0xa4, 0x96, 0x51, 0x77, 0x14, 0x24, 0x2d, 0x96, 0xee, 0xd5, 0x25, 0x3f, 0x2d,
	0xa3, 0xbd, 0xdd, 0x7e, 0x74, 0xba, 0x57, 0x77, 0x67, 0x85, 0x3d, 0x21, 0xe1, 0x1c, 0x9f, 0x75,
	0xe3, 0x04, 0xe7, 0xcc, 0x89, 0x39, 0x4a, 0xa6, 0x14, 0xec, 0x46, 0xd0, 0x61, 0x6e, 0x95, 0x6f,
	0x2d, 0xff, 0x8d, 0xd8, 0x6e, 0x18, 0xb4, 0x5c, 0x10, 0x18, 0xfe, 0xc6, 0x1c, 0x38, 0x09, 0xc2,
	0x3e, 0x73, 0x6b, 0x22, 0x07, 0xb8, 0x80, 0xd9, 0xc5, 0xb7, 0xd2, 0x9d, 0x1f, 0x92, 0x5d, 0x5c,
	0xe3, 0x8b, 0x01, 0xc8, 0xe1, 0x56, 0xd0, 0x62, 0x87, 0xed, 0x6f, 0x32, 0x77, 0x41, 0x70, 0x50,
	0x32, 0x46, 0x0e, 0x7f, 0x37, 0xfa, 0x1d, 0x77, 0x51, 0x44, 0x4e, 0x8a, 0xb8, 0x61, 0x87, 0x2c,
	0x6a, 0xb2, 0x84, 0x73, 0x5c, 0xe2, 0x4b, 0x1b, 0x08, 0xfd, 0xa2, 0xd2, 0x63, 0x44, 0x5d, 0x87,
	0x93, 0x78, 0x21, 0x47, 0xa2, 0x11, 0xa7, 0xed, 0xbb, 0x0f, 0xb2, 0x41, 0xbe, 0x31, 0x81, 0x6e,
	0xc2, 0x92, 0x90, 0xb6, 0x59, 0xab, 0x1d, 0xf1, 0x7c, 0x5d, 0xe6, 0x04, 0x8a, 0x30, 0xfd, 0x04,
	0x2c, 0x08, 0x68, 0x27, 0x6a, 0xf2, 0x71, 0x94, 0x8f, 0xcb, 0x83, 0xe8, 0x88, 0xac, 0x3b, 0x77,
	0x85, 0x73, 0x55, 0xa2, 0xf7, 0x2f, 0x02, 0xb3, 0x82, 0x51, 0x42, 0x3f, 0x29, 0x0a, 0x87, 0xa7,
	0x4e, 0xed, 0xfa, 0x72, 0x8e, 0x2e, 0x2a, 0xb6, 0xed, 0xb7, 0x3f, 0x78, 0x71, 0xc6, 0x17, 0xd5,
	0xa5, 0xf6, 0xa7, 0x64, 0xec, 0x0f, 0x8f, 0x65, 0xaf, 0xf7, 0x6a, 0x9c, 0x34, 0x65, 0x49, 0x6a,
	0x99, 0x97, 0x4f, 0xfb, 0xf4, 0x1e, 0x9f, 0x63, 0x0b, 0x9d, 0x92, 0x71, 0x0f, 0x8f, 0x78, 0x1d,
	0x97, 0xc5, 0x1e, 0x72, 0x01, 0x49, 0x1f, 0xb2, 0x34, 0x6d, 0x47, 0x2d, 0x9e, 0x50, 0x55, 0x5f,
	0x89, 0x38, 0x7e, 0x9f, 0x7d, 0x83, 0x85, 0x3c, 0x9d, 0xca, 0xbe, 0x10, 0xb2, 0x3d, 0x9f, 0x1b,
	0xb3, 0xe7, 0xde, 0xb7, 0x09, 0xcc, 0x1e, 0xc5, 0xdd, 0xfd, 0x76, 0x74, 0xef, 0xd9, 0x9d, 0x76,
	0xc0, 0x3a, 0x4e, 0x42, 0xe9, 0x2f, 0xfe, 0xcc, 0x88, 0xd8, 0xe3, 0x88, 0xec, 0x43, 0x15, 0x4b,
	0x8b, 0xd7, 0xe3, 0x33, 0x33, 0xf1, 0x5e, 0xc6, 0x0e, 0xd5, 0x64, 0x3c, 0x83, 0x9e, 0xd9, 0xd8,
	0x43, 0x02, 0x36, 0x5a, 0x9b, 0xcc, 0xd2, 0xe4, 0xbd, 0x46, 0xad, 0x6d, 0x1b, 0x21, 0xd5, 0x01,
	0x2c, 0x8f, 0x0b, 0xe0, 0x0f, 0x88, 0xf0, 0x79, 0xf2, 0xad, 0x34, 0x7b, 0x59, 0xe9, 0x29, 0xbd,
	0xcc, 0x2a, 0xf4, 0xb2, 0xf3, 0x6f, 0xee, 0x1b, 0x92, 0x1b, 0x36, 0xbb, 0xc9, 0xb8, 0x65, 0xfd,
	0xb7, 0x94, 0xeb, 0xbf, 0x2a, 0x56, 0x56, 0xa1, 0x27, 0xf6, 0xa3, 0x53, 0x15, 0x3f, 0xbe, 0xd8,
	0xf9, 0xe3, 0xf7, 0x88, 0xc0, 0xbc, 0xe2, 0x78, 0x23, 0x08, 0xc3, 0xc9, 0x78, 0x5e, 0x86, 0xaa,
	0xec, 0x1d, 0x9a, 0x6a, 0x06, 0x18, 0x5d, 0xdf, 0xca, 0x75, 0xfd, 0xcb, 0x50, 0xbd, 0x15, 0x24,
	0x41, 0x87, 0xa5, 0x2c, 0x91, 0xb4, 0x33, 0x00, 0xb5, 0x3e, 0x4b, 0xfb, 0x49, 0x74, 0x12, 0x84,
	0xb2, 0x1f, 0x64, 0x40, 0xe6, 0x59, 0x65, 0x9c, 0x67, 0x0f, 0x09, 0x00, 0x7a, 0x26, 0x0e, 0x94,
	0xe7, 0x1b, 0x7f, 0x7b, 0x48, 0xfc, 0xad, 0xa9, 0xe2, 0xff, 0x3a, 0x81, 0x85, 0x8c, 0x25, 0x7a,
	0x38, 0x69, 0x12, 0xeb, 0x03, 0xb4, 0x54, 0x38, 0x40, 0xf5, 0xc1, 0x88, 0xcc, 0xc8, 0xc0, 0xc1,
	0x38, 0x36, 0x7d, 0xff, 0x2a, 0x03, 0x28, 0x0e, 0xaa, 0xc9, 0x8b, 0x8b, 0x1f, 0x40, 0x46, 0x71,
	0x49, 0xb9, 0x70, 0x34, 0x5a, 0x93, 0x1e, 0x8d, 0xc6, 0x51, 0x66, 0xe7, 0x8e, 0xb2, 0x09, 0xa2,
	0xfe, 0x26, 0x81, 0x79, 0x9f, 0xdd, 0xe7, 0x8d, 0x23, 0x6e, 0xb5, 0x23, 0xfa, 0x79, 0xa3, 0x0f,
	0x4b, 0x0f, 0xd7, 0x0a, 0x94, 0xa4, 0x56, 0xba, 0x69, 0xb4, 0xed, 0xcf, 0x65, 0x5d, 0x97, 0xfb,
	0x5a, 0xbb, 0x7e, 0x61, 0x60, 0x2a, 0x2a, 0xe5, 0xcc, 0x5c, 0x8b, 0xc6, 0xdf, 0x3c, 0x04, 0xc5,
	0x88, 0xa2, 0x42, 0x45, 0x14, 0x7f, 0x7b, 0xdf, 0x82, 0x05, 0xc9, 0xf8, 0x95, 0x28, 0x6c, 0x47,
	0xd9, 0x6c, 0x72, 0x8e, 0xd9, 0xf4, 0xcb, 0xa2, 0xca, 0xb1, 0x4b, 0xee, 0xb7, 0x7b, 0x78, 0x7f,
	0xb5, 0x86, 0xf2, 0xc4, 0x01, 0x72, 0x62, 0x6e, 0x82, 0xe7, 0xc0, 0xa2, 0xcf, 0xee, 0xcb, 0x33,
	0x93, 0x23, 0x0d, 0x58, 0xdc, 0x8a, 0x7a, 0x06, 0x42, 0xbf, 0x00, 0x35, 0x43, 0x74, 0x09, 0x5f,
	0x63, 0x35, 0xb7, 0x86, 0xd4, 0xcb, 0x25, 0xcc, 0xe1, 0x72, 0x05, 0xd9, 0x3d, 0x8c, 0x15, 0x0c,
	0x04, 0x57, 0x30, 0xc4, 0xa1, 0x2b, 0x48, 0xbd, 0x5a, 0xc1, 0xb4, 0xb7, 0x03, 0x8e, 0x0c, 0x21,
	0xdf, 0x38, 0x6e, 0xf1, 0x33, 0x50, 0xb9, 0xcb, 0x6f, 0xcd, 0x32, 0x8e, 0x2b, 0x39, 0x63, 0xe2,
	0x42, 0x2d, 0x6d, 0xc9, 0x81, 0xde, 0x5b, 0x04, 0x9c, 0xad, 0xa8, 0x97, 0xb7, 0xb3, 0x06, 0x95,
	0x7d, 0x16, 0xb5, 0xd2, 0x33, 0x79, 0xef, 0x96, 0x12, 0xdd, 0x16, 0xe5, 0xad, 0x07, 0xba, 0x16,
	0xe7, 0xfc, 0xf4, 0xe4, 0xca, 0x4f, 0xa1, 0x07, 0x40, 0x11, 0xc8, 0x9e, 0x26, 0xc6, 0x16, 0x5e,
	0x1c, 0x4c, 0x72, 0x3e, 0x44, 0x5a, 0x1a, 0x32, 0xd1, 0xab, 0xc3, 0x92, 0x0c, 0x03, 0x66, 0xe1,
	0xb4, 0x51, 0xf8, 0x05, 0x81, 0x25, 0x19, 0x05, 0x6d, 0x66, 0x54, 0x10, 0x64, 0xf6, 0xa9, 0x71,
	0x23, 0xb3, 0xcf, 0xa8, 0x92, 0xdc, 0x84, 0x11, 0x11, 0xb0, 0xa6, 0x8d, 0xc0, 0x57, 0xa0, 0xa6,
	0xaa, 0x7f, 0x4a, 0xef, 0x1f, 0xd9, 0x50, 0x93, 0xde, 0x3f, 0xd5, 0xf3, 0x97, 0xd4, 0xed, 0x44,
	0x7b, 0x3d, 0xb2, 0x50, 0xf5, 0xc0, 0xe7, 0x92, 0x33, 0xc5, 0x90, 0xdb, 0x93, 0x86, 0x3c, 0x80,
	0xcb, 0xaa, 0x01, 0x88, 0x6b, 0x51, 0x21, 0xf8, 0xe5, 0xf3, 0x04, 0xff, 0xa9, 0x26, 0xcc, 0x25,
	0xc4, 0xed, 0xaa, 0xb0, 0x44, 0x65, 0xa2, 0x25, 0x86, 0x99, 0xa0, 0xc7, 0xb0, 0xa6, 0x6e, 0x37,
	0x05, 0xe3, 0xb3, 0xe7, 0x31, 0x3e, 0x62, 0x32, 0xfd, 0x1a, 0xb8, 0xd9, 0xa1, 0x5d, 0x30, 0x3c,
	0x77, 0x1e, 0xc3, 0x23, 0xa7, 0x1b, 0xd5, 0xa9, 0xfb, 0xea, 0x14, 0xf9, 0xf9, 0xc3, 0xac, 0x3a,
	0xb5, 0x99, 0x31, 0xd5, 0x39, 0xf5, 0xd9, 0x90, 0x4b, 0x72, 0xeb, 0x9c, 0x49, 0x6e, 0xf8, 0x89,
	0xf1, 0x9d, 0xd6, 0xcf, 0x7f, 0x66, 0x7e, 0x6a, 0x33, 0x63, 0xfc, 0x54, 0xe3, 0x46, 0xfa, 0x89,
	0x03, 0x4c, 0x3f, 0xb5, 0xe1, 0x69, 0xfc, 0xa4, 0x2f, 0x83, 0x63, 0xde, 0xaf, 0x8d, 0x62, 0xbc,
	0x34, 0x74, 0x65, 0x1c, 0x24, 0x8d, 0x0c, 0x4c, 0xf4, 0x76, 0x61, 0x59, 0x06, 0x4d, 0xe4, 0xce,
	0xb4, 0x61, 0x7b, 0x42, 0x60, 0x59, 0x86, 0xcd, 0x30, 0x34, 0x2a, 0x70, 0x3b, 0xb0, 0x98, 0x1f,
	0x39, 0xf4, 0xec, 0xc9, 0x86, 0xc8, 0xc5, 0x0a, 0x93, 0xa6, 0x0b, 0x5f, 0x03, 0x96, 0x73, 0xd7,
	0x63, 0x23, 0x7e, 0xeb, 0x23, 0x96, 0x3f, 0x09, 0x54, 0x00, 0x07, 0xa7, 0x7a, 0x27, 0xb9, 0xb4,
	0xe3, 0x2f, 0x9e, 0x1b, 0xf9, 0x17, 0x90, 0x8c, 0xe2, 0xd8, 0xdd, 0xc9, 0x4d, 0x42, 0xbb, 0x46,
	0x1e, 0x3e, 0x3f, 0xbb, 0x37, 0x61, 0xa5, 0xc0, 0x77, 0xda, 0x3d, 0xbf, 0x03, 0x2b, 0x05, 0x86,
	0x23, 0xf3, 0x93, 0x4c, 0x9b, 0x9f, 0x7b, 0xb0, 0x9a, 0xcb, 0x4f, 0x19, 0xf5, 0x69, 0xe8, 0xde,
	0x85, 0xd5, 0x5c, 0x86, 0x2a, 0x53, 0x43, 0x13, 0x82, 0x4c, 0x9f, 0x10, 0x59, 0x49, 0x89, 0x57,
	0xc7, 0xb4, 0x7c, 0x7f, 0x9c, 0x95, 0x94, 0x61, 0x68, 0x4c, 0x49, 0x65, 0x23, 0x47, 0x96, 0x94,
	0x18, 0x62, 0x96, 0x94, 0x61, 0x7e, 0xaa, 0xce, 0xdb, 0xd7, 0xb7, 0x9f, 0x23, 0xd6, 0x1b, 0xfc,
	0xcc, 0x4d, 0xc1, 0xd6, 0x4f, 0x19, 0xcb, 0xb7, 0x8b, 0x6f, 0x2e, 0x6b, 0xc4, 0x9b, 0x6b, 0xec,
	0x73, 0x72, 0x41, 0xdf, 0x98, 0x70, 0xd9, 0xab, 0x8f, 0xe6, 0xa0, 0xcc, 0xbf, 0xf2, 0x53, 0x80,
	0x8a, 0xf8, 0x90, 0xed, 0xcc, 0xd0, 0x25, 0xfd, 0x84, 0xd8, 0x6d, 0x47, 0x4d, 0x87, 0xd0, 0x15,
	0x58, 0x32, 0x80, 0xed, 0x07, 0x7b, 0x75, 0xa7, 0x44, 0x17, 0x01, 0x24, 0xb8, 0xd5, 0x6c, 0x3a,
	0x96, 0x21, 0xd7, 0x59, 0xe8, 0xd8, 0x74, 0x19, 0x16, 0xa4, 0x2c, 0xbe, 0xee, 0x3b, 0x65, 0x3a,
	0x2f, 0x1f, 0x69, 0xac, 0x97, 0x3a, 0x15, 0xea, 0xc0, 0xbc, 0x7a, 0x18, 0xe0, 0xf3, 0xcf, 0x61,
	0x68, 0x42, 0x22, 0x68, 0xf2, 0x2e, 0x12, 0x91, 0x32, 0x27, 0xd2, 0x42, 0x22, 0x06, 0xc0, 0x89,
	0x9c, 0xd1, 0x4b, 0x70, 0x41, 0x82, 0x62, 0x21, 0xf5, 0xb1, 0xd3, 0x69, 0x53, 0x17, 0x56, 0x73,
	0x2a, 0xf9, 0xe9, 0xd2, 0xf9, 0x3a, 0x5d, 0x16, 0x7d, 0x81, 0xdf, 0xd5, 0x70, 0xb1, 0x3f, 0x90,
	0x1c, 0x84, 0x2e, 0xfc, 0x91, 0x50, 0x6a, 0x5c, 0x02, 0x39, 0x85, 0x3f, 0x11, 0xba, 0x26, 0x72,
	0x5f, 0x63, 0x9c, 0xc5, 0x9f, 0x09, 0x75, 0xa0, 0xa6, 0xee, 0x6e, 0x68, 0xf0, 0x27, 0x25, 0x13,
	0x41, 0x7b, 0x3f, 0x2d, 0xa9, 0x25, 0x10, 0xe1, 0xe6, 0x7e, 0x56, 0xa2, 0x17, 0x44, 0xe9, 0x2b,
	0x88, 0x5b, 0x7b, 0xb3, 0x44, 0xe7, 0x61, 0x16, 0x61, 0xb4, 0xf4, 0x1d, 0x4b, 0x49, 0x68, 0xe5,
	0x35, 0x8b, 0xae, 0xc2, 0x12, 0x4a, 0xd2, 0x25, 0xdc, 0x57, 0xe7, 0xbb, 0x16, 0x5d, 0x90, 0xdf,
	0xb9, 0xd0, 0xee, 0xf7, 0x2c, 0xb5, 0x94, 0xb6, 0xf9, 0x7d, 0x4b, 0xf1, 0x51, 0x5b, 0xf6, 0xef,
	0x1c, 0x82, 0xb6, 0xff, 0x63, 0xd1, 0x17, 0xc4, 0xa5, 0x4a, 0x22, 0x5b, 0x61, 0x78, 0xbb, 0x9d,
	0x9e, 0x89, 0x0f, 0x2f, 0xce, 0x13, 0x8b, 0xba, 0xb0, 0xa2, 0xd4, 0xe6, 0xf2, 0xff, 0xd5, 0xeb,
	0xe9, 0xac, 0xf9, 0x9f, 0xa5, 0x5c, 0xcb, 0xe5, 0xcd, 0xff, 0xf5, 0xa2, 0xd8, 0xb3, 0x90, 0xc6,
	0x3b, 0xb6, 0x89, 0x20, 0x8d, 0x77, 0x6d, 0x45, 0x43, 0x22, 0x79, 0x1a, 0x7f, 0xb3, 0xe9, 0x45,
	0xf1, 0x14, 0x41, 0xb5, 0xa0, 0x51, 0x67, 0xbd, 0x53, 0xe7, 0xbd, 0x21, 0x8a, 0x5b, 0x41, 0x12,
	0x38, 0xef, 0xdb, 0x3a, 0x1c, 0xfd, 0xe8, 0x94, 0xd3, 0xfb, 0xc0, 0x56, 0xf4, 0x14, 0xc4, 0xe9,
	0xfd, 0xdd, 0x56, 0xd1, 0x55, 0x2d, 0xd5, 0x67, 0xf7, 0x9d, 0x0f, 0x07, 0xd0, 0xad, 0xa8, 0xe7,
	0xfc, 0x23, 0x67, 0x02, 0x51, 0x6e, 0xf9, 0x23, 0x9b, 0x5e, 0x82, 0xd5, 0x22, 0xcc, 0xad, 0x3f,
	0xb6, 0x55, 0x46, 0x89, 0xf6, 0x87, 0xee, 0xbf, 0x55, 0xce, 0x63, 0x18, 0x80, 0x5f, 0x95, 0xe9,
	0x8b, 0xb0, 0x9e, 0xc3, 0xf2, 0x21, 0xf8, 0x75, 0x59, 0xed, 0x84, 0x18, 0x20, 0x7c, 0x3d, 0x09,
	0x42, 0xe7, 0x37, 0x65, 0xba, 0x62, 0xde, 0x14, 0x38, 0xa5, 0xdf, 0x96, 0x55, 0x60, 0x32, 0x90,
	0x13, 0xfa, 0x5d, 0x59, 0xa5, 0xb3, 0xee, 0xc7, 0x7c, 0xc2, 0xef, 0x35, 0x29, 0xd1, 0xe7, 0x90,
	0xe8, 0x1b, 0x15, 0x65, 0x59, 0x60, 0x7c, 0xe0, 0x8f, 0x2a, 0x2a, 0x32, 0x02, 0xe4, 0xff, 0x2d,
	0x73, 0x1e, 0x56, 0xae, 0x9e, 0xc8, 0x96, 0x84, 0x35, 0xcf, 0x7f, 0x34, 0xe2, 0x54, 0xb4, 0x16,
	0x2e, 0xc9, 0x5e, 0x43, 0x34, 0x20, 0xfe, 0x4b, 0xe7, 0x94, 0xe8, 0x02, 0x54, 0x39, 0x70, 0x3b,
	0x48, 0x22, 0xd1, 0x55, 0xb8, 0x28, 0x0c, 0xdb, 0x57, 0xef, 0x60, 0xc4, 0xf3, 0x1f, 0xa6, 0xe8,
	0x3a, 0xbe, 0x2f, 0xf2, 0x98, 0xee, 0x65, 0x2e, 0x6e, 0x45, 0x41, 0xd7, 0x63, 0x89, 0x43, 0x86,
	0x69, 0xd0, 0x0f, 0xa7, 0x74, 0xf5, 0x35, 0x02, 0xd5, 0x9b, 0x69, 0xda, 0xe5, 0x6b, 0x62, 0x1f,
	0xd3, 0x42, 0xa3, 0x1f, 0x86, 0xce, 0x0c, 0x6e, 0xbb, 0x86, 0x0e, 0x82, 0xa4, 0x77, 0x16, 0x84,
	0x98, 0xc6, 0x17, 0x81, 0x6a, 0xf8, 0x38, 0xea, 0x48, 0xc5, 0xbb, 0x36, 0xc6, 0x58, 0x2b, 0x7c,
	0xd6, 0x6a, 0xf7, 0x52, 0x96, 0x60, 0x1a, 0xaf, 0xc0, 0xa2, 0xc6, 0x45, 0x0f, 0x7c, 0xcf, 0xce,
	0x19, 0xf7, 0xd9, 0xfd, 0x3e, 0x36, 0xcb, 0xf7, 0xed, 0xeb, 0xef, 0x10, 0xa8, 0xfa, 0xdd, 0xd3,
	0x9d, 0xa8, 0xd5, 0x8e, 0x18, 0xdd, 0x06, 0x47, 0x19, 0xd2, 0x1f, 0xb7, 0x87, 0x5f, 0xa2, 0xd7,
	0x87, 0xc3, 0xde, 0x0c, 0xbd, 0x09, 0xd4, 0xb4, 0x21, 0x3f, 0xd1, 0x8e, 0xba, 0x4f, 0xae, 0x8f,
	0x52, 0x78, 0x33, 0xf4, 0x4b, 0x00, 0x7e, 0xf7, 0xf4, 0xc6, 0x59, 0x10, 0x45, 0x2c, 0xa4, 0x85,
	0x4f, 0x41, 0xe2, 0x8c, 0x5a, 0x1f, 0x8a, 0x7a, 0x33, 0x9b, 0xe4, 0xd3, 0x64, 0xdb, 0x79, 0xfb,
	0xf1, 0x06, 0xf9, 0xcb, 0xe3, 0x0d, 0xf2, 0xe1, 0xe3, 0x0d, 0xf2, 0xfa, 0x47, 0x1b, 0x33, 0x77,
	0x2a, 0x7c, 0xf0, 0x4b, 0x1f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x21, 0xe5, 0x38, 0xf7, 0x2f, 0x1f,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RpcEngineClient is the client API for RpcEngine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RpcEngineClient interface {
	RegisterNodeFunc(ctx context.Context, in *NodeFunc, opts ...grpc.CallOption) (*NodeFunc, error)
	RegisterNodeReport(ctx context.Context, in *NodeReport, opts ...grpc.CallOption) (*NodeReport, error)
	RpcChannel(ctx context.Context, opts ...grpc.CallOption) (RpcEngine_RpcChannelClient, error)
}

type rpcEngineClient struct {
	cc *grpc.ClientConn
}

func NewRpcEngineClient(cc *grpc.ClientConn) RpcEngineClient {
	return &rpcEngineClient{cc}
}

func (c *rpcEngineClient) RegisterNodeFunc(ctx context.Context, in *NodeFunc, opts ...grpc.CallOption) (*NodeFunc, error) {
	out := new(NodeFunc)
	err := c.cc.Invoke(ctx, "/protoManage.RpcEngine/RegisterNodeFunc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcEngineClient) RegisterNodeReport(ctx context.Context, in *NodeReport, opts ...grpc.CallOption) (*NodeReport, error) {
	out := new(NodeReport)
	err := c.cc.Invoke(ctx, "/protoManage.RpcEngine/RegisterNodeReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcEngineClient) RpcChannel(ctx context.Context, opts ...grpc.CallOption) (RpcEngine_RpcChannelClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RpcEngine_serviceDesc.Streams[0], "/protoManage.RpcEngine/RpcChannel", opts...)
	if err != nil {
		return nil, err
	}
	x := &rpcEngineRpcChannelClient{stream}
	return x, nil
}

type RpcEngine_RpcChannelClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type rpcEngineRpcChannelClient struct {
	grpc.ClientStream
}

func (x *rpcEngineRpcChannelClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rpcEngineRpcChannelClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RpcEngineServer is the server API for RpcEngine service.
type RpcEngineServer interface {
	RegisterNodeFunc(context.Context, *NodeFunc) (*NodeFunc, error)
	RegisterNodeReport(context.Context, *NodeReport) (*NodeReport, error)
	RpcChannel(RpcEngine_RpcChannelServer) error
}

// UnimplementedRpcEngineServer can be embedded to have forward compatible implementations.
type UnimplementedRpcEngineServer struct {
}

func (*UnimplementedRpcEngineServer) RegisterNodeFunc(ctx context.Context, req *NodeFunc) (*NodeFunc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNodeFunc not implemented")
}
func (*UnimplementedRpcEngineServer) RegisterNodeReport(ctx context.Context, req *NodeReport) (*NodeReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNodeReport not implemented")
}
func (*UnimplementedRpcEngineServer) RpcChannel(srv RpcEngine_RpcChannelServer) error {
	return status.Errorf(codes.Unimplemented, "method RpcChannel not implemented")
}

func RegisterRpcEngineServer(s *grpc.Server, srv RpcEngineServer) {
	s.RegisterService(&_RpcEngine_serviceDesc, srv)
}

func _RpcEngine_RegisterNodeFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeFunc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcEngineServer).RegisterNodeFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoManage.RpcEngine/RegisterNodeFunc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcEngineServer).RegisterNodeFunc(ctx, req.(*NodeFunc))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcEngine_RegisterNodeReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcEngineServer).RegisterNodeReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoManage.RpcEngine/RegisterNodeReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcEngineServer).RegisterNodeReport(ctx, req.(*NodeReport))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcEngine_RpcChannel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RpcEngineServer).RpcChannel(&rpcEngineRpcChannelServer{stream})
}

type RpcEngine_RpcChannelServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type rpcEngineRpcChannelServer struct {
	grpc.ServerStream
}

func (x *rpcEngineRpcChannelServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rpcEngineRpcChannelServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _RpcEngine_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protoManage.RpcEngine",
	HandlerType: (*RpcEngineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterNodeFunc",
			Handler:    _RpcEngine_RegisterNodeFunc_Handler,
		},
		{
			MethodName: "RegisterNodeReport",
			Handler:    _RpcEngine_RegisterNodeReport_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RpcChannel",
			Handler:       _RpcEngine_RpcChannel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "manage.proto",
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintManage(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Order != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.Order))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HttpMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HttpMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HttpMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintManage(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintManage(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Order != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.Order))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Base) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Base) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Base) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdateTime != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.UpdateTime))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StateCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UnknowCount != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.UnknowCount))
		i--
		dAtA[i] = 0x30
	}
	if m.ErrorCount != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.ErrorCount))
		i--
		dAtA[i] = 0x28
	}
	if m.WarnCount != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.WarnCount))
		i--
		dAtA[i] = 0x20
	}
	if m.NormalCount != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.NormalCount))
		i--
		dAtA[i] = 0x18
	}
	if m.NotCount != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.NotCount))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Filter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Filter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Filter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintManage(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.SenderEndTime != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.SenderEndTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.SenderBeginTime != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.SenderBeginTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.SenderType != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.SenderType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.SenderName) > 0 {
		i -= len(m.SenderName)
		copy(dAtA[i:], m.SenderName)
		i = encodeVarintManage(dAtA, i, uint64(len(m.SenderName)))
		i--
		dAtA[i] = 0x7a
	}
	if m.PageNum != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.PageNum))
		i--
		dAtA[i] = 0x70
	}
	if m.PageSize != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x68
	}
	if m.State != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintManage(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Flag) > 0 {
		i -= len(m.Flag)
		copy(dAtA[i:], m.Flag)
		i = encodeVarintManage(dAtA, i, uint64(len(m.Flag)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintManage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x4a
	}
	if m.ReportID != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.ReportID))
		i--
		dAtA[i] = 0x40
	}
	if m.FuncID != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.FuncID))
		i--
		dAtA[i] = 0x38
	}
	if m.TargetID != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.TargetID))
		i--
		dAtA[i] = 0x30
	}
	if m.SourceID != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.SourceID))
		i--
		dAtA[i] = 0x28
	}
	if m.NodeID != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.NodeID))
		i--
		dAtA[i] = 0x20
	}
	if m.TypeID != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.TypeID))
		i--
		dAtA[i] = 0x18
	}
	if m.GroupID != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.GroupID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Manager) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Manager) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Manager) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x40
	}
	if m.Level != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Setting) > 0 {
		i -= len(m.Setting)
		copy(dAtA[i:], m.Setting)
		i = encodeVarintManage(dAtA, i, uint64(len(m.Setting)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintManage(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NickName) > 0 {
		i -= len(m.NickName)
		copy(dAtA[i:], m.NickName)
		i = encodeVarintManage(dAtA, i, uint64(len(m.NickName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintManage(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintManage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *TopLink) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopLink) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopLink) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintManage(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintManage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NodeGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintManage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NodeType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintManage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Node) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Node) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintManage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if m.TypeID != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.TypeID))
		i--
		dAtA[i] = 0x18
	}
	if m.GroupID != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.GroupID))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NodeLink) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeLink) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeLink) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x20
	}
	if m.TargetID != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.TargetID))
		i--
		dAtA[i] = 0x18
	}
	if m.SourceID != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.SourceID))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NodeFunc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeFunc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeFunc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Func) > 0 {
		i -= len(m.Func)
		copy(dAtA[i:], m.Func)
		i = encodeVarintManage(dAtA, i, uint64(len(m.Func)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintManage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.NodeID != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.NodeID))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NodeFuncCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeFuncCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeFuncCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ReturnVal) > 0 {
		i -= len(m.ReturnVal)
		copy(dAtA[i:], m.ReturnVal)
		i = encodeVarintManage(dAtA, i, uint64(len(m.ReturnVal)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Parameter) > 0 {
		i -= len(m.Parameter)
		copy(dAtA[i:], m.Parameter)
		i = encodeVarintManage(dAtA, i, uint64(len(m.Parameter)))
		i--
		dAtA[i] = 0x22
	}
	if m.FuncID != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.FuncID))
		i--
		dAtA[i] = 0x18
	}
	if m.ManagerID != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.ManagerID))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NodeReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintManage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Func) > 0 {
		i -= len(m.Func)
		copy(dAtA[i:], m.Func)
		i = encodeVarintManage(dAtA, i, uint64(len(m.Func)))
		i--
		dAtA[i] = 0x1a
	}
	if m.NodeID != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.NodeID))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NodeReportVal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeReportVal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeReportVal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x20
	}
	if m.Value != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Value))))
		i--
		dAtA[i] = 0x19
	}
	if m.ReportID != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.ReportID))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NodeNotify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeNotify) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeNotify) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintManage(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x22
	}
	if m.SenderType != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.SenderType))
		i--
		dAtA[i] = 0x18
	}
	if m.SenderID != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.SenderID))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ReqNodeLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqNodeLogin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqNodeLogin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.Node.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.NodeType.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.NodeGroup.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ReqNodeOnline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqNodeOnline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqNodeOnline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NodeLinkList) > 0 {
		for iNdEx := len(m.NodeLinkList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeLinkList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Node.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ReqTopLinkList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqTopLinkList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqTopLinkList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *AnsTopLinkList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnsTopLinkList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnsTopLinkList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TopLinkList) > 0 {
		for iNdEx := len(m.TopLinkList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TopLinkList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReqManagerList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqManagerList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqManagerList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *AnsManagerList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnsManagerList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnsManagerList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ManagerList) > 0 {
		for iNdEx := len(m.ManagerList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ManagerList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReqNodeGroupList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqNodeGroupList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqNodeGroupList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AnsNodeGroupList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnsNodeGroupList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnsNodeGroupList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NodeGroupList) > 0 {
		for iNdEx := len(m.NodeGroupList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeGroupList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.NodeStateCountList) > 0 {
		for iNdEx := len(m.NodeStateCountList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeStateCountList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Length != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqNodeTypeList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqNodeTypeList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqNodeTypeList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AnsNodeTypeList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnsNodeTypeList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnsNodeTypeList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NodeStateCountList) > 0 {
		for iNdEx := len(m.NodeStateCountList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeStateCountList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.NodeTypeList) > 0 {
		for iNdEx := len(m.NodeTypeList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeTypeList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Length != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqNodeList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqNodeList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqNodeList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AnsNodeList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnsNodeList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnsNodeList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NodeReportStateCountList) > 0 {
		for iNdEx := len(m.NodeReportStateCountList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeReportStateCountList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.NodeFuncStateCountList) > 0 {
		for iNdEx := len(m.NodeFuncStateCountList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeFuncStateCountList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.NodeLinkTargetStateCountList) > 0 {
		for iNdEx := len(m.NodeLinkTargetStateCountList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeLinkTargetStateCountList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.NodeLinkSourceStateCountList) > 0 {
		for iNdEx := len(m.NodeLinkSourceStateCountList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeLinkSourceStateCountList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.NodeTypeList) > 0 {
		for iNdEx := len(m.NodeTypeList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeTypeList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.NodeGroupList) > 0 {
		for iNdEx := len(m.NodeGroupList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeGroupList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.NodeList) > 0 {
		for iNdEx := len(m.NodeList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Length != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqNodeLinkList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqNodeLinkList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqNodeLinkList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AnsNodeLinkList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnsNodeLinkList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnsNodeLinkList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NodeList) > 0 {
		for iNdEx := len(m.NodeList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.NodeLinkList) > 0 {
		for iNdEx := len(m.NodeLinkList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeLinkList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Length != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqNodeFuncList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqNodeFuncList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqNodeFuncList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AnsNodeFuncList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnsNodeFuncList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnsNodeFuncList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NodeFuncCallList) > 0 {
		for iNdEx := len(m.NodeFuncCallList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeFuncCallList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.NodeList) > 0 {
		for iNdEx := len(m.NodeList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.NodeFuncList) > 0 {
		for iNdEx := len(m.NodeFuncList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeFuncList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Length != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqNodeReportList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqNodeReportList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqNodeReportList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AnsNodeReportList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnsNodeReportList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnsNodeReportList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NodeReportValList) > 0 {
		for iNdEx := len(m.NodeReportValList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeReportValList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.NodeList) > 0 {
		for iNdEx := len(m.NodeList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.NodeReportList) > 0 {
		for iNdEx := len(m.NodeReportList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeReportList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Length != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqNodeFuncCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqNodeFuncCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqNodeFuncCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.NodeFuncCall.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AnsNodeFuncCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnsNodeFuncCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnsNodeFuncCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.NodeFuncCall.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ReqNodeFuncCallList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqNodeFuncCallList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqNodeFuncCallList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AnsNodeFuncCallList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnsNodeFuncCallList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnsNodeFuncCallList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NodeFuncCallList) > 0 {
		for iNdEx := len(m.NodeFuncCallList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeFuncCallList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReqNodeReportValList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqNodeReportValList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqNodeReportValList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AnsNodeReportValList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnsNodeReportValList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnsNodeReportValList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NodeReportValList) > 0 {
		for iNdEx := len(m.NodeReportValList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeReportValList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReqNodeNotifyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqNodeNotifyList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqNodeNotifyList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AnsNodeNotifyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnsNodeNotifyList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnsNodeNotifyList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NodeList) > 0 {
		for iNdEx := len(m.NodeList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.NodeNotifyList) > 0 {
		for iNdEx := len(m.NodeNotifyList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeNotifyList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Length != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqNodeTest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqNodeTest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqNodeTest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintManage(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AnsNodeTest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnsNodeTest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnsNodeTest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func encodeVarintManage(dAtA []byte, offset int, v uint64) int {
	offset -= sovManage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Order != 0 {
		n += 1 + sovManage(uint64(m.Order))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HttpMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Order != 0 {
		n += 1 + sovManage(uint64(m.Order))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Base) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovManage(uint64(m.ID))
	}
	if m.UpdateTime != 0 {
		n += 1 + sovManage(uint64(m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StateCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovManage(uint64(m.ID))
	}
	if m.NotCount != 0 {
		n += 1 + sovManage(uint64(m.NotCount))
	}
	if m.NormalCount != 0 {
		n += 1 + sovManage(uint64(m.NormalCount))
	}
	if m.WarnCount != 0 {
		n += 1 + sovManage(uint64(m.WarnCount))
	}
	if m.ErrorCount != 0 {
		n += 1 + sovManage(uint64(m.ErrorCount))
	}
	if m.UnknowCount != 0 {
		n += 1 + sovManage(uint64(m.UnknowCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Filter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovManage(uint64(m.ID))
	}
	if m.GroupID != 0 {
		n += 1 + sovManage(uint64(m.GroupID))
	}
	if m.TypeID != 0 {
		n += 1 + sovManage(uint64(m.TypeID))
	}
	if m.NodeID != 0 {
		n += 1 + sovManage(uint64(m.NodeID))
	}
	if m.SourceID != 0 {
		n += 1 + sovManage(uint64(m.SourceID))
	}
	if m.TargetID != 0 {
		n += 1 + sovManage(uint64(m.TargetID))
	}
	if m.FuncID != 0 {
		n += 1 + sovManage(uint64(m.FuncID))
	}
	if m.ReportID != 0 {
		n += 1 + sovManage(uint64(m.ReportID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	l = len(m.Flag)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovManage(uint64(m.State))
	}
	if m.PageSize != 0 {
		n += 1 + sovManage(uint64(m.PageSize))
	}
	if m.PageNum != 0 {
		n += 1 + sovManage(uint64(m.PageNum))
	}
	l = len(m.SenderName)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	if m.SenderType != 0 {
		n += 2 + sovManage(uint64(m.SenderType))
	}
	if m.SenderBeginTime != 0 {
		n += 2 + sovManage(uint64(m.SenderBeginTime))
	}
	if m.SenderEndTime != 0 {
		n += 2 + sovManage(uint64(m.SenderEndTime))
	}
	l = len(m.Message)
	if l > 0 {
		n += 2 + l + sovManage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Manager) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Base.Size()
	n += 1 + l + sovManage(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	l = len(m.Setting)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovManage(uint64(m.Level))
	}
	if m.State != 0 {
		n += 1 + sovManage(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopLink) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Base.Size()
	n += 1 + l + sovManage(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovManage(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Base.Size()
	n += 1 + l + sovManage(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Base.Size()
	n += 1 + l + sovManage(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Node) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Base.Size()
	n += 1 + l + sovManage(uint64(l))
	if m.GroupID != 0 {
		n += 1 + sovManage(uint64(m.GroupID))
	}
	if m.TypeID != 0 {
		n += 1 + sovManage(uint64(m.TypeID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovManage(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeLink) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Base.Size()
	n += 1 + l + sovManage(uint64(l))
	if m.SourceID != 0 {
		n += 1 + sovManage(uint64(m.SourceID))
	}
	if m.TargetID != 0 {
		n += 1 + sovManage(uint64(m.TargetID))
	}
	if m.State != 0 {
		n += 1 + sovManage(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeFunc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Base.Size()
	n += 1 + l + sovManage(uint64(l))
	if m.NodeID != 0 {
		n += 1 + sovManage(uint64(m.NodeID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	l = len(m.Func)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovManage(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeFuncCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Base.Size()
	n += 1 + l + sovManage(uint64(l))
	if m.ManagerID != 0 {
		n += 1 + sovManage(uint64(m.ManagerID))
	}
	if m.FuncID != 0 {
		n += 1 + sovManage(uint64(m.FuncID))
	}
	l = len(m.Parameter)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	l = len(m.ReturnVal)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovManage(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Base.Size()
	n += 1 + l + sovManage(uint64(l))
	if m.NodeID != 0 {
		n += 1 + sovManage(uint64(m.NodeID))
	}
	l = len(m.Func)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovManage(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeReportVal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Base.Size()
	n += 1 + l + sovManage(uint64(l))
	if m.ReportID != 0 {
		n += 1 + sovManage(uint64(m.ReportID))
	}
	if m.Value != 0 {
		n += 9
	}
	if m.State != 0 {
		n += 1 + sovManage(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeNotify) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Base.Size()
	n += 1 + l + sovManage(uint64(l))
	if m.SenderID != 0 {
		n += 1 + sovManage(uint64(m.SenderID))
	}
	if m.SenderType != 0 {
		n += 1 + sovManage(uint64(m.SenderType))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovManage(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqNodeLogin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NodeGroup.Size()
	n += 1 + l + sovManage(uint64(l))
	l = m.NodeType.Size()
	n += 1 + l + sovManage(uint64(l))
	l = m.Node.Size()
	n += 1 + l + sovManage(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqNodeOnline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Node.Size()
	n += 1 + l + sovManage(uint64(l))
	if len(m.NodeLinkList) > 0 {
		for _, e := range m.NodeLinkList {
			l = e.Size()
			n += 1 + l + sovManage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqTopLinkList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnsTopLinkList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TopLinkList) > 0 {
		for _, e := range m.TopLinkList {
			l = e.Size()
			n += 1 + l + sovManage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqManagerList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnsManagerList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ManagerList) > 0 {
		for _, e := range m.ManagerList {
			l = e.Size()
			n += 1 + l + sovManage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqNodeGroupList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Filter.Size()
	n += 1 + l + sovManage(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnsNodeGroupList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Length != 0 {
		n += 1 + sovManage(uint64(m.Length))
	}
	if len(m.NodeStateCountList) > 0 {
		for _, e := range m.NodeStateCountList {
			l = e.Size()
			n += 1 + l + sovManage(uint64(l))
		}
	}
	if len(m.NodeGroupList) > 0 {
		for _, e := range m.NodeGroupList {
			l = e.Size()
			n += 1 + l + sovManage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqNodeTypeList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Filter.Size()
	n += 1 + l + sovManage(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnsNodeTypeList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Length != 0 {
		n += 1 + sovManage(uint64(m.Length))
	}
	if len(m.NodeTypeList) > 0 {
		for _, e := range m.NodeTypeList {
			l = e.Size()
			n += 1 + l + sovManage(uint64(l))
		}
	}
	if len(m.NodeStateCountList) > 0 {
		for _, e := range m.NodeStateCountList {
			l = e.Size()
			n += 1 + l + sovManage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqNodeList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Filter.Size()
	n += 1 + l + sovManage(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnsNodeList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Length != 0 {
		n += 1 + sovManage(uint64(m.Length))
	}
	if len(m.NodeList) > 0 {
		for _, e := range m.NodeList {
			l = e.Size()
			n += 1 + l + sovManage(uint64(l))
		}
	}
	if len(m.NodeGroupList) > 0 {
		for _, e := range m.NodeGroupList {
			l = e.Size()
			n += 1 + l + sovManage(uint64(l))
		}
	}
	if len(m.NodeTypeList) > 0 {
		for _, e := range m.NodeTypeList {
			l = e.Size()
			n += 1 + l + sovManage(uint64(l))
		}
	}
	if len(m.NodeLinkSourceStateCountList) > 0 {
		for _, e := range m.NodeLinkSourceStateCountList {
			l = e.Size()
			n += 1 + l + sovManage(uint64(l))
		}
	}
	if len(m.NodeLinkTargetStateCountList) > 0 {
		for _, e := range m.NodeLinkTargetStateCountList {
			l = e.Size()
			n += 1 + l + sovManage(uint64(l))
		}
	}
	if len(m.NodeFuncStateCountList) > 0 {
		for _, e := range m.NodeFuncStateCountList {
			l = e.Size()
			n += 1 + l + sovManage(uint64(l))
		}
	}
	if len(m.NodeReportStateCountList) > 0 {
		for _, e := range m.NodeReportStateCountList {
			l = e.Size()
			n += 1 + l + sovManage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqNodeLinkList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Filter.Size()
	n += 1 + l + sovManage(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnsNodeLinkList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Length != 0 {
		n += 1 + sovManage(uint64(m.Length))
	}
	if len(m.NodeLinkList) > 0 {
		for _, e := range m.NodeLinkList {
			l = e.Size()
			n += 1 + l + sovManage(uint64(l))
		}
	}
	if len(m.NodeList) > 0 {
		for _, e := range m.NodeList {
			l = e.Size()
			n += 1 + l + sovManage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqNodeFuncList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Filter.Size()
	n += 1 + l + sovManage(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnsNodeFuncList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Length != 0 {
		n += 1 + sovManage(uint64(m.Length))
	}
	if len(m.NodeFuncList) > 0 {
		for _, e := range m.NodeFuncList {
			l = e.Size()
			n += 1 + l + sovManage(uint64(l))
		}
	}
	if len(m.NodeList) > 0 {
		for _, e := range m.NodeList {
			l = e.Size()
			n += 1 + l + sovManage(uint64(l))
		}
	}
	if len(m.NodeFuncCallList) > 0 {
		for _, e := range m.NodeFuncCallList {
			l = e.Size()
			n += 1 + l + sovManage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqNodeReportList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Filter.Size()
	n += 1 + l + sovManage(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnsNodeReportList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Length != 0 {
		n += 1 + sovManage(uint64(m.Length))
	}
	if len(m.NodeReportList) > 0 {
		for _, e := range m.NodeReportList {
			l = e.Size()
			n += 1 + l + sovManage(uint64(l))
		}
	}
	if len(m.NodeList) > 0 {
		for _, e := range m.NodeList {
			l = e.Size()
			n += 1 + l + sovManage(uint64(l))
		}
	}
	if len(m.NodeReportValList) > 0 {
		for _, e := range m.NodeReportValList {
			l = e.Size()
			n += 1 + l + sovManage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqNodeFuncCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NodeFuncCall.Size()
	n += 1 + l + sovManage(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnsNodeFuncCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NodeFuncCall.Size()
	n += 1 + l + sovManage(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqNodeFuncCallList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Filter.Size()
	n += 1 + l + sovManage(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnsNodeFuncCallList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NodeFuncCallList) > 0 {
		for _, e := range m.NodeFuncCallList {
			l = e.Size()
			n += 1 + l + sovManage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqNodeReportValList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Filter.Size()
	n += 1 + l + sovManage(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnsNodeReportValList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NodeReportValList) > 0 {
		for _, e := range m.NodeReportValList {
			l = e.Size()
			n += 1 + l + sovManage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqNodeNotifyList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Filter.Size()
	n += 1 + l + sovManage(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnsNodeNotifyList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Length != 0 {
		n += 1 + sovManage(uint64(m.Length))
	}
	if len(m.NodeNotifyList) > 0 {
		for _, e := range m.NodeNotifyList {
			l = e.Size()
			n += 1 + l + sovManage(uint64(l))
		}
	}
	if len(m.NodeList) > 0 {
		for _, e := range m.NodeList {
			l = e.Size()
			n += 1 + l + sovManage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqNodeTest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovManage(uint64(m.ID))
	}
	if m.Type != 0 {
		n += 1 + sovManage(uint64(m.Type))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovManage(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnsNodeTest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovManage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozManage(x uint64) (n int) {
	return sovManage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= Order(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message[:0], dAtA[iNdEx:postIndex]...)
			if m.Message == nil {
				m.Message = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HttpMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HttpMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HttpMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= Order(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message[:0], dAtA[iNdEx:postIndex]...)
			if m.Message == nil {
				m.Message = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Base) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Base: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Base: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			m.UpdateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotCount", wireType)
			}
			m.NotCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NormalCount", wireType)
			}
			m.NormalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NormalCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WarnCount", wireType)
			}
			m.WarnCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WarnCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCount", wireType)
			}
			m.ErrorCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnknowCount", wireType)
			}
			m.UnknowCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnknowCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Filter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Filter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Filter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeID", wireType)
			}
			m.TypeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypeID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceID", wireType)
			}
			m.SourceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetID", wireType)
			}
			m.TargetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FuncID", wireType)
			}
			m.FuncID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FuncID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportID", wireType)
			}
			m.ReportID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReportID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Flag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNum", wireType)
			}
			m.PageNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderType", wireType)
			}
			m.SenderType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderType |= NotifySenderType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderBeginTime", wireType)
			}
			m.SenderBeginTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderBeginTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderEndTime", wireType)
			}
			m.SenderEndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderEndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Manager) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Manager: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Manager: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Setting", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Setting = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopLink) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopLink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopLink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeID", wireType)
			}
			m.TypeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypeID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeLink) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeLink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeLink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceID", wireType)
			}
			m.SourceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetID", wireType)
			}
			m.TargetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeFunc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeFunc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeFunc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Func", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Func = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeFuncCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeFuncCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeFuncCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagerID", wireType)
			}
			m.ManagerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ManagerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FuncID", wireType)
			}
			m.FuncID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FuncID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parameter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnVal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnVal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Func", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Func = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeReportVal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeReportVal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeReportVal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportID", wireType)
			}
			m.ReportID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReportID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = float64(math.Float64frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeNotify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeNotify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeNotify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderID", wireType)
			}
			m.SenderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderType", wireType)
			}
			m.SenderType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderType |= NotifySenderType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqNodeLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqNodeLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqNodeLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NodeGroup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NodeType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Node.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqNodeOnline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqNodeOnline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqNodeOnline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Node.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeLinkList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeLinkList = append(m.NodeLinkList, NodeLink{})
			if err := m.NodeLinkList[len(m.NodeLinkList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqTopLinkList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqTopLinkList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqTopLinkList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnsTopLinkList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnsTopLinkList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnsTopLinkList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopLinkList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopLinkList = append(m.TopLinkList, TopLink{})
			if err := m.TopLinkList[len(m.TopLinkList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqManagerList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqManagerList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqManagerList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnsManagerList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnsManagerList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnsManagerList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagerList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManagerList = append(m.ManagerList, Manager{})
			if err := m.ManagerList[len(m.ManagerList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqNodeGroupList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqNodeGroupList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqNodeGroupList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnsNodeGroupList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnsNodeGroupList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnsNodeGroupList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeStateCountList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeStateCountList = append(m.NodeStateCountList, StateCount{})
			if err := m.NodeStateCountList[len(m.NodeStateCountList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeGroupList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeGroupList = append(m.NodeGroupList, NodeGroup{})
			if err := m.NodeGroupList[len(m.NodeGroupList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqNodeTypeList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqNodeTypeList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqNodeTypeList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnsNodeTypeList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnsNodeTypeList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnsNodeTypeList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeTypeList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeTypeList = append(m.NodeTypeList, NodeType{})
			if err := m.NodeTypeList[len(m.NodeTypeList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeStateCountList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeStateCountList = append(m.NodeStateCountList, StateCount{})
			if err := m.NodeStateCountList[len(m.NodeStateCountList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqNodeList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqNodeList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqNodeList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnsNodeList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnsNodeList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnsNodeList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeList = append(m.NodeList, Node{})
			if err := m.NodeList[len(m.NodeList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeGroupList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeGroupList = append(m.NodeGroupList, NodeGroup{})
			if err := m.NodeGroupList[len(m.NodeGroupList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeTypeList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeTypeList = append(m.NodeTypeList, NodeType{})
			if err := m.NodeTypeList[len(m.NodeTypeList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeLinkSourceStateCountList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeLinkSourceStateCountList = append(m.NodeLinkSourceStateCountList, StateCount{})
			if err := m.NodeLinkSourceStateCountList[len(m.NodeLinkSourceStateCountList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeLinkTargetStateCountList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeLinkTargetStateCountList = append(m.NodeLinkTargetStateCountList, StateCount{})
			if err := m.NodeLinkTargetStateCountList[len(m.NodeLinkTargetStateCountList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeFuncStateCountList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeFuncStateCountList = append(m.NodeFuncStateCountList, StateCount{})
			if err := m.NodeFuncStateCountList[len(m.NodeFuncStateCountList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeReportStateCountList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeReportStateCountList = append(m.NodeReportStateCountList, StateCount{})
			if err := m.NodeReportStateCountList[len(m.NodeReportStateCountList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqNodeLinkList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqNodeLinkList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqNodeLinkList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnsNodeLinkList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnsNodeLinkList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnsNodeLinkList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeLinkList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeLinkList = append(m.NodeLinkList, NodeLink{})
			if err := m.NodeLinkList[len(m.NodeLinkList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeList = append(m.NodeList, Node{})
			if err := m.NodeList[len(m.NodeList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqNodeFuncList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqNodeFuncList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqNodeFuncList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnsNodeFuncList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnsNodeFuncList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnsNodeFuncList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeFuncList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeFuncList = append(m.NodeFuncList, NodeFunc{})
			if err := m.NodeFuncList[len(m.NodeFuncList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeList = append(m.NodeList, Node{})
			if err := m.NodeList[len(m.NodeList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeFuncCallList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeFuncCallList = append(m.NodeFuncCallList, NodeFuncCall{})
			if err := m.NodeFuncCallList[len(m.NodeFuncCallList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqNodeReportList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqNodeReportList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqNodeReportList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnsNodeReportList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnsNodeReportList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnsNodeReportList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeReportList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeReportList = append(m.NodeReportList, NodeReport{})
			if err := m.NodeReportList[len(m.NodeReportList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeList = append(m.NodeList, Node{})
			if err := m.NodeList[len(m.NodeList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeReportValList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeReportValList = append(m.NodeReportValList, NodeReportVal{})
			if err := m.NodeReportValList[len(m.NodeReportValList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqNodeFuncCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqNodeFuncCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqNodeFuncCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeFuncCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NodeFuncCall.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnsNodeFuncCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnsNodeFuncCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnsNodeFuncCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeFuncCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NodeFuncCall.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqNodeFuncCallList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqNodeFuncCallList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqNodeFuncCallList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnsNodeFuncCallList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnsNodeFuncCallList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnsNodeFuncCallList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeFuncCallList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeFuncCallList = append(m.NodeFuncCallList, NodeFuncCall{})
			if err := m.NodeFuncCallList[len(m.NodeFuncCallList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqNodeReportValList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqNodeReportValList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqNodeReportValList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnsNodeReportValList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnsNodeReportValList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnsNodeReportValList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeReportValList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeReportValList = append(m.NodeReportValList, NodeReportVal{})
			if err := m.NodeReportValList[len(m.NodeReportValList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqNodeNotifyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqNodeNotifyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqNodeNotifyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnsNodeNotifyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnsNodeNotifyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnsNodeNotifyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeNotifyList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeNotifyList = append(m.NodeNotifyList, NodeNotify{})
			if err := m.NodeNotifyList[len(m.NodeNotifyList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeList = append(m.NodeList, Node{})
			if err := m.NodeList[len(m.NodeList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqNodeTest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqNodeTest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqNodeTest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnsNodeTest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnsNodeTest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnsNodeTest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipManage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowManage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowManage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowManage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthManage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupManage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthManage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthManage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowManage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupManage = fmt.Errorf("proto: unexpected end of group")
)
